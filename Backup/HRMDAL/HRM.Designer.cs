//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HRMDAL {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("HRM")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class HRM : System.Data.DataSet {
        
        private EmployeesDataTable tableEmployees;
        
        private DepartmentsDataTable tableDepartments;
        
        private ContractTypesDataTable tableContractTypes;
        
        private PositionsDataTable tablePositions;
        
        private EmployeeDeptPositionDataTable tableEmployeeDeptPosition;
        
        private TimeKeepingDataTable tableTimeKeeping;
        
        private Sel_DepartmentTimeKeepingDataTable tableSel_DepartmentTimeKeeping;
        
        private DeptPositionDataTable tableDeptPosition;
        
        private Sel_PersonalTimeKeepingDataTable tableSel_PersonalTimeKeeping;
        
        private CoefficientTypeDataTable tableCoefficientType;
        
        private CoefficientDataTable tableCoefficient;
        
        private ViewTimeKeepingDataTable tableViewTimeKeeping;
        
        private ViewCoefficientDataTable tableViewCoefficient;
        
        private EmployeeIncomeDataTable tableEmployeeIncome;
        
        private IncomeMonthDataTable tableIncomeMonth;
        
        private TimeKeepingTypeDataTable tableTimeKeepingType;
        
        private ViewEmployeeDeptPositionDataTable tableViewEmployeeDeptPosition;
        
        private ViewUserRolesDataTable tableViewUserRoles;
        
        private IncomeTypeDataTable tableIncomeType;
        
        private ViewIncomeDataTable tableViewIncome;
        
        private ViewEmployeeIncomesDataTable tableViewEmployeeIncomes;
        
        private ViewRealIncomeDataTable tableViewRealIncome;
        
        private System.Data.DataRelation relationFK_Employees_ContractTypes;
        
        private System.Data.DataRelation relationFK_EmployeeDeptPosition_Departments;
        
        private System.Data.DataRelation relationFK_EmployeeDeptPosition_Employees;
        
        private System.Data.DataRelation relationFK_EmployeeDeptPosition_Positions;
        
        private System.Data.DataRelation relationDepartments_DeptPosition;
        
        private System.Data.DataRelation relationPositions_DeptPosition;
        
        private System.Data.DataRelation relationFK_Coefficient_CoefficientType;
        
        private System.Data.DataRelation relationEmployees_Coefficient;
        
        private System.Data.DataRelation relationEmployees_TimeKeeping;
        
        private System.Data.DataRelation relationEmployees_IncomeMonth;
        
        private System.Data.DataRelation relationTimeKeepingType_TimeKeeping;
        
        private System.Data.DataRelation relationFK_IncomeMonth_IncomeType;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HRM() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected HRM(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Employees"] != null)) {
                    base.Tables.Add(new EmployeesDataTable(ds.Tables["Employees"]));
                }
                if ((ds.Tables["Departments"] != null)) {
                    base.Tables.Add(new DepartmentsDataTable(ds.Tables["Departments"]));
                }
                if ((ds.Tables["ContractTypes"] != null)) {
                    base.Tables.Add(new ContractTypesDataTable(ds.Tables["ContractTypes"]));
                }
                if ((ds.Tables["Positions"] != null)) {
                    base.Tables.Add(new PositionsDataTable(ds.Tables["Positions"]));
                }
                if ((ds.Tables["EmployeeDeptPosition"] != null)) {
                    base.Tables.Add(new EmployeeDeptPositionDataTable(ds.Tables["EmployeeDeptPosition"]));
                }
                if ((ds.Tables["TimeKeeping"] != null)) {
                    base.Tables.Add(new TimeKeepingDataTable(ds.Tables["TimeKeeping"]));
                }
                if ((ds.Tables["Sel_DepartmentTimeKeeping"] != null)) {
                    base.Tables.Add(new Sel_DepartmentTimeKeepingDataTable(ds.Tables["Sel_DepartmentTimeKeeping"]));
                }
                if ((ds.Tables["DeptPosition"] != null)) {
                    base.Tables.Add(new DeptPositionDataTable(ds.Tables["DeptPosition"]));
                }
                if ((ds.Tables["Sel_PersonalTimeKeeping"] != null)) {
                    base.Tables.Add(new Sel_PersonalTimeKeepingDataTable(ds.Tables["Sel_PersonalTimeKeeping"]));
                }
                if ((ds.Tables["CoefficientType"] != null)) {
                    base.Tables.Add(new CoefficientTypeDataTable(ds.Tables["CoefficientType"]));
                }
                if ((ds.Tables["Coefficient"] != null)) {
                    base.Tables.Add(new CoefficientDataTable(ds.Tables["Coefficient"]));
                }
                if ((ds.Tables["ViewTimeKeeping"] != null)) {
                    base.Tables.Add(new ViewTimeKeepingDataTable(ds.Tables["ViewTimeKeeping"]));
                }
                if ((ds.Tables["ViewCoefficient"] != null)) {
                    base.Tables.Add(new ViewCoefficientDataTable(ds.Tables["ViewCoefficient"]));
                }
                if ((ds.Tables["EmployeeIncome"] != null)) {
                    base.Tables.Add(new EmployeeIncomeDataTable(ds.Tables["EmployeeIncome"]));
                }
                if ((ds.Tables["IncomeMonth"] != null)) {
                    base.Tables.Add(new IncomeMonthDataTable(ds.Tables["IncomeMonth"]));
                }
                if ((ds.Tables["TimeKeepingType"] != null)) {
                    base.Tables.Add(new TimeKeepingTypeDataTable(ds.Tables["TimeKeepingType"]));
                }
                if ((ds.Tables["ViewEmployeeDeptPosition"] != null)) {
                    base.Tables.Add(new ViewEmployeeDeptPositionDataTable(ds.Tables["ViewEmployeeDeptPosition"]));
                }
                if ((ds.Tables["ViewUserRoles"] != null)) {
                    base.Tables.Add(new ViewUserRolesDataTable(ds.Tables["ViewUserRoles"]));
                }
                if ((ds.Tables["IncomeType"] != null)) {
                    base.Tables.Add(new IncomeTypeDataTable(ds.Tables["IncomeType"]));
                }
                if ((ds.Tables["ViewIncome"] != null)) {
                    base.Tables.Add(new ViewIncomeDataTable(ds.Tables["ViewIncome"]));
                }
                if ((ds.Tables["ViewEmployeeIncomes"] != null)) {
                    base.Tables.Add(new ViewEmployeeIncomesDataTable(ds.Tables["ViewEmployeeIncomes"]));
                }
                if ((ds.Tables["ViewRealIncome"] != null)) {
                    base.Tables.Add(new ViewRealIncomeDataTable(ds.Tables["ViewRealIncome"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeesDataTable Employees {
            get {
                return this.tableEmployees;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepartmentsDataTable Departments {
            get {
                return this.tableDepartments;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContractTypesDataTable ContractTypes {
            get {
                return this.tableContractTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PositionsDataTable Positions {
            get {
                return this.tablePositions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDeptPositionDataTable EmployeeDeptPosition {
            get {
                return this.tableEmployeeDeptPosition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeKeepingDataTable TimeKeeping {
            get {
                return this.tableTimeKeeping;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Sel_DepartmentTimeKeepingDataTable Sel_DepartmentTimeKeeping {
            get {
                return this.tableSel_DepartmentTimeKeeping;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeptPositionDataTable DeptPosition {
            get {
                return this.tableDeptPosition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Sel_PersonalTimeKeepingDataTable Sel_PersonalTimeKeeping {
            get {
                return this.tableSel_PersonalTimeKeeping;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoefficientTypeDataTable CoefficientType {
            get {
                return this.tableCoefficientType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoefficientDataTable Coefficient {
            get {
                return this.tableCoefficient;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewTimeKeepingDataTable ViewTimeKeeping {
            get {
                return this.tableViewTimeKeeping;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewCoefficientDataTable ViewCoefficient {
            get {
                return this.tableViewCoefficient;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeIncomeDataTable EmployeeIncome {
            get {
                return this.tableEmployeeIncome;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IncomeMonthDataTable IncomeMonth {
            get {
                return this.tableIncomeMonth;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeKeepingTypeDataTable TimeKeepingType {
            get {
                return this.tableTimeKeepingType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewEmployeeDeptPositionDataTable ViewEmployeeDeptPosition {
            get {
                return this.tableViewEmployeeDeptPosition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewUserRolesDataTable ViewUserRoles {
            get {
                return this.tableViewUserRoles;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IncomeTypeDataTable IncomeType {
            get {
                return this.tableIncomeType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewIncomeDataTable ViewIncome {
            get {
                return this.tableViewIncome;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewEmployeeIncomesDataTable ViewEmployeeIncomes {
            get {
                return this.tableViewEmployeeIncomes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewRealIncomeDataTable ViewRealIncome {
            get {
                return this.tableViewRealIncome;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            HRM cln = ((HRM)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Employees"] != null)) {
                    base.Tables.Add(new EmployeesDataTable(ds.Tables["Employees"]));
                }
                if ((ds.Tables["Departments"] != null)) {
                    base.Tables.Add(new DepartmentsDataTable(ds.Tables["Departments"]));
                }
                if ((ds.Tables["ContractTypes"] != null)) {
                    base.Tables.Add(new ContractTypesDataTable(ds.Tables["ContractTypes"]));
                }
                if ((ds.Tables["Positions"] != null)) {
                    base.Tables.Add(new PositionsDataTable(ds.Tables["Positions"]));
                }
                if ((ds.Tables["EmployeeDeptPosition"] != null)) {
                    base.Tables.Add(new EmployeeDeptPositionDataTable(ds.Tables["EmployeeDeptPosition"]));
                }
                if ((ds.Tables["TimeKeeping"] != null)) {
                    base.Tables.Add(new TimeKeepingDataTable(ds.Tables["TimeKeeping"]));
                }
                if ((ds.Tables["Sel_DepartmentTimeKeeping"] != null)) {
                    base.Tables.Add(new Sel_DepartmentTimeKeepingDataTable(ds.Tables["Sel_DepartmentTimeKeeping"]));
                }
                if ((ds.Tables["DeptPosition"] != null)) {
                    base.Tables.Add(new DeptPositionDataTable(ds.Tables["DeptPosition"]));
                }
                if ((ds.Tables["Sel_PersonalTimeKeeping"] != null)) {
                    base.Tables.Add(new Sel_PersonalTimeKeepingDataTable(ds.Tables["Sel_PersonalTimeKeeping"]));
                }
                if ((ds.Tables["CoefficientType"] != null)) {
                    base.Tables.Add(new CoefficientTypeDataTable(ds.Tables["CoefficientType"]));
                }
                if ((ds.Tables["Coefficient"] != null)) {
                    base.Tables.Add(new CoefficientDataTable(ds.Tables["Coefficient"]));
                }
                if ((ds.Tables["ViewTimeKeeping"] != null)) {
                    base.Tables.Add(new ViewTimeKeepingDataTable(ds.Tables["ViewTimeKeeping"]));
                }
                if ((ds.Tables["ViewCoefficient"] != null)) {
                    base.Tables.Add(new ViewCoefficientDataTable(ds.Tables["ViewCoefficient"]));
                }
                if ((ds.Tables["EmployeeIncome"] != null)) {
                    base.Tables.Add(new EmployeeIncomeDataTable(ds.Tables["EmployeeIncome"]));
                }
                if ((ds.Tables["IncomeMonth"] != null)) {
                    base.Tables.Add(new IncomeMonthDataTable(ds.Tables["IncomeMonth"]));
                }
                if ((ds.Tables["TimeKeepingType"] != null)) {
                    base.Tables.Add(new TimeKeepingTypeDataTable(ds.Tables["TimeKeepingType"]));
                }
                if ((ds.Tables["ViewEmployeeDeptPosition"] != null)) {
                    base.Tables.Add(new ViewEmployeeDeptPositionDataTable(ds.Tables["ViewEmployeeDeptPosition"]));
                }
                if ((ds.Tables["ViewUserRoles"] != null)) {
                    base.Tables.Add(new ViewUserRolesDataTable(ds.Tables["ViewUserRoles"]));
                }
                if ((ds.Tables["IncomeType"] != null)) {
                    base.Tables.Add(new IncomeTypeDataTable(ds.Tables["IncomeType"]));
                }
                if ((ds.Tables["ViewIncome"] != null)) {
                    base.Tables.Add(new ViewIncomeDataTable(ds.Tables["ViewIncome"]));
                }
                if ((ds.Tables["ViewEmployeeIncomes"] != null)) {
                    base.Tables.Add(new ViewEmployeeIncomesDataTable(ds.Tables["ViewEmployeeIncomes"]));
                }
                if ((ds.Tables["ViewRealIncome"] != null)) {
                    base.Tables.Add(new ViewRealIncomeDataTable(ds.Tables["ViewRealIncome"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmployees = ((EmployeesDataTable)(base.Tables["Employees"]));
            if ((initTable == true)) {
                if ((this.tableEmployees != null)) {
                    this.tableEmployees.InitVars();
                }
            }
            this.tableDepartments = ((DepartmentsDataTable)(base.Tables["Departments"]));
            if ((initTable == true)) {
                if ((this.tableDepartments != null)) {
                    this.tableDepartments.InitVars();
                }
            }
            this.tableContractTypes = ((ContractTypesDataTable)(base.Tables["ContractTypes"]));
            if ((initTable == true)) {
                if ((this.tableContractTypes != null)) {
                    this.tableContractTypes.InitVars();
                }
            }
            this.tablePositions = ((PositionsDataTable)(base.Tables["Positions"]));
            if ((initTable == true)) {
                if ((this.tablePositions != null)) {
                    this.tablePositions.InitVars();
                }
            }
            this.tableEmployeeDeptPosition = ((EmployeeDeptPositionDataTable)(base.Tables["EmployeeDeptPosition"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeDeptPosition != null)) {
                    this.tableEmployeeDeptPosition.InitVars();
                }
            }
            this.tableTimeKeeping = ((TimeKeepingDataTable)(base.Tables["TimeKeeping"]));
            if ((initTable == true)) {
                if ((this.tableTimeKeeping != null)) {
                    this.tableTimeKeeping.InitVars();
                }
            }
            this.tableSel_DepartmentTimeKeeping = ((Sel_DepartmentTimeKeepingDataTable)(base.Tables["Sel_DepartmentTimeKeeping"]));
            if ((initTable == true)) {
                if ((this.tableSel_DepartmentTimeKeeping != null)) {
                    this.tableSel_DepartmentTimeKeeping.InitVars();
                }
            }
            this.tableDeptPosition = ((DeptPositionDataTable)(base.Tables["DeptPosition"]));
            if ((initTable == true)) {
                if ((this.tableDeptPosition != null)) {
                    this.tableDeptPosition.InitVars();
                }
            }
            this.tableSel_PersonalTimeKeeping = ((Sel_PersonalTimeKeepingDataTable)(base.Tables["Sel_PersonalTimeKeeping"]));
            if ((initTable == true)) {
                if ((this.tableSel_PersonalTimeKeeping != null)) {
                    this.tableSel_PersonalTimeKeeping.InitVars();
                }
            }
            this.tableCoefficientType = ((CoefficientTypeDataTable)(base.Tables["CoefficientType"]));
            if ((initTable == true)) {
                if ((this.tableCoefficientType != null)) {
                    this.tableCoefficientType.InitVars();
                }
            }
            this.tableCoefficient = ((CoefficientDataTable)(base.Tables["Coefficient"]));
            if ((initTable == true)) {
                if ((this.tableCoefficient != null)) {
                    this.tableCoefficient.InitVars();
                }
            }
            this.tableViewTimeKeeping = ((ViewTimeKeepingDataTable)(base.Tables["ViewTimeKeeping"]));
            if ((initTable == true)) {
                if ((this.tableViewTimeKeeping != null)) {
                    this.tableViewTimeKeeping.InitVars();
                }
            }
            this.tableViewCoefficient = ((ViewCoefficientDataTable)(base.Tables["ViewCoefficient"]));
            if ((initTable == true)) {
                if ((this.tableViewCoefficient != null)) {
                    this.tableViewCoefficient.InitVars();
                }
            }
            this.tableEmployeeIncome = ((EmployeeIncomeDataTable)(base.Tables["EmployeeIncome"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeIncome != null)) {
                    this.tableEmployeeIncome.InitVars();
                }
            }
            this.tableIncomeMonth = ((IncomeMonthDataTable)(base.Tables["IncomeMonth"]));
            if ((initTable == true)) {
                if ((this.tableIncomeMonth != null)) {
                    this.tableIncomeMonth.InitVars();
                }
            }
            this.tableTimeKeepingType = ((TimeKeepingTypeDataTable)(base.Tables["TimeKeepingType"]));
            if ((initTable == true)) {
                if ((this.tableTimeKeepingType != null)) {
                    this.tableTimeKeepingType.InitVars();
                }
            }
            this.tableViewEmployeeDeptPosition = ((ViewEmployeeDeptPositionDataTable)(base.Tables["ViewEmployeeDeptPosition"]));
            if ((initTable == true)) {
                if ((this.tableViewEmployeeDeptPosition != null)) {
                    this.tableViewEmployeeDeptPosition.InitVars();
                }
            }
            this.tableViewUserRoles = ((ViewUserRolesDataTable)(base.Tables["ViewUserRoles"]));
            if ((initTable == true)) {
                if ((this.tableViewUserRoles != null)) {
                    this.tableViewUserRoles.InitVars();
                }
            }
            this.tableIncomeType = ((IncomeTypeDataTable)(base.Tables["IncomeType"]));
            if ((initTable == true)) {
                if ((this.tableIncomeType != null)) {
                    this.tableIncomeType.InitVars();
                }
            }
            this.tableViewIncome = ((ViewIncomeDataTable)(base.Tables["ViewIncome"]));
            if ((initTable == true)) {
                if ((this.tableViewIncome != null)) {
                    this.tableViewIncome.InitVars();
                }
            }
            this.tableViewEmployeeIncomes = ((ViewEmployeeIncomesDataTable)(base.Tables["ViewEmployeeIncomes"]));
            if ((initTable == true)) {
                if ((this.tableViewEmployeeIncomes != null)) {
                    this.tableViewEmployeeIncomes.InitVars();
                }
            }
            this.tableViewRealIncome = ((ViewRealIncomeDataTable)(base.Tables["ViewRealIncome"]));
            if ((initTable == true)) {
                if ((this.tableViewRealIncome != null)) {
                    this.tableViewRealIncome.InitVars();
                }
            }
            this.relationFK_Employees_ContractTypes = this.Relations["FK_Employees_ContractTypes"];
            this.relationFK_EmployeeDeptPosition_Departments = this.Relations["FK_EmployeeDeptPosition_Departments"];
            this.relationFK_EmployeeDeptPosition_Employees = this.Relations["FK_EmployeeDeptPosition_Employees"];
            this.relationFK_EmployeeDeptPosition_Positions = this.Relations["FK_EmployeeDeptPosition_Positions"];
            this.relationDepartments_DeptPosition = this.Relations["Departments_DeptPosition"];
            this.relationPositions_DeptPosition = this.Relations["Positions_DeptPosition"];
            this.relationFK_Coefficient_CoefficientType = this.Relations["FK_Coefficient_CoefficientType"];
            this.relationEmployees_Coefficient = this.Relations["Employees_Coefficient"];
            this.relationEmployees_TimeKeeping = this.Relations["Employees_TimeKeeping"];
            this.relationEmployees_IncomeMonth = this.Relations["Employees_IncomeMonth"];
            this.relationTimeKeepingType_TimeKeeping = this.Relations["TimeKeepingType_TimeKeeping"];
            this.relationFK_IncomeMonth_IncomeType = this.Relations["FK_IncomeMonth_IncomeType"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "HRM";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/HRM.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmployees = new EmployeesDataTable();
            base.Tables.Add(this.tableEmployees);
            this.tableDepartments = new DepartmentsDataTable();
            base.Tables.Add(this.tableDepartments);
            this.tableContractTypes = new ContractTypesDataTable();
            base.Tables.Add(this.tableContractTypes);
            this.tablePositions = new PositionsDataTable();
            base.Tables.Add(this.tablePositions);
            this.tableEmployeeDeptPosition = new EmployeeDeptPositionDataTable();
            base.Tables.Add(this.tableEmployeeDeptPosition);
            this.tableTimeKeeping = new TimeKeepingDataTable();
            base.Tables.Add(this.tableTimeKeeping);
            this.tableSel_DepartmentTimeKeeping = new Sel_DepartmentTimeKeepingDataTable();
            base.Tables.Add(this.tableSel_DepartmentTimeKeeping);
            this.tableDeptPosition = new DeptPositionDataTable();
            base.Tables.Add(this.tableDeptPosition);
            this.tableSel_PersonalTimeKeeping = new Sel_PersonalTimeKeepingDataTable();
            base.Tables.Add(this.tableSel_PersonalTimeKeeping);
            this.tableCoefficientType = new CoefficientTypeDataTable();
            base.Tables.Add(this.tableCoefficientType);
            this.tableCoefficient = new CoefficientDataTable();
            base.Tables.Add(this.tableCoefficient);
            this.tableViewTimeKeeping = new ViewTimeKeepingDataTable();
            base.Tables.Add(this.tableViewTimeKeeping);
            this.tableViewCoefficient = new ViewCoefficientDataTable();
            base.Tables.Add(this.tableViewCoefficient);
            this.tableEmployeeIncome = new EmployeeIncomeDataTable();
            base.Tables.Add(this.tableEmployeeIncome);
            this.tableIncomeMonth = new IncomeMonthDataTable();
            base.Tables.Add(this.tableIncomeMonth);
            this.tableTimeKeepingType = new TimeKeepingTypeDataTable();
            base.Tables.Add(this.tableTimeKeepingType);
            this.tableViewEmployeeDeptPosition = new ViewEmployeeDeptPositionDataTable();
            base.Tables.Add(this.tableViewEmployeeDeptPosition);
            this.tableViewUserRoles = new ViewUserRolesDataTable();
            base.Tables.Add(this.tableViewUserRoles);
            this.tableIncomeType = new IncomeTypeDataTable();
            base.Tables.Add(this.tableIncomeType);
            this.tableViewIncome = new ViewIncomeDataTable();
            base.Tables.Add(this.tableViewIncome);
            this.tableViewEmployeeIncomes = new ViewEmployeeIncomesDataTable();
            base.Tables.Add(this.tableViewEmployeeIncomes);
            this.tableViewRealIncome = new ViewRealIncomeDataTable();
            base.Tables.Add(this.tableViewRealIncome);
            this.relationFK_Employees_ContractTypes = new System.Data.DataRelation("FK_Employees_ContractTypes", new System.Data.DataColumn[] {
                        this.tableContractTypes.ContractTypeIdColumn}, new System.Data.DataColumn[] {
                        this.tableEmployees.ContractTypeIdColumn}, false);
            this.Relations.Add(this.relationFK_Employees_ContractTypes);
            this.relationFK_EmployeeDeptPosition_Departments = new System.Data.DataRelation("FK_EmployeeDeptPosition_Departments", new System.Data.DataColumn[] {
                        this.tableDepartments.DepartmentIdColumn}, new System.Data.DataColumn[] {
                        this.tableEmployeeDeptPosition.DepartmentIdColumn}, false);
            this.Relations.Add(this.relationFK_EmployeeDeptPosition_Departments);
            this.relationFK_EmployeeDeptPosition_Employees = new System.Data.DataRelation("FK_EmployeeDeptPosition_Employees", new System.Data.DataColumn[] {
                        this.tableEmployees.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableEmployeeDeptPosition.UserIdColumn}, false);
            this.Relations.Add(this.relationFK_EmployeeDeptPosition_Employees);
            this.relationFK_EmployeeDeptPosition_Positions = new System.Data.DataRelation("FK_EmployeeDeptPosition_Positions", new System.Data.DataColumn[] {
                        this.tablePositions.PositionIdColumn}, new System.Data.DataColumn[] {
                        this.tableEmployeeDeptPosition.PositionIdColumn}, false);
            this.Relations.Add(this.relationFK_EmployeeDeptPosition_Positions);
            this.relationDepartments_DeptPosition = new System.Data.DataRelation("Departments_DeptPosition", new System.Data.DataColumn[] {
                        this.tableDepartments.DepartmentIdColumn}, new System.Data.DataColumn[] {
                        this.tableDeptPosition.DepartmentIdColumn}, false);
            this.Relations.Add(this.relationDepartments_DeptPosition);
            this.relationPositions_DeptPosition = new System.Data.DataRelation("Positions_DeptPosition", new System.Data.DataColumn[] {
                        this.tablePositions.PositionIdColumn}, new System.Data.DataColumn[] {
                        this.tableDeptPosition.PositionIdColumn}, false);
            this.Relations.Add(this.relationPositions_DeptPosition);
            this.relationFK_Coefficient_CoefficientType = new System.Data.DataRelation("FK_Coefficient_CoefficientType", new System.Data.DataColumn[] {
                        this.tableCoefficientType.CoefficientTypeColumn}, new System.Data.DataColumn[] {
                        this.tableCoefficient.CoefficientTypeColumn}, false);
            this.Relations.Add(this.relationFK_Coefficient_CoefficientType);
            this.relationEmployees_Coefficient = new System.Data.DataRelation("Employees_Coefficient", new System.Data.DataColumn[] {
                        this.tableEmployees.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableCoefficient.UserIdColumn}, false);
            this.Relations.Add(this.relationEmployees_Coefficient);
            this.relationEmployees_TimeKeeping = new System.Data.DataRelation("Employees_TimeKeeping", new System.Data.DataColumn[] {
                        this.tableEmployees.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableTimeKeeping.UserIdColumn}, false);
            this.Relations.Add(this.relationEmployees_TimeKeeping);
            this.relationEmployees_IncomeMonth = new System.Data.DataRelation("Employees_IncomeMonth", new System.Data.DataColumn[] {
                        this.tableEmployees.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableIncomeMonth.UserIdColumn}, false);
            this.Relations.Add(this.relationEmployees_IncomeMonth);
            this.relationTimeKeepingType_TimeKeeping = new System.Data.DataRelation("TimeKeepingType_TimeKeeping", new System.Data.DataColumn[] {
                        this.tableTimeKeepingType.TimeKeepingTypeIdColumn}, new System.Data.DataColumn[] {
                        this.tableTimeKeeping.TimeKeepingTypeIdColumn}, false);
            this.Relations.Add(this.relationTimeKeepingType_TimeKeeping);
            this.relationFK_IncomeMonth_IncomeType = new System.Data.DataRelation("FK_IncomeMonth_IncomeType", new System.Data.DataColumn[] {
                        this.tableIncomeType.IncomeTypeIdColumn}, new System.Data.DataColumn[] {
                        this.tableIncomeMonth.IncomeTypeIdColumn}, false);
            this.Relations.Add(this.relationFK_IncomeMonth_IncomeType);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployees() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDepartments() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContractTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePositions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeDeptPosition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTimeKeeping() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSel_DepartmentTimeKeeping() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeptPosition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSel_PersonalTimeKeeping() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoefficientType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoefficient() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewTimeKeeping() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewCoefficient() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeIncome() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIncomeMonth() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTimeKeepingType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewEmployeeDeptPosition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewUserRoles() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIncomeType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewIncome() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewEmployeeIncomes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewRealIncome() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            HRM ds = new HRM();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EmployeesRowChangeEventHandler(object sender, EmployeesRowChangeEvent e);
        
        public delegate void DepartmentsRowChangeEventHandler(object sender, DepartmentsRowChangeEvent e);
        
        public delegate void ContractTypesRowChangeEventHandler(object sender, ContractTypesRowChangeEvent e);
        
        public delegate void PositionsRowChangeEventHandler(object sender, PositionsRowChangeEvent e);
        
        public delegate void EmployeeDeptPositionRowChangeEventHandler(object sender, EmployeeDeptPositionRowChangeEvent e);
        
        public delegate void TimeKeepingRowChangeEventHandler(object sender, TimeKeepingRowChangeEvent e);
        
        public delegate void Sel_DepartmentTimeKeepingRowChangeEventHandler(object sender, Sel_DepartmentTimeKeepingRowChangeEvent e);
        
        public delegate void DeptPositionRowChangeEventHandler(object sender, DeptPositionRowChangeEvent e);
        
        public delegate void Sel_PersonalTimeKeepingRowChangeEventHandler(object sender, Sel_PersonalTimeKeepingRowChangeEvent e);
        
        public delegate void CoefficientTypeRowChangeEventHandler(object sender, CoefficientTypeRowChangeEvent e);
        
        public delegate void CoefficientRowChangeEventHandler(object sender, CoefficientRowChangeEvent e);
        
        public delegate void ViewTimeKeepingRowChangeEventHandler(object sender, ViewTimeKeepingRowChangeEvent e);
        
        public delegate void ViewCoefficientRowChangeEventHandler(object sender, ViewCoefficientRowChangeEvent e);
        
        public delegate void EmployeeIncomeRowChangeEventHandler(object sender, EmployeeIncomeRowChangeEvent e);
        
        public delegate void IncomeMonthRowChangeEventHandler(object sender, IncomeMonthRowChangeEvent e);
        
        public delegate void TimeKeepingTypeRowChangeEventHandler(object sender, TimeKeepingTypeRowChangeEvent e);
        
        public delegate void ViewEmployeeDeptPositionRowChangeEventHandler(object sender, ViewEmployeeDeptPositionRowChangeEvent e);
        
        public delegate void ViewUserRolesRowChangeEventHandler(object sender, ViewUserRolesRowChangeEvent e);
        
        public delegate void IncomeTypeRowChangeEventHandler(object sender, IncomeTypeRowChangeEvent e);
        
        public delegate void ViewIncomeRowChangeEventHandler(object sender, ViewIncomeRowChangeEvent e);
        
        public delegate void ViewEmployeeIncomesRowChangeEventHandler(object sender, ViewEmployeeIncomesRowChangeEvent e);
        
        public delegate void ViewRealIncomeRowChangeEventHandler(object sender, ViewRealIncomeRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnEmployeeCode;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnBirthday;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnJoinDate;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnMarriage;
            
            private System.Data.DataColumn columnHealthInsuranceNo;
            
            private System.Data.DataColumn columnHealthInsuranceAddress;
            
            private System.Data.DataColumn columnSocialInsuranceNo;
            
            private System.Data.DataColumn columnAccountNo;
            
            private System.Data.DataColumn columnAccountName;
            
            private System.Data.DataColumn columnCardNo;
            
            private System.Data.DataColumn columnBankName;
            
            private System.Data.DataColumn columnPaymentDate;
            
            private System.Data.DataColumn columnContractTypeId;
            
            private System.Data.DataColumn columnStandardLeave;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesDataTable() {
                this.TableName = "Employees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BirthdayColumn {
                get {
                    return this.columnBirthday;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JoinDateColumn {
                get {
                    return this.columnJoinDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MarriageColumn {
                get {
                    return this.columnMarriage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HealthInsuranceNoColumn {
                get {
                    return this.columnHealthInsuranceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HealthInsuranceAddressColumn {
                get {
                    return this.columnHealthInsuranceAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SocialInsuranceNoColumn {
                get {
                    return this.columnSocialInsuranceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNoColumn {
                get {
                    return this.columnAccountNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CardNoColumn {
                get {
                    return this.columnCardNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeIdColumn {
                get {
                    return this.columnContractTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StandardLeaveColumn {
                get {
                    return this.columnStandardLeave;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow this[int index] {
                get {
                    return ((EmployeesRow)(this.Rows[index]));
                }
            }
            
            public event EmployeesRowChangeEventHandler EmployeesRowChanging;
            
            public event EmployeesRowChangeEventHandler EmployeesRowChanged;
            
            public event EmployeesRowChangeEventHandler EmployeesRowDeleting;
            
            public event EmployeesRowChangeEventHandler EmployeesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeesRow(EmployeesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow AddEmployeesRow(
                        string UserName, 
                        string EmployeeCode, 
                        string Password, 
                        System.DateTime Birthday, 
                        string FullName, 
                        System.DateTime JoinDate, 
                        int Status, 
                        bool Marriage, 
                        string HealthInsuranceNo, 
                        string HealthInsuranceAddress, 
                        string SocialInsuranceNo, 
                        string AccountNo, 
                        string AccountName, 
                        string CardNo, 
                        string BankName, 
                        string PaymentDate, 
                        ContractTypesRow parentContractTypesRowByFK_Employees_ContractTypes, 
                        int StandardLeave) {
                EmployeesRow rowEmployeesRow = ((EmployeesRow)(this.NewRow()));
                rowEmployeesRow.ItemArray = new object[] {
                        null,
                        UserName,
                        EmployeeCode,
                        Password,
                        Birthday,
                        FullName,
                        JoinDate,
                        Status,
                        Marriage,
                        HealthInsuranceNo,
                        HealthInsuranceAddress,
                        SocialInsuranceNo,
                        AccountNo,
                        AccountName,
                        CardNo,
                        BankName,
                        PaymentDate,
                        parentContractTypesRowByFK_Employees_ContractTypes[0],
                        StandardLeave};
                this.Rows.Add(rowEmployeesRow);
                return rowEmployeesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow FindByUserId(int UserId) {
                return ((EmployeesRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmployeesDataTable cln = ((EmployeesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmployeesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnPassword = base.Columns["Password"];
                this.columnBirthday = base.Columns["Birthday"];
                this.columnFullName = base.Columns["FullName"];
                this.columnJoinDate = base.Columns["JoinDate"];
                this.columnStatus = base.Columns["Status"];
                this.columnMarriage = base.Columns["Marriage"];
                this.columnHealthInsuranceNo = base.Columns["HealthInsuranceNo"];
                this.columnHealthInsuranceAddress = base.Columns["HealthInsuranceAddress"];
                this.columnSocialInsuranceNo = base.Columns["SocialInsuranceNo"];
                this.columnAccountNo = base.Columns["AccountNo"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnCardNo = base.Columns["CardNo"];
                this.columnBankName = base.Columns["BankName"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnContractTypeId = base.Columns["ContractTypeId"];
                this.columnStandardLeave = base.Columns["StandardLeave"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEmployeeCode = new System.Data.DataColumn("EmployeeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnBirthday = new System.Data.DataColumn("Birthday", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthday);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnJoinDate = new System.Data.DataColumn("JoinDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDate);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnMarriage = new System.Data.DataColumn("Marriage", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarriage);
                this.columnHealthInsuranceNo = new System.Data.DataColumn("HealthInsuranceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthInsuranceNo);
                this.columnHealthInsuranceAddress = new System.Data.DataColumn("HealthInsuranceAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthInsuranceAddress);
                this.columnSocialInsuranceNo = new System.Data.DataColumn("SocialInsuranceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSocialInsuranceNo);
                this.columnAccountNo = new System.Data.DataColumn("AccountNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNo);
                this.columnAccountName = new System.Data.DataColumn("AccountName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnCardNo = new System.Data.DataColumn("CardNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCardNo);
                this.columnBankName = new System.Data.DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnPaymentDate = new System.Data.DataColumn("PaymentDate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnContractTypeId = new System.Data.DataColumn("ContractTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeId);
                this.columnStandardLeave = new System.Data.DataColumn("StandardLeave", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardLeave);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserId.Unique = true;
                this.columnUserName.MaxLength = 50;
                this.columnEmployeeCode.MaxLength = 50;
                this.columnPassword.MaxLength = 50;
                this.columnFullName.MaxLength = 100;
                this.columnHealthInsuranceNo.MaxLength = 50;
                this.columnHealthInsuranceAddress.MaxLength = 100;
                this.columnSocialInsuranceNo.MaxLength = 50;
                this.columnAccountName.MaxLength = 50;
                this.columnCardNo.MaxLength = 50;
                this.columnBankName.MaxLength = 50;
                this.columnPaymentDate.MaxLength = 50;
                this.columnContractTypeId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow NewEmployeesRow() {
                return ((EmployeesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmployeesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmployeesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeesRowChanged != null)) {
                    this.EmployeesRowChanged(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeesRowChanging != null)) {
                    this.EmployeesRowChanging(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeesRowDeleted != null)) {
                    this.EmployeesRowDeleted(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeesRowDeleting != null)) {
                    this.EmployeesRowDeleting(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeesRow(EmployeesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DepartmentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDepartmentId;
            
            private System.Data.DataColumn columnDepartmentName;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsDataTable() {
                this.TableName = "Departments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DepartmentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIdColumn {
                get {
                    return this.columnDepartmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow this[int index] {
                get {
                    return ((DepartmentsRow)(this.Rows[index]));
                }
            }
            
            public event DepartmentsRowChangeEventHandler DepartmentsRowChanging;
            
            public event DepartmentsRowChangeEventHandler DepartmentsRowChanged;
            
            public event DepartmentsRowChangeEventHandler DepartmentsRowDeleting;
            
            public event DepartmentsRowChangeEventHandler DepartmentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDepartmentsRow(DepartmentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow AddDepartmentsRow(string DepartmentName, string Description) {
                DepartmentsRow rowDepartmentsRow = ((DepartmentsRow)(this.NewRow()));
                rowDepartmentsRow.ItemArray = new object[] {
                        null,
                        DepartmentName,
                        Description};
                this.Rows.Add(rowDepartmentsRow);
                return rowDepartmentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow FindByDepartmentId(int DepartmentId) {
                return ((DepartmentsRow)(this.Rows.Find(new object[] {
                            DepartmentId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DepartmentsDataTable cln = ((DepartmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DepartmentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDepartmentId = base.Columns["DepartmentId"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDepartmentId = new System.Data.DataColumn("DepartmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentId);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDepartmentId}, true));
                this.columnDepartmentId.AutoIncrement = true;
                this.columnDepartmentId.AllowDBNull = false;
                this.columnDepartmentId.ReadOnly = true;
                this.columnDepartmentId.Unique = true;
                this.columnDepartmentName.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow NewDepartmentsRow() {
                return ((DepartmentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DepartmentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DepartmentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepartmentsRowChanged != null)) {
                    this.DepartmentsRowChanged(this, new DepartmentsRowChangeEvent(((DepartmentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepartmentsRowChanging != null)) {
                    this.DepartmentsRowChanging(this, new DepartmentsRowChangeEvent(((DepartmentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepartmentsRowDeleted != null)) {
                    this.DepartmentsRowDeleted(this, new DepartmentsRowChangeEvent(((DepartmentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepartmentsRowDeleting != null)) {
                    this.DepartmentsRowDeleting(this, new DepartmentsRowChangeEvent(((DepartmentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDepartmentsRow(DepartmentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DepartmentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContractTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContractTypeId;
            
            private System.Data.DataColumn columnContractTypeName;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesDataTable() {
                this.TableName = "ContractTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContractTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContractTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeIdColumn {
                get {
                    return this.columnContractTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeNameColumn {
                get {
                    return this.columnContractTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRow this[int index] {
                get {
                    return ((ContractTypesRow)(this.Rows[index]));
                }
            }
            
            public event ContractTypesRowChangeEventHandler ContractTypesRowChanging;
            
            public event ContractTypesRowChangeEventHandler ContractTypesRowChanged;
            
            public event ContractTypesRowChangeEventHandler ContractTypesRowDeleting;
            
            public event ContractTypesRowChangeEventHandler ContractTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContractTypesRow(ContractTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRow AddContractTypesRow(string ContractTypeName, string Description) {
                ContractTypesRow rowContractTypesRow = ((ContractTypesRow)(this.NewRow()));
                rowContractTypesRow.ItemArray = new object[] {
                        null,
                        ContractTypeName,
                        Description};
                this.Rows.Add(rowContractTypesRow);
                return rowContractTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRow FindByContractTypeId(int ContractTypeId) {
                return ((ContractTypesRow)(this.Rows.Find(new object[] {
                            ContractTypeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ContractTypesDataTable cln = ((ContractTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ContractTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContractTypeId = base.Columns["ContractTypeId"];
                this.columnContractTypeName = base.Columns["ContractTypeName"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContractTypeId = new System.Data.DataColumn("ContractTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeId);
                this.columnContractTypeName = new System.Data.DataColumn("ContractTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnContractTypeId}, true));
                this.columnContractTypeId.AutoIncrement = true;
                this.columnContractTypeId.AllowDBNull = false;
                this.columnContractTypeId.ReadOnly = true;
                this.columnContractTypeId.Unique = true;
                this.columnContractTypeName.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRow NewContractTypesRow() {
                return ((ContractTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ContractTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ContractTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContractTypesRowChanged != null)) {
                    this.ContractTypesRowChanged(this, new ContractTypesRowChangeEvent(((ContractTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContractTypesRowChanging != null)) {
                    this.ContractTypesRowChanging(this, new ContractTypesRowChangeEvent(((ContractTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContractTypesRowDeleted != null)) {
                    this.ContractTypesRowDeleted(this, new ContractTypesRowChangeEvent(((ContractTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContractTypesRowDeleting != null)) {
                    this.ContractTypesRowDeleting(this, new ContractTypesRowChangeEvent(((ContractTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContractTypesRow(ContractTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContractTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PositionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPositionId;
            
            private System.Data.DataColumn columnPositionName;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsDataTable() {
                this.TableName = "Positions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PositionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PositionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionIdColumn {
                get {
                    return this.columnPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionNameColumn {
                get {
                    return this.columnPositionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow this[int index] {
                get {
                    return ((PositionsRow)(this.Rows[index]));
                }
            }
            
            public event PositionsRowChangeEventHandler PositionsRowChanging;
            
            public event PositionsRowChangeEventHandler PositionsRowChanged;
            
            public event PositionsRowChangeEventHandler PositionsRowDeleting;
            
            public event PositionsRowChangeEventHandler PositionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPositionsRow(PositionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow AddPositionsRow(string PositionName, string Description) {
                PositionsRow rowPositionsRow = ((PositionsRow)(this.NewRow()));
                rowPositionsRow.ItemArray = new object[] {
                        null,
                        PositionName,
                        Description};
                this.Rows.Add(rowPositionsRow);
                return rowPositionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow FindByPositionId(int PositionId) {
                return ((PositionsRow)(this.Rows.Find(new object[] {
                            PositionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PositionsDataTable cln = ((PositionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PositionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPositionId = base.Columns["PositionId"];
                this.columnPositionName = base.Columns["PositionName"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPositionId = new System.Data.DataColumn("PositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionId);
                this.columnPositionName = new System.Data.DataColumn("PositionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPositionId}, true));
                this.columnPositionId.AutoIncrement = true;
                this.columnPositionId.AllowDBNull = false;
                this.columnPositionId.ReadOnly = true;
                this.columnPositionId.Unique = true;
                this.columnPositionName.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow NewPositionsRow() {
                return ((PositionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PositionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PositionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PositionsRowChanged != null)) {
                    this.PositionsRowChanged(this, new PositionsRowChangeEvent(((PositionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PositionsRowChanging != null)) {
                    this.PositionsRowChanging(this, new PositionsRowChangeEvent(((PositionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PositionsRowDeleted != null)) {
                    this.PositionsRowDeleted(this, new PositionsRowChangeEvent(((PositionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PositionsRowDeleting != null)) {
                    this.PositionsRowDeleting(this, new PositionsRowChangeEvent(((PositionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePositionsRow(PositionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PositionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDeptPositionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmployeeDeptPositionId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnDepartmentId;
            
            private System.Data.DataColumn columnPositionId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionDataTable() {
                this.TableName = "EmployeeDeptPosition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDeptPositionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDeptPositionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeDeptPositionIdColumn {
                get {
                    return this.columnEmployeeDeptPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIdColumn {
                get {
                    return this.columnDepartmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionIdColumn {
                get {
                    return this.columnPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow this[int index] {
                get {
                    return ((EmployeeDeptPositionRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeDeptPositionRowChangeEventHandler EmployeeDeptPositionRowChanging;
            
            public event EmployeeDeptPositionRowChangeEventHandler EmployeeDeptPositionRowChanged;
            
            public event EmployeeDeptPositionRowChangeEventHandler EmployeeDeptPositionRowDeleting;
            
            public event EmployeeDeptPositionRowChangeEventHandler EmployeeDeptPositionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeDeptPositionRow(EmployeeDeptPositionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow AddEmployeeDeptPositionRow(EmployeesRow parentEmployeesRowByFK_EmployeeDeptPosition_Employees, DepartmentsRow parentDepartmentsRowByFK_EmployeeDeptPosition_Departments, PositionsRow parentPositionsRowByFK_EmployeeDeptPosition_Positions) {
                EmployeeDeptPositionRow rowEmployeeDeptPositionRow = ((EmployeeDeptPositionRow)(this.NewRow()));
                rowEmployeeDeptPositionRow.ItemArray = new object[] {
                        null,
                        parentEmployeesRowByFK_EmployeeDeptPosition_Employees[0],
                        parentDepartmentsRowByFK_EmployeeDeptPosition_Departments[0],
                        parentPositionsRowByFK_EmployeeDeptPosition_Positions[0]};
                this.Rows.Add(rowEmployeeDeptPositionRow);
                return rowEmployeeDeptPositionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow FindByEmployeeDeptPositionId(int EmployeeDeptPositionId) {
                return ((EmployeeDeptPositionRow)(this.Rows.Find(new object[] {
                            EmployeeDeptPositionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmployeeDeptPositionDataTable cln = ((EmployeeDeptPositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmployeeDeptPositionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeDeptPositionId = base.Columns["EmployeeDeptPositionId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnDepartmentId = base.Columns["DepartmentId"];
                this.columnPositionId = base.Columns["PositionId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeDeptPositionId = new System.Data.DataColumn("EmployeeDeptPositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeDeptPositionId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnDepartmentId = new System.Data.DataColumn("DepartmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentId);
                this.columnPositionId = new System.Data.DataColumn("PositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEmployeeDeptPositionId}, true));
                this.columnEmployeeDeptPositionId.AutoIncrement = true;
                this.columnEmployeeDeptPositionId.AllowDBNull = false;
                this.columnEmployeeDeptPositionId.ReadOnly = true;
                this.columnEmployeeDeptPositionId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow NewEmployeeDeptPositionRow() {
                return ((EmployeeDeptPositionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmployeeDeptPositionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmployeeDeptPositionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeDeptPositionRowChanged != null)) {
                    this.EmployeeDeptPositionRowChanged(this, new EmployeeDeptPositionRowChangeEvent(((EmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeDeptPositionRowChanging != null)) {
                    this.EmployeeDeptPositionRowChanging(this, new EmployeeDeptPositionRowChangeEvent(((EmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeDeptPositionRowDeleted != null)) {
                    this.EmployeeDeptPositionRowDeleted(this, new EmployeeDeptPositionRowChangeEvent(((EmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeDeptPositionRowDeleting != null)) {
                    this.EmployeeDeptPositionRowDeleting(this, new EmployeeDeptPositionRowChangeEvent(((EmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeDeptPositionRow(EmployeeDeptPositionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDeptPositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TimeKeepingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeKeepingId;
            
            private System.Data.DataColumn columnTimeKeepingTypeId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnTimeKeepingDate;
            
            private System.Data.DataColumn columnLock;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingDataTable() {
                this.TableName = "TimeKeeping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimeKeepingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TimeKeepingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingIdColumn {
                get {
                    return this.columnTimeKeepingId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingTypeIdColumn {
                get {
                    return this.columnTimeKeepingTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingDateColumn {
                get {
                    return this.columnTimeKeepingDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LockColumn {
                get {
                    return this.columnLock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow this[int index] {
                get {
                    return ((TimeKeepingRow)(this.Rows[index]));
                }
            }
            
            public event TimeKeepingRowChangeEventHandler TimeKeepingRowChanging;
            
            public event TimeKeepingRowChangeEventHandler TimeKeepingRowChanged;
            
            public event TimeKeepingRowChangeEventHandler TimeKeepingRowDeleting;
            
            public event TimeKeepingRowChangeEventHandler TimeKeepingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTimeKeepingRow(TimeKeepingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow AddTimeKeepingRow(TimeKeepingTypeRow parentTimeKeepingTypeRowByTimeKeepingType_TimeKeeping, EmployeesRow parentEmployeesRowByEmployees_TimeKeeping, int Value, System.DateTime TimeKeepingDate, bool Lock) {
                TimeKeepingRow rowTimeKeepingRow = ((TimeKeepingRow)(this.NewRow()));
                rowTimeKeepingRow.ItemArray = new object[] {
                        null,
                        parentTimeKeepingTypeRowByTimeKeepingType_TimeKeeping[0],
                        parentEmployeesRowByEmployees_TimeKeeping[0],
                        Value,
                        TimeKeepingDate,
                        Lock};
                this.Rows.Add(rowTimeKeepingRow);
                return rowTimeKeepingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow FindByTimeKeepingId(long TimeKeepingId) {
                return ((TimeKeepingRow)(this.Rows.Find(new object[] {
                            TimeKeepingId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TimeKeepingDataTable cln = ((TimeKeepingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TimeKeepingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeKeepingId = base.Columns["TimeKeepingId"];
                this.columnTimeKeepingTypeId = base.Columns["TimeKeepingTypeId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnValue = base.Columns["Value"];
                this.columnTimeKeepingDate = base.Columns["TimeKeepingDate"];
                this.columnLock = base.Columns["Lock"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeKeepingId = new System.Data.DataColumn("TimeKeepingId", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingId);
                this.columnTimeKeepingTypeId = new System.Data.DataColumn("TimeKeepingTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingTypeId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnValue = new System.Data.DataColumn("Value", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnTimeKeepingDate = new System.Data.DataColumn("TimeKeepingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingDate);
                this.columnLock = new System.Data.DataColumn("Lock", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLock);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTimeKeepingId}, true));
                this.columnTimeKeepingId.AutoIncrement = true;
                this.columnTimeKeepingId.AllowDBNull = false;
                this.columnTimeKeepingId.ReadOnly = true;
                this.columnTimeKeepingId.Unique = true;
                this.columnTimeKeepingTypeId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow NewTimeKeepingRow() {
                return ((TimeKeepingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TimeKeepingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TimeKeepingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeKeepingRowChanged != null)) {
                    this.TimeKeepingRowChanged(this, new TimeKeepingRowChangeEvent(((TimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeKeepingRowChanging != null)) {
                    this.TimeKeepingRowChanging(this, new TimeKeepingRowChangeEvent(((TimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeKeepingRowDeleted != null)) {
                    this.TimeKeepingRowDeleted(this, new TimeKeepingRowChangeEvent(((TimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeKeepingRowDeleting != null)) {
                    this.TimeKeepingRowDeleting(this, new TimeKeepingRowChangeEvent(((TimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTimeKeepingRow(TimeKeepingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TimeKeepingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Sel_DepartmentTimeKeepingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnPositionName;
            
            private System.Data.DataColumn columnX;
            
            private System.Data.DataColumn columnO;
            
            private System.Data.DataColumn columnTS;
            
            private System.Data.DataColumn columnTNLD;
            
            private System.Data.DataColumn columnF;
            
            private System.Data.DataColumn columnFDB;
            
            private System.Data.DataColumn columnHO;
            
            private System.Data.DataColumn columnK;
            
            private System.Data.DataColumn columnTBN;
            
            private System.Data.DataColumn columnTBD;
            
            private System.Data.DataColumn columnLD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingDataTable() {
                this.TableName = "Sel_DepartmentTimeKeeping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Sel_DepartmentTimeKeepingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Sel_DepartmentTimeKeepingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionNameColumn {
                get {
                    return this.columnPositionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OColumn {
                get {
                    return this.columnO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TSColumn {
                get {
                    return this.columnTS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TNLDColumn {
                get {
                    return this.columnTNLD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FColumn {
                get {
                    return this.columnF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FDBColumn {
                get {
                    return this.columnFDB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HOColumn {
                get {
                    return this.columnHO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KColumn {
                get {
                    return this.columnK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TBNColumn {
                get {
                    return this.columnTBN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TBDColumn {
                get {
                    return this.columnTBD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LDColumn {
                get {
                    return this.columnLD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingRow this[int index] {
                get {
                    return ((Sel_DepartmentTimeKeepingRow)(this.Rows[index]));
                }
            }
            
            public event Sel_DepartmentTimeKeepingRowChangeEventHandler Sel_DepartmentTimeKeepingRowChanging;
            
            public event Sel_DepartmentTimeKeepingRowChangeEventHandler Sel_DepartmentTimeKeepingRowChanged;
            
            public event Sel_DepartmentTimeKeepingRowChangeEventHandler Sel_DepartmentTimeKeepingRowDeleting;
            
            public event Sel_DepartmentTimeKeepingRowChangeEventHandler Sel_DepartmentTimeKeepingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSel_DepartmentTimeKeepingRow(Sel_DepartmentTimeKeepingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingRow AddSel_DepartmentTimeKeepingRow(string FullName, string PositionName, int X, int O, int TS, int TNLD, int F, int FDB, int HO, int K, int TBN, int TBD, int LD) {
                Sel_DepartmentTimeKeepingRow rowSel_DepartmentTimeKeepingRow = ((Sel_DepartmentTimeKeepingRow)(this.NewRow()));
                rowSel_DepartmentTimeKeepingRow.ItemArray = new object[] {
                        null,
                        FullName,
                        PositionName,
                        X,
                        O,
                        TS,
                        TNLD,
                        F,
                        FDB,
                        HO,
                        K,
                        TBN,
                        TBD,
                        LD};
                this.Rows.Add(rowSel_DepartmentTimeKeepingRow);
                return rowSel_DepartmentTimeKeepingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingRow FindByUserId(int UserId) {
                return ((Sel_DepartmentTimeKeepingRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Sel_DepartmentTimeKeepingDataTable cln = ((Sel_DepartmentTimeKeepingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Sel_DepartmentTimeKeepingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnFullName = base.Columns["FullName"];
                this.columnPositionName = base.Columns["PositionName"];
                this.columnX = base.Columns["X"];
                this.columnO = base.Columns["O"];
                this.columnTS = base.Columns["TS"];
                this.columnTNLD = base.Columns["TNLD"];
                this.columnF = base.Columns["F"];
                this.columnFDB = base.Columns["FDB"];
                this.columnHO = base.Columns["HO"];
                this.columnK = base.Columns["K"];
                this.columnTBN = base.Columns["TBN"];
                this.columnTBD = base.Columns["TBD"];
                this.columnLD = base.Columns["LD"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnPositionName = new System.Data.DataColumn("PositionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionName);
                this.columnX = new System.Data.DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnX);
                this.columnO = new System.Data.DataColumn("O", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnO);
                this.columnTS = new System.Data.DataColumn("TS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTS);
                this.columnTNLD = new System.Data.DataColumn("TNLD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTNLD);
                this.columnF = new System.Data.DataColumn("F", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnF);
                this.columnFDB = new System.Data.DataColumn("FDB", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFDB);
                this.columnHO = new System.Data.DataColumn("HO", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHO);
                this.columnK = new System.Data.DataColumn("K", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnK);
                this.columnTBN = new System.Data.DataColumn("TBN", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTBN);
                this.columnTBD = new System.Data.DataColumn("TBD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTBD);
                this.columnLD = new System.Data.DataColumn("LD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLD);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserId.Unique = true;
                this.columnFullName.MaxLength = 100;
                this.columnPositionName.MaxLength = 50;
                this.columnX.ReadOnly = true;
                this.columnO.ReadOnly = true;
                this.columnTS.ReadOnly = true;
                this.columnTNLD.ReadOnly = true;
                this.columnF.ReadOnly = true;
                this.columnFDB.ReadOnly = true;
                this.columnHO.ReadOnly = true;
                this.columnK.ReadOnly = true;
                this.columnTBN.ReadOnly = true;
                this.columnTBD.ReadOnly = true;
                this.columnLD.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingRow NewSel_DepartmentTimeKeepingRow() {
                return ((Sel_DepartmentTimeKeepingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Sel_DepartmentTimeKeepingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Sel_DepartmentTimeKeepingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Sel_DepartmentTimeKeepingRowChanged != null)) {
                    this.Sel_DepartmentTimeKeepingRowChanged(this, new Sel_DepartmentTimeKeepingRowChangeEvent(((Sel_DepartmentTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Sel_DepartmentTimeKeepingRowChanging != null)) {
                    this.Sel_DepartmentTimeKeepingRowChanging(this, new Sel_DepartmentTimeKeepingRowChangeEvent(((Sel_DepartmentTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Sel_DepartmentTimeKeepingRowDeleted != null)) {
                    this.Sel_DepartmentTimeKeepingRowDeleted(this, new Sel_DepartmentTimeKeepingRowChangeEvent(((Sel_DepartmentTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Sel_DepartmentTimeKeepingRowDeleting != null)) {
                    this.Sel_DepartmentTimeKeepingRowDeleting(this, new Sel_DepartmentTimeKeepingRowChangeEvent(((Sel_DepartmentTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSel_DepartmentTimeKeepingRow(Sel_DepartmentTimeKeepingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Sel_DepartmentTimeKeepingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeptPositionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDeptPositionId;
            
            private System.Data.DataColumn columnDepartmentId;
            
            private System.Data.DataColumn columnPositionId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionDataTable() {
                this.TableName = "DeptPosition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeptPositionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeptPositionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeptPositionIdColumn {
                get {
                    return this.columnDeptPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIdColumn {
                get {
                    return this.columnDepartmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionIdColumn {
                get {
                    return this.columnPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow this[int index] {
                get {
                    return ((DeptPositionRow)(this.Rows[index]));
                }
            }
            
            public event DeptPositionRowChangeEventHandler DeptPositionRowChanging;
            
            public event DeptPositionRowChangeEventHandler DeptPositionRowChanged;
            
            public event DeptPositionRowChangeEventHandler DeptPositionRowDeleting;
            
            public event DeptPositionRowChangeEventHandler DeptPositionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeptPositionRow(DeptPositionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow AddDeptPositionRow(DepartmentsRow parentDepartmentsRowByDepartments_DeptPosition, PositionsRow parentPositionsRowByPositions_DeptPosition) {
                DeptPositionRow rowDeptPositionRow = ((DeptPositionRow)(this.NewRow()));
                rowDeptPositionRow.ItemArray = new object[] {
                        null,
                        parentDepartmentsRowByDepartments_DeptPosition[0],
                        parentPositionsRowByPositions_DeptPosition[0]};
                this.Rows.Add(rowDeptPositionRow);
                return rowDeptPositionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow FindByDeptPositionId(int DeptPositionId) {
                return ((DeptPositionRow)(this.Rows.Find(new object[] {
                            DeptPositionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DeptPositionDataTable cln = ((DeptPositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DeptPositionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeptPositionId = base.Columns["DeptPositionId"];
                this.columnDepartmentId = base.Columns["DepartmentId"];
                this.columnPositionId = base.Columns["PositionId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeptPositionId = new System.Data.DataColumn("DeptPositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeptPositionId);
                this.columnDepartmentId = new System.Data.DataColumn("DepartmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentId);
                this.columnPositionId = new System.Data.DataColumn("PositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDeptPositionId}, true));
                this.columnDeptPositionId.AutoIncrement = true;
                this.columnDeptPositionId.AllowDBNull = false;
                this.columnDeptPositionId.ReadOnly = true;
                this.columnDeptPositionId.Unique = true;
                this.columnDepartmentId.AllowDBNull = false;
                this.columnPositionId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow NewDeptPositionRow() {
                return ((DeptPositionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DeptPositionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DeptPositionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeptPositionRowChanged != null)) {
                    this.DeptPositionRowChanged(this, new DeptPositionRowChangeEvent(((DeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeptPositionRowChanging != null)) {
                    this.DeptPositionRowChanging(this, new DeptPositionRowChangeEvent(((DeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeptPositionRowDeleted != null)) {
                    this.DeptPositionRowDeleted(this, new DeptPositionRowChangeEvent(((DeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeptPositionRowDeleting != null)) {
                    this.DeptPositionRowDeleting(this, new DeptPositionRowChangeEvent(((DeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeptPositionRow(DeptPositionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeptPositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Sel_PersonalTimeKeepingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeKeepingId;
            
            private System.Data.DataColumn columnWorkdayTypeId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnTimeKeepingDate;
            
            private System.Data.DataColumn columnLock;
            
            private System.Data.DataColumn columnWorkdayCode;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnFullName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_PersonalTimeKeepingDataTable() {
                this.TableName = "Sel_PersonalTimeKeeping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Sel_PersonalTimeKeepingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Sel_PersonalTimeKeepingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingIdColumn {
                get {
                    return this.columnTimeKeepingId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkdayTypeIdColumn {
                get {
                    return this.columnWorkdayTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingDateColumn {
                get {
                    return this.columnTimeKeepingDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LockColumn {
                get {
                    return this.columnLock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WorkdayCodeColumn {
                get {
                    return this.columnWorkdayCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_PersonalTimeKeepingRow this[int index] {
                get {
                    return ((Sel_PersonalTimeKeepingRow)(this.Rows[index]));
                }
            }
            
            public event Sel_PersonalTimeKeepingRowChangeEventHandler Sel_PersonalTimeKeepingRowChanging;
            
            public event Sel_PersonalTimeKeepingRowChangeEventHandler Sel_PersonalTimeKeepingRowChanged;
            
            public event Sel_PersonalTimeKeepingRowChangeEventHandler Sel_PersonalTimeKeepingRowDeleting;
            
            public event Sel_PersonalTimeKeepingRowChangeEventHandler Sel_PersonalTimeKeepingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSel_PersonalTimeKeepingRow(Sel_PersonalTimeKeepingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_PersonalTimeKeepingRow AddSel_PersonalTimeKeepingRow(int WorkdayTypeId, int UserId, int Value, System.DateTime TimeKeepingDate, bool Lock, string WorkdayCode, string Description, string FullName) {
                Sel_PersonalTimeKeepingRow rowSel_PersonalTimeKeepingRow = ((Sel_PersonalTimeKeepingRow)(this.NewRow()));
                rowSel_PersonalTimeKeepingRow.ItemArray = new object[] {
                        null,
                        WorkdayTypeId,
                        UserId,
                        Value,
                        TimeKeepingDate,
                        Lock,
                        WorkdayCode,
                        Description,
                        FullName};
                this.Rows.Add(rowSel_PersonalTimeKeepingRow);
                return rowSel_PersonalTimeKeepingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Sel_PersonalTimeKeepingDataTable cln = ((Sel_PersonalTimeKeepingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Sel_PersonalTimeKeepingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeKeepingId = base.Columns["TimeKeepingId"];
                this.columnWorkdayTypeId = base.Columns["WorkdayTypeId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnValue = base.Columns["Value"];
                this.columnTimeKeepingDate = base.Columns["TimeKeepingDate"];
                this.columnLock = base.Columns["Lock"];
                this.columnWorkdayCode = base.Columns["WorkdayCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnFullName = base.Columns["FullName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeKeepingId = new System.Data.DataColumn("TimeKeepingId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingId);
                this.columnWorkdayTypeId = new System.Data.DataColumn("WorkdayTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkdayTypeId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnValue = new System.Data.DataColumn("Value", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnTimeKeepingDate = new System.Data.DataColumn("TimeKeepingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingDate);
                this.columnLock = new System.Data.DataColumn("Lock", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLock);
                this.columnWorkdayCode = new System.Data.DataColumn("WorkdayCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkdayCode);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnTimeKeepingId.AutoIncrement = true;
                this.columnTimeKeepingId.ReadOnly = true;
                this.columnWorkdayCode.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
                this.columnFullName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_PersonalTimeKeepingRow NewSel_PersonalTimeKeepingRow() {
                return ((Sel_PersonalTimeKeepingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Sel_PersonalTimeKeepingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Sel_PersonalTimeKeepingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Sel_PersonalTimeKeepingRowChanged != null)) {
                    this.Sel_PersonalTimeKeepingRowChanged(this, new Sel_PersonalTimeKeepingRowChangeEvent(((Sel_PersonalTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Sel_PersonalTimeKeepingRowChanging != null)) {
                    this.Sel_PersonalTimeKeepingRowChanging(this, new Sel_PersonalTimeKeepingRowChangeEvent(((Sel_PersonalTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Sel_PersonalTimeKeepingRowDeleted != null)) {
                    this.Sel_PersonalTimeKeepingRowDeleted(this, new Sel_PersonalTimeKeepingRowChangeEvent(((Sel_PersonalTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Sel_PersonalTimeKeepingRowDeleting != null)) {
                    this.Sel_PersonalTimeKeepingRowDeleting(this, new Sel_PersonalTimeKeepingRowChangeEvent(((Sel_PersonalTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSel_PersonalTimeKeepingRow(Sel_PersonalTimeKeepingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Sel_PersonalTimeKeepingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoefficientTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCoefficientType;
            
            private System.Data.DataColumn columnCoefficientName;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeDataTable() {
                this.TableName = "CoefficientType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoefficientTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoefficientTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientTypeColumn {
                get {
                    return this.columnCoefficientType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientNameColumn {
                get {
                    return this.columnCoefficientName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRow this[int index] {
                get {
                    return ((CoefficientTypeRow)(this.Rows[index]));
                }
            }
            
            public event CoefficientTypeRowChangeEventHandler CoefficientTypeRowChanging;
            
            public event CoefficientTypeRowChangeEventHandler CoefficientTypeRowChanged;
            
            public event CoefficientTypeRowChangeEventHandler CoefficientTypeRowDeleting;
            
            public event CoefficientTypeRowChangeEventHandler CoefficientTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoefficientTypeRow(CoefficientTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRow AddCoefficientTypeRow(string CoefficientName, string Description) {
                CoefficientTypeRow rowCoefficientTypeRow = ((CoefficientTypeRow)(this.NewRow()));
                rowCoefficientTypeRow.ItemArray = new object[] {
                        null,
                        CoefficientName,
                        Description};
                this.Rows.Add(rowCoefficientTypeRow);
                return rowCoefficientTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRow FindByCoefficientType(int CoefficientType) {
                return ((CoefficientTypeRow)(this.Rows.Find(new object[] {
                            CoefficientType})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CoefficientTypeDataTable cln = ((CoefficientTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CoefficientTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCoefficientType = base.Columns["CoefficientType"];
                this.columnCoefficientName = base.Columns["CoefficientName"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCoefficientType = new System.Data.DataColumn("CoefficientType", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientType);
                this.columnCoefficientName = new System.Data.DataColumn("CoefficientName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCoefficientType}, true));
                this.columnCoefficientType.AutoIncrement = true;
                this.columnCoefficientType.AllowDBNull = false;
                this.columnCoefficientType.ReadOnly = true;
                this.columnCoefficientType.Unique = true;
                this.columnCoefficientName.MaxLength = 50;
                this.columnDescription.MaxLength = 1000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRow NewCoefficientTypeRow() {
                return ((CoefficientTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CoefficientTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CoefficientTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoefficientTypeRowChanged != null)) {
                    this.CoefficientTypeRowChanged(this, new CoefficientTypeRowChangeEvent(((CoefficientTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoefficientTypeRowChanging != null)) {
                    this.CoefficientTypeRowChanging(this, new CoefficientTypeRowChangeEvent(((CoefficientTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoefficientTypeRowDeleted != null)) {
                    this.CoefficientTypeRowDeleted(this, new CoefficientTypeRowChangeEvent(((CoefficientTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoefficientTypeRowDeleting != null)) {
                    this.CoefficientTypeRowDeleting(this, new CoefficientTypeRowChangeEvent(((CoefficientTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoefficientTypeRow(CoefficientTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoefficientTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoefficientDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCoefficientId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnCoefficientType;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientDataTable() {
                this.TableName = "Coefficient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoefficientDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoefficientDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientIdColumn {
                get {
                    return this.columnCoefficientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientTypeColumn {
                get {
                    return this.columnCoefficientType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow this[int index] {
                get {
                    return ((CoefficientRow)(this.Rows[index]));
                }
            }
            
            public event CoefficientRowChangeEventHandler CoefficientRowChanging;
            
            public event CoefficientRowChangeEventHandler CoefficientRowChanged;
            
            public event CoefficientRowChangeEventHandler CoefficientRowDeleting;
            
            public event CoefficientRowChangeEventHandler CoefficientRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoefficientRow(CoefficientRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow AddCoefficientRow(EmployeesRow parentEmployeesRowByEmployees_Coefficient, CoefficientTypeRow parentCoefficientTypeRowByFK_Coefficient_CoefficientType, double Value, System.DateTime Date) {
                CoefficientRow rowCoefficientRow = ((CoefficientRow)(this.NewRow()));
                rowCoefficientRow.ItemArray = new object[] {
                        null,
                        parentEmployeesRowByEmployees_Coefficient[0],
                        parentCoefficientTypeRowByFK_Coefficient_CoefficientType[0],
                        Value,
                        Date};
                this.Rows.Add(rowCoefficientRow);
                return rowCoefficientRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow FindByCoefficientId(long CoefficientId) {
                return ((CoefficientRow)(this.Rows.Find(new object[] {
                            CoefficientId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CoefficientDataTable cln = ((CoefficientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CoefficientDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCoefficientId = base.Columns["CoefficientId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnCoefficientType = base.Columns["CoefficientType"];
                this.columnValue = base.Columns["Value"];
                this.columnDate = base.Columns["Date"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCoefficientId = new System.Data.DataColumn("CoefficientId", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnCoefficientType = new System.Data.DataColumn("CoefficientType", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientType);
                this.columnValue = new System.Data.DataColumn("Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCoefficientId}, true));
                this.columnCoefficientId.AutoIncrement = true;
                this.columnCoefficientId.AllowDBNull = false;
                this.columnCoefficientId.ReadOnly = true;
                this.columnCoefficientId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow NewCoefficientRow() {
                return ((CoefficientRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CoefficientRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CoefficientRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoefficientRowChanged != null)) {
                    this.CoefficientRowChanged(this, new CoefficientRowChangeEvent(((CoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoefficientRowChanging != null)) {
                    this.CoefficientRowChanging(this, new CoefficientRowChangeEvent(((CoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoefficientRowDeleted != null)) {
                    this.CoefficientRowDeleted(this, new CoefficientRowChangeEvent(((CoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoefficientRowDeleting != null)) {
                    this.CoefficientRowDeleting(this, new CoefficientRowChangeEvent(((CoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoefficientRow(CoefficientRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoefficientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewTimeKeepingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeKeepingTypeId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnTimeKeepingDate;
            
            private System.Data.DataColumn columnLock;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnTimeKeepingId;
            
            private System.Data.DataColumn columnTimeKeepingCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTimeKeepingDataTable() {
                this.TableName = "ViewTimeKeeping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewTimeKeepingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewTimeKeepingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingTypeIdColumn {
                get {
                    return this.columnTimeKeepingTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingDateColumn {
                get {
                    return this.columnTimeKeepingDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LockColumn {
                get {
                    return this.columnLock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingIdColumn {
                get {
                    return this.columnTimeKeepingId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingCodeColumn {
                get {
                    return this.columnTimeKeepingCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTimeKeepingRow this[int index] {
                get {
                    return ((ViewTimeKeepingRow)(this.Rows[index]));
                }
            }
            
            public event ViewTimeKeepingRowChangeEventHandler ViewTimeKeepingRowChanging;
            
            public event ViewTimeKeepingRowChangeEventHandler ViewTimeKeepingRowChanged;
            
            public event ViewTimeKeepingRowChangeEventHandler ViewTimeKeepingRowDeleting;
            
            public event ViewTimeKeepingRowChangeEventHandler ViewTimeKeepingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewTimeKeepingRow(ViewTimeKeepingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTimeKeepingRow AddViewTimeKeepingRow(int TimeKeepingTypeId, int UserId, int Value, string Description, System.DateTime TimeKeepingDate, bool Lock, bool Type, string TimeKeepingCode) {
                ViewTimeKeepingRow rowViewTimeKeepingRow = ((ViewTimeKeepingRow)(this.NewRow()));
                rowViewTimeKeepingRow.ItemArray = new object[] {
                        TimeKeepingTypeId,
                        UserId,
                        Value,
                        Description,
                        TimeKeepingDate,
                        Lock,
                        Type,
                        null,
                        TimeKeepingCode};
                this.Rows.Add(rowViewTimeKeepingRow);
                return rowViewTimeKeepingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewTimeKeepingDataTable cln = ((ViewTimeKeepingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewTimeKeepingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeKeepingTypeId = base.Columns["TimeKeepingTypeId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnValue = base.Columns["Value"];
                this.columnDescription = base.Columns["Description"];
                this.columnTimeKeepingDate = base.Columns["TimeKeepingDate"];
                this.columnLock = base.Columns["Lock"];
                this.columnType = base.Columns["Type"];
                this.columnTimeKeepingId = base.Columns["TimeKeepingId"];
                this.columnTimeKeepingCode = base.Columns["TimeKeepingCode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeKeepingTypeId = new System.Data.DataColumn("TimeKeepingTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingTypeId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnValue = new System.Data.DataColumn("Value", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnTimeKeepingDate = new System.Data.DataColumn("TimeKeepingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingDate);
                this.columnLock = new System.Data.DataColumn("Lock", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLock);
                this.columnType = new System.Data.DataColumn("Type", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnTimeKeepingId = new System.Data.DataColumn("TimeKeepingId", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingId);
                this.columnTimeKeepingCode = new System.Data.DataColumn("TimeKeepingCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingCode);
                this.columnTimeKeepingTypeId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnDescription.MaxLength = 1000;
                this.columnTimeKeepingId.AutoIncrement = true;
                this.columnTimeKeepingId.AllowDBNull = false;
                this.columnTimeKeepingId.ReadOnly = true;
                this.columnTimeKeepingCode.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTimeKeepingRow NewViewTimeKeepingRow() {
                return ((ViewTimeKeepingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewTimeKeepingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewTimeKeepingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewTimeKeepingRowChanged != null)) {
                    this.ViewTimeKeepingRowChanged(this, new ViewTimeKeepingRowChangeEvent(((ViewTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewTimeKeepingRowChanging != null)) {
                    this.ViewTimeKeepingRowChanging(this, new ViewTimeKeepingRowChangeEvent(((ViewTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewTimeKeepingRowDeleted != null)) {
                    this.ViewTimeKeepingRowDeleted(this, new ViewTimeKeepingRowChangeEvent(((ViewTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewTimeKeepingRowDeleting != null)) {
                    this.ViewTimeKeepingRowDeleting(this, new ViewTimeKeepingRowChangeEvent(((ViewTimeKeepingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewTimeKeepingRow(ViewTimeKeepingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewTimeKeepingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewCoefficientDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCoefficientId;
            
            private System.Data.DataColumn columnCoefficientType;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnCoefficientName;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientDataTable() {
                this.TableName = "ViewCoefficient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewCoefficientDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewCoefficientDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientIdColumn {
                get {
                    return this.columnCoefficientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientTypeColumn {
                get {
                    return this.columnCoefficientType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CoefficientNameColumn {
                get {
                    return this.columnCoefficientName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientRow this[int index] {
                get {
                    return ((ViewCoefficientRow)(this.Rows[index]));
                }
            }
            
            public event ViewCoefficientRowChangeEventHandler ViewCoefficientRowChanging;
            
            public event ViewCoefficientRowChangeEventHandler ViewCoefficientRowChanged;
            
            public event ViewCoefficientRowChangeEventHandler ViewCoefficientRowDeleting;
            
            public event ViewCoefficientRowChangeEventHandler ViewCoefficientRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewCoefficientRow(ViewCoefficientRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientRow AddViewCoefficientRow(int CoefficientType, int UserId, string CoefficientName, double Value, string Description, System.DateTime Date) {
                ViewCoefficientRow rowViewCoefficientRow = ((ViewCoefficientRow)(this.NewRow()));
                rowViewCoefficientRow.ItemArray = new object[] {
                        null,
                        CoefficientType,
                        UserId,
                        CoefficientName,
                        Value,
                        Description,
                        Date};
                this.Rows.Add(rowViewCoefficientRow);
                return rowViewCoefficientRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientRow FindByCoefficientId(int CoefficientId) {
                return ((ViewCoefficientRow)(this.Rows.Find(new object[] {
                            CoefficientId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewCoefficientDataTable cln = ((ViewCoefficientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewCoefficientDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCoefficientId = base.Columns["CoefficientId"];
                this.columnCoefficientType = base.Columns["CoefficientType"];
                this.columnUserId = base.Columns["UserId"];
                this.columnCoefficientName = base.Columns["CoefficientName"];
                this.columnValue = base.Columns["Value"];
                this.columnDescription = base.Columns["Description"];
                this.columnDate = base.Columns["Date"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCoefficientId = new System.Data.DataColumn("CoefficientId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientId);
                this.columnCoefficientType = new System.Data.DataColumn("CoefficientType", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientType);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnCoefficientName = new System.Data.DataColumn("CoefficientName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoefficientName);
                this.columnValue = new System.Data.DataColumn("Value", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCoefficientId}, true));
                this.columnCoefficientId.AutoIncrement = true;
                this.columnCoefficientId.AllowDBNull = false;
                this.columnCoefficientId.ReadOnly = true;
                this.columnCoefficientId.Unique = true;
                this.columnCoefficientName.MaxLength = 50;
                this.columnDescription.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientRow NewViewCoefficientRow() {
                return ((ViewCoefficientRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewCoefficientRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewCoefficientRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewCoefficientRowChanged != null)) {
                    this.ViewCoefficientRowChanged(this, new ViewCoefficientRowChangeEvent(((ViewCoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewCoefficientRowChanging != null)) {
                    this.ViewCoefficientRowChanging(this, new ViewCoefficientRowChangeEvent(((ViewCoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewCoefficientRowDeleted != null)) {
                    this.ViewCoefficientRowDeleted(this, new ViewCoefficientRowChangeEvent(((ViewCoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewCoefficientRowDeleting != null)) {
                    this.ViewCoefficientRowDeleting(this, new ViewCoefficientRowChangeEvent(((ViewCoefficientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewCoefficientRow(ViewCoefficientRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewCoefficientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeIncomeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmployeeIncomeId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnTotal_Inc;
            
            private System.Data.DataColumn columnTotal_Cntr;
            
            private System.Data.DataColumn columnTotal_Inc_LK;
            
            private System.Data.DataColumn columnTotal_Cntr_LK;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeDataTable() {
                this.TableName = "EmployeeIncome";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeIncomeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeIncomeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeIncomeIdColumn {
                get {
                    return this.columnEmployeeIncomeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_IncColumn {
                get {
                    return this.columnTotal_Inc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_CntrColumn {
                get {
                    return this.columnTotal_Cntr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_Inc_LKColumn {
                get {
                    return this.columnTotal_Inc_LK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_Cntr_LKColumn {
                get {
                    return this.columnTotal_Cntr_LK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeRow this[int index] {
                get {
                    return ((EmployeeIncomeRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeIncomeRowChangeEventHandler EmployeeIncomeRowChanging;
            
            public event EmployeeIncomeRowChangeEventHandler EmployeeIncomeRowChanged;
            
            public event EmployeeIncomeRowChangeEventHandler EmployeeIncomeRowDeleting;
            
            public event EmployeeIncomeRowChangeEventHandler EmployeeIncomeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeIncomeRow(EmployeeIncomeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeRow AddEmployeeIncomeRow(int UserId, System.DateTime Date, decimal Total_Inc, decimal Total_Cntr, decimal Total_Inc_LK, decimal Total_Cntr_LK) {
                EmployeeIncomeRow rowEmployeeIncomeRow = ((EmployeeIncomeRow)(this.NewRow()));
                rowEmployeeIncomeRow.ItemArray = new object[] {
                        null,
                        UserId,
                        Date,
                        Total_Inc,
                        Total_Cntr,
                        Total_Inc_LK,
                        Total_Cntr_LK};
                this.Rows.Add(rowEmployeeIncomeRow);
                return rowEmployeeIncomeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeRow FindByEmployeeIncomeId(int EmployeeIncomeId) {
                return ((EmployeeIncomeRow)(this.Rows.Find(new object[] {
                            EmployeeIncomeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EmployeeIncomeDataTable cln = ((EmployeeIncomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EmployeeIncomeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeIncomeId = base.Columns["EmployeeIncomeId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnDate = base.Columns["Date"];
                this.columnTotal_Inc = base.Columns["Total_Inc"];
                this.columnTotal_Cntr = base.Columns["Total_Cntr"];
                this.columnTotal_Inc_LK = base.Columns["Total_Inc_LK"];
                this.columnTotal_Cntr_LK = base.Columns["Total_Cntr_LK"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeIncomeId = new System.Data.DataColumn("EmployeeIncomeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeIncomeId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTotal_Inc = new System.Data.DataColumn("Total_Inc", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Inc);
                this.columnTotal_Cntr = new System.Data.DataColumn("Total_Cntr", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Cntr);
                this.columnTotal_Inc_LK = new System.Data.DataColumn("Total_Inc_LK", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Inc_LK);
                this.columnTotal_Cntr_LK = new System.Data.DataColumn("Total_Cntr_LK", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Cntr_LK);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEmployeeIncomeId}, true));
                this.columnEmployeeIncomeId.AutoIncrement = true;
                this.columnEmployeeIncomeId.AllowDBNull = false;
                this.columnEmployeeIncomeId.ReadOnly = true;
                this.columnEmployeeIncomeId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeRow NewEmployeeIncomeRow() {
                return ((EmployeeIncomeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmployeeIncomeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EmployeeIncomeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeIncomeRowChanged != null)) {
                    this.EmployeeIncomeRowChanged(this, new EmployeeIncomeRowChangeEvent(((EmployeeIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeIncomeRowChanging != null)) {
                    this.EmployeeIncomeRowChanging(this, new EmployeeIncomeRowChangeEvent(((EmployeeIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeIncomeRowDeleted != null)) {
                    this.EmployeeIncomeRowDeleted(this, new EmployeeIncomeRowChangeEvent(((EmployeeIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeIncomeRowDeleting != null)) {
                    this.EmployeeIncomeRowDeleting(this, new EmployeeIncomeRowChangeEvent(((EmployeeIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeIncomeRow(EmployeeIncomeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeIncomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IncomeMonthDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIncomeMonthId;
            
            private System.Data.DataColumn columnIncomeTypeId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnLk;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnLock;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthDataTable() {
                this.TableName = "IncomeMonth";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncomeMonthDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IncomeMonthDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeMonthIdColumn {
                get {
                    return this.columnIncomeMonthId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeTypeIdColumn {
                get {
                    return this.columnIncomeTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LkColumn {
                get {
                    return this.columnLk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LockColumn {
                get {
                    return this.columnLock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow this[int index] {
                get {
                    return ((IncomeMonthRow)(this.Rows[index]));
                }
            }
            
            public event IncomeMonthRowChangeEventHandler IncomeMonthRowChanging;
            
            public event IncomeMonthRowChangeEventHandler IncomeMonthRowChanged;
            
            public event IncomeMonthRowChangeEventHandler IncomeMonthRowDeleting;
            
            public event IncomeMonthRowChangeEventHandler IncomeMonthRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIncomeMonthRow(IncomeMonthRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow AddIncomeMonthRow(IncomeTypeRow parentIncomeTypeRowByFK_IncomeMonth_IncomeType, EmployeesRow parentEmployeesRowByEmployees_IncomeMonth, decimal Value, decimal Lk, System.DateTime Date, bool Lock) {
                IncomeMonthRow rowIncomeMonthRow = ((IncomeMonthRow)(this.NewRow()));
                rowIncomeMonthRow.ItemArray = new object[] {
                        null,
                        parentIncomeTypeRowByFK_IncomeMonth_IncomeType[0],
                        parentEmployeesRowByEmployees_IncomeMonth[0],
                        Value,
                        Lk,
                        Date,
                        Lock};
                this.Rows.Add(rowIncomeMonthRow);
                return rowIncomeMonthRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow FindByIncomeMonthId(long IncomeMonthId) {
                return ((IncomeMonthRow)(this.Rows.Find(new object[] {
                            IncomeMonthId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IncomeMonthDataTable cln = ((IncomeMonthDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IncomeMonthDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncomeMonthId = base.Columns["IncomeMonthId"];
                this.columnIncomeTypeId = base.Columns["IncomeTypeId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnValue = base.Columns["Value"];
                this.columnLk = base.Columns["Lk"];
                this.columnDate = base.Columns["Date"];
                this.columnLock = base.Columns["Lock"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncomeMonthId = new System.Data.DataColumn("IncomeMonthId", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeMonthId);
                this.columnIncomeTypeId = new System.Data.DataColumn("IncomeTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeTypeId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnValue = new System.Data.DataColumn("Value", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnLk = new System.Data.DataColumn("Lk", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLk);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnLock = new System.Data.DataColumn("Lock", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLock);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIncomeMonthId}, true));
                this.columnIncomeMonthId.AutoIncrement = true;
                this.columnIncomeMonthId.AllowDBNull = false;
                this.columnIncomeMonthId.ReadOnly = true;
                this.columnIncomeMonthId.Unique = true;
                this.columnIncomeTypeId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow NewIncomeMonthRow() {
                return ((IncomeMonthRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IncomeMonthRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IncomeMonthRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IncomeMonthRowChanged != null)) {
                    this.IncomeMonthRowChanged(this, new IncomeMonthRowChangeEvent(((IncomeMonthRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IncomeMonthRowChanging != null)) {
                    this.IncomeMonthRowChanging(this, new IncomeMonthRowChangeEvent(((IncomeMonthRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IncomeMonthRowDeleted != null)) {
                    this.IncomeMonthRowDeleted(this, new IncomeMonthRowChangeEvent(((IncomeMonthRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IncomeMonthRowDeleting != null)) {
                    this.IncomeMonthRowDeleting(this, new IncomeMonthRowChangeEvent(((IncomeMonthRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIncomeMonthRow(IncomeMonthRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IncomeMonthDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TimeKeepingTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTimeKeepingTypeId;
            
            private System.Data.DataColumn columnTimeKeepingCode;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeDataTable() {
                this.TableName = "TimeKeepingType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimeKeepingTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TimeKeepingTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingTypeIdColumn {
                get {
                    return this.columnTimeKeepingTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeKeepingCodeColumn {
                get {
                    return this.columnTimeKeepingCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRow this[int index] {
                get {
                    return ((TimeKeepingTypeRow)(this.Rows[index]));
                }
            }
            
            public event TimeKeepingTypeRowChangeEventHandler TimeKeepingTypeRowChanging;
            
            public event TimeKeepingTypeRowChangeEventHandler TimeKeepingTypeRowChanged;
            
            public event TimeKeepingTypeRowChangeEventHandler TimeKeepingTypeRowDeleting;
            
            public event TimeKeepingTypeRowChangeEventHandler TimeKeepingTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTimeKeepingTypeRow(TimeKeepingTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRow AddTimeKeepingTypeRow(string TimeKeepingCode, bool Type, string Description) {
                TimeKeepingTypeRow rowTimeKeepingTypeRow = ((TimeKeepingTypeRow)(this.NewRow()));
                rowTimeKeepingTypeRow.ItemArray = new object[] {
                        null,
                        TimeKeepingCode,
                        Type,
                        Description};
                this.Rows.Add(rowTimeKeepingTypeRow);
                return rowTimeKeepingTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRow FindByTimeKeepingTypeId(int TimeKeepingTypeId) {
                return ((TimeKeepingTypeRow)(this.Rows.Find(new object[] {
                            TimeKeepingTypeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TimeKeepingTypeDataTable cln = ((TimeKeepingTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TimeKeepingTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTimeKeepingTypeId = base.Columns["TimeKeepingTypeId"];
                this.columnTimeKeepingCode = base.Columns["TimeKeepingCode"];
                this.columnType = base.Columns["Type"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTimeKeepingTypeId = new System.Data.DataColumn("TimeKeepingTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingTypeId);
                this.columnTimeKeepingCode = new System.Data.DataColumn("TimeKeepingCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeKeepingCode);
                this.columnType = new System.Data.DataColumn("Type", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTimeKeepingTypeId}, true));
                this.columnTimeKeepingTypeId.AutoIncrement = true;
                this.columnTimeKeepingTypeId.AllowDBNull = false;
                this.columnTimeKeepingTypeId.ReadOnly = true;
                this.columnTimeKeepingTypeId.Unique = true;
                this.columnTimeKeepingCode.MaxLength = 50;
                this.columnDescription.MaxLength = 1000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRow NewTimeKeepingTypeRow() {
                return ((TimeKeepingTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TimeKeepingTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TimeKeepingTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeKeepingTypeRowChanged != null)) {
                    this.TimeKeepingTypeRowChanged(this, new TimeKeepingTypeRowChangeEvent(((TimeKeepingTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeKeepingTypeRowChanging != null)) {
                    this.TimeKeepingTypeRowChanging(this, new TimeKeepingTypeRowChangeEvent(((TimeKeepingTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeKeepingTypeRowDeleted != null)) {
                    this.TimeKeepingTypeRowDeleted(this, new TimeKeepingTypeRowChangeEvent(((TimeKeepingTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeKeepingTypeRowDeleting != null)) {
                    this.TimeKeepingTypeRowDeleting(this, new TimeKeepingTypeRowChangeEvent(((TimeKeepingTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTimeKeepingTypeRow(TimeKeepingTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TimeKeepingTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewEmployeeDeptPositionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnEmployeeCode;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnPositionName;
            
            private System.Data.DataColumn columnDepartmentName;
            
            private System.Data.DataColumn columnBirthday;
            
            private System.Data.DataColumn columnJoinDate;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnMarriage;
            
            private System.Data.DataColumn columnHealthInsuranceNo;
            
            private System.Data.DataColumn columnHealthInsuranceAddress;
            
            private System.Data.DataColumn columnSocialInsuranceNo;
            
            private System.Data.DataColumn columnAccountNo;
            
            private System.Data.DataColumn columnAccountName;
            
            private System.Data.DataColumn columnCardNo;
            
            private System.Data.DataColumn columnBankName;
            
            private System.Data.DataColumn columnPaymentDate;
            
            private System.Data.DataColumn columnStandardLeave;
            
            private System.Data.DataColumn columnDepartmentId;
            
            private System.Data.DataColumn columnPositionId;
            
            private System.Data.DataColumn columnContractTypeCode;
            
            private System.Data.DataColumn columnContractTypeName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionDataTable() {
                this.TableName = "ViewEmployeeDeptPosition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewEmployeeDeptPositionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewEmployeeDeptPositionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionNameColumn {
                get {
                    return this.columnPositionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BirthdayColumn {
                get {
                    return this.columnBirthday;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JoinDateColumn {
                get {
                    return this.columnJoinDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MarriageColumn {
                get {
                    return this.columnMarriage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HealthInsuranceNoColumn {
                get {
                    return this.columnHealthInsuranceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HealthInsuranceAddressColumn {
                get {
                    return this.columnHealthInsuranceAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SocialInsuranceNoColumn {
                get {
                    return this.columnSocialInsuranceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNoColumn {
                get {
                    return this.columnAccountNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CardNoColumn {
                get {
                    return this.columnCardNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StandardLeaveColumn {
                get {
                    return this.columnStandardLeave;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIdColumn {
                get {
                    return this.columnDepartmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionIdColumn {
                get {
                    return this.columnPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeCodeColumn {
                get {
                    return this.columnContractTypeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeNameColumn {
                get {
                    return this.columnContractTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionRow this[int index] {
                get {
                    return ((ViewEmployeeDeptPositionRow)(this.Rows[index]));
                }
            }
            
            public event ViewEmployeeDeptPositionRowChangeEventHandler ViewEmployeeDeptPositionRowChanging;
            
            public event ViewEmployeeDeptPositionRowChangeEventHandler ViewEmployeeDeptPositionRowChanged;
            
            public event ViewEmployeeDeptPositionRowChangeEventHandler ViewEmployeeDeptPositionRowDeleting;
            
            public event ViewEmployeeDeptPositionRowChangeEventHandler ViewEmployeeDeptPositionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewEmployeeDeptPositionRow(ViewEmployeeDeptPositionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionRow AddViewEmployeeDeptPositionRow(
                        string FullName, 
                        string UserName, 
                        string EmployeeCode, 
                        string Password, 
                        string PositionName, 
                        string DepartmentName, 
                        System.DateTime Birthday, 
                        System.DateTime JoinDate, 
                        int Status, 
                        bool Marriage, 
                        string HealthInsuranceNo, 
                        string HealthInsuranceAddress, 
                        string SocialInsuranceNo, 
                        string AccountNo, 
                        string AccountName, 
                        string CardNo, 
                        string BankName, 
                        System.DateTime PaymentDate, 
                        int StandardLeave, 
                        int DepartmentId, 
                        int PositionId, 
                        string ContractTypeCode, 
                        string ContractTypeName) {
                ViewEmployeeDeptPositionRow rowViewEmployeeDeptPositionRow = ((ViewEmployeeDeptPositionRow)(this.NewRow()));
                rowViewEmployeeDeptPositionRow.ItemArray = new object[] {
                        null,
                        FullName,
                        UserName,
                        EmployeeCode,
                        Password,
                        PositionName,
                        DepartmentName,
                        Birthday,
                        JoinDate,
                        Status,
                        Marriage,
                        HealthInsuranceNo,
                        HealthInsuranceAddress,
                        SocialInsuranceNo,
                        AccountNo,
                        AccountName,
                        CardNo,
                        BankName,
                        PaymentDate,
                        StandardLeave,
                        DepartmentId,
                        PositionId,
                        ContractTypeCode,
                        ContractTypeName};
                this.Rows.Add(rowViewEmployeeDeptPositionRow);
                return rowViewEmployeeDeptPositionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionRow FindByUserId(int UserId) {
                return ((ViewEmployeeDeptPositionRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewEmployeeDeptPositionDataTable cln = ((ViewEmployeeDeptPositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewEmployeeDeptPositionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnFullName = base.Columns["FullName"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnPassword = base.Columns["Password"];
                this.columnPositionName = base.Columns["PositionName"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnBirthday = base.Columns["Birthday"];
                this.columnJoinDate = base.Columns["JoinDate"];
                this.columnStatus = base.Columns["Status"];
                this.columnMarriage = base.Columns["Marriage"];
                this.columnHealthInsuranceNo = base.Columns["HealthInsuranceNo"];
                this.columnHealthInsuranceAddress = base.Columns["HealthInsuranceAddress"];
                this.columnSocialInsuranceNo = base.Columns["SocialInsuranceNo"];
                this.columnAccountNo = base.Columns["AccountNo"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnCardNo = base.Columns["CardNo"];
                this.columnBankName = base.Columns["BankName"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnStandardLeave = base.Columns["StandardLeave"];
                this.columnDepartmentId = base.Columns["DepartmentId"];
                this.columnPositionId = base.Columns["PositionId"];
                this.columnContractTypeCode = base.Columns["ContractTypeCode"];
                this.columnContractTypeName = base.Columns["ContractTypeName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEmployeeCode = new System.Data.DataColumn("EmployeeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnPositionName = new System.Data.DataColumn("PositionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionName);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnBirthday = new System.Data.DataColumn("Birthday", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthday);
                this.columnJoinDate = new System.Data.DataColumn("JoinDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDate);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnMarriage = new System.Data.DataColumn("Marriage", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarriage);
                this.columnHealthInsuranceNo = new System.Data.DataColumn("HealthInsuranceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthInsuranceNo);
                this.columnHealthInsuranceAddress = new System.Data.DataColumn("HealthInsuranceAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthInsuranceAddress);
                this.columnSocialInsuranceNo = new System.Data.DataColumn("SocialInsuranceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSocialInsuranceNo);
                this.columnAccountNo = new System.Data.DataColumn("AccountNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNo);
                this.columnAccountName = new System.Data.DataColumn("AccountName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnCardNo = new System.Data.DataColumn("CardNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCardNo);
                this.columnBankName = new System.Data.DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnPaymentDate = new System.Data.DataColumn("PaymentDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnStandardLeave = new System.Data.DataColumn("StandardLeave", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardLeave);
                this.columnDepartmentId = new System.Data.DataColumn("DepartmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentId);
                this.columnPositionId = new System.Data.DataColumn("PositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionId);
                this.columnContractTypeCode = new System.Data.DataColumn("ContractTypeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeCode);
                this.columnContractTypeName = new System.Data.DataColumn("ContractTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserId.Unique = true;
                this.columnFullName.MaxLength = 100;
                this.columnUserName.MaxLength = 50;
                this.columnEmployeeCode.MaxLength = 50;
                this.columnPassword.MaxLength = 50;
                this.columnPositionName.MaxLength = 50;
                this.columnDepartmentName.MaxLength = 50;
                this.columnHealthInsuranceNo.MaxLength = 50;
                this.columnHealthInsuranceAddress.MaxLength = 100;
                this.columnSocialInsuranceNo.MaxLength = 50;
                this.columnAccountNo.MaxLength = 50;
                this.columnAccountName.MaxLength = 50;
                this.columnCardNo.MaxLength = 50;
                this.columnBankName.MaxLength = 50;
                this.columnContractTypeCode.MaxLength = 50;
                this.columnContractTypeName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionRow NewViewEmployeeDeptPositionRow() {
                return ((ViewEmployeeDeptPositionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewEmployeeDeptPositionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewEmployeeDeptPositionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewEmployeeDeptPositionRowChanged != null)) {
                    this.ViewEmployeeDeptPositionRowChanged(this, new ViewEmployeeDeptPositionRowChangeEvent(((ViewEmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewEmployeeDeptPositionRowChanging != null)) {
                    this.ViewEmployeeDeptPositionRowChanging(this, new ViewEmployeeDeptPositionRowChangeEvent(((ViewEmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewEmployeeDeptPositionRowDeleted != null)) {
                    this.ViewEmployeeDeptPositionRowDeleted(this, new ViewEmployeeDeptPositionRowChangeEvent(((ViewEmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewEmployeeDeptPositionRowDeleting != null)) {
                    this.ViewEmployeeDeptPositionRowDeleting(this, new ViewEmployeeDeptPositionRowChangeEvent(((ViewEmployeeDeptPositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewEmployeeDeptPositionRow(ViewEmployeeDeptPositionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewEmployeeDeptPositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewUserRolesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnEmployeeCode;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnRoleId;
            
            private System.Data.DataColumn columnRoleName;
            
            private System.Data.DataColumn columnRoleLevel;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewUserRolesDataTable() {
                this.TableName = "ViewUserRoles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewUserRolesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewUserRolesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleIdColumn {
                get {
                    return this.columnRoleId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleNameColumn {
                get {
                    return this.columnRoleName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleLevelColumn {
                get {
                    return this.columnRoleLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewUserRolesRow this[int index] {
                get {
                    return ((ViewUserRolesRow)(this.Rows[index]));
                }
            }
            
            public event ViewUserRolesRowChangeEventHandler ViewUserRolesRowChanging;
            
            public event ViewUserRolesRowChangeEventHandler ViewUserRolesRowChanged;
            
            public event ViewUserRolesRowChangeEventHandler ViewUserRolesRowDeleting;
            
            public event ViewUserRolesRowChangeEventHandler ViewUserRolesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewUserRolesRow(ViewUserRolesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewUserRolesRow AddViewUserRolesRow(string UserName, string EmployeeCode, string FullName, string RoleName, int RoleLevel, string Description) {
                ViewUserRolesRow rowViewUserRolesRow = ((ViewUserRolesRow)(this.NewRow()));
                rowViewUserRolesRow.ItemArray = new object[] {
                        null,
                        UserName,
                        EmployeeCode,
                        FullName,
                        null,
                        RoleName,
                        RoleLevel,
                        Description};
                this.Rows.Add(rowViewUserRolesRow);
                return rowViewUserRolesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewUserRolesDataTable cln = ((ViewUserRolesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewUserRolesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnFullName = base.Columns["FullName"];
                this.columnRoleId = base.Columns["RoleId"];
                this.columnRoleName = base.Columns["RoleName"];
                this.columnRoleLevel = base.Columns["RoleLevel"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEmployeeCode = new System.Data.DataColumn("EmployeeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnRoleId = new System.Data.DataColumn("RoleId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoleId);
                this.columnRoleName = new System.Data.DataColumn("RoleName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoleName);
                this.columnRoleLevel = new System.Data.DataColumn("RoleLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoleLevel);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserName.MaxLength = 50;
                this.columnEmployeeCode.MaxLength = 50;
                this.columnFullName.MaxLength = 100;
                this.columnRoleId.AutoIncrement = true;
                this.columnRoleId.AllowDBNull = false;
                this.columnRoleId.ReadOnly = true;
                this.columnRoleName.MaxLength = 50;
                this.columnDescription.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewUserRolesRow NewViewUserRolesRow() {
                return ((ViewUserRolesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewUserRolesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewUserRolesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewUserRolesRowChanged != null)) {
                    this.ViewUserRolesRowChanged(this, new ViewUserRolesRowChangeEvent(((ViewUserRolesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewUserRolesRowChanging != null)) {
                    this.ViewUserRolesRowChanging(this, new ViewUserRolesRowChangeEvent(((ViewUserRolesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewUserRolesRowDeleted != null)) {
                    this.ViewUserRolesRowDeleted(this, new ViewUserRolesRowChangeEvent(((ViewUserRolesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewUserRolesRowDeleting != null)) {
                    this.ViewUserRolesRowDeleting(this, new ViewUserRolesRowChangeEvent(((ViewUserRolesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewUserRolesRow(ViewUserRolesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewUserRolesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IncomeTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIncomeTypeId;
            
            private System.Data.DataColumn columnIncomeName;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeDataTable() {
                this.TableName = "IncomeType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncomeTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IncomeTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeTypeIdColumn {
                get {
                    return this.columnIncomeTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeNameColumn {
                get {
                    return this.columnIncomeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRow this[int index] {
                get {
                    return ((IncomeTypeRow)(this.Rows[index]));
                }
            }
            
            public event IncomeTypeRowChangeEventHandler IncomeTypeRowChanging;
            
            public event IncomeTypeRowChangeEventHandler IncomeTypeRowChanged;
            
            public event IncomeTypeRowChangeEventHandler IncomeTypeRowDeleting;
            
            public event IncomeTypeRowChangeEventHandler IncomeTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIncomeTypeRow(IncomeTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRow AddIncomeTypeRow(string IncomeName, string Description, bool Type) {
                IncomeTypeRow rowIncomeTypeRow = ((IncomeTypeRow)(this.NewRow()));
                rowIncomeTypeRow.ItemArray = new object[] {
                        null,
                        IncomeName,
                        Description,
                        Type};
                this.Rows.Add(rowIncomeTypeRow);
                return rowIncomeTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRow FindByIncomeTypeId(int IncomeTypeId) {
                return ((IncomeTypeRow)(this.Rows.Find(new object[] {
                            IncomeTypeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IncomeTypeDataTable cln = ((IncomeTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IncomeTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncomeTypeId = base.Columns["IncomeTypeId"];
                this.columnIncomeName = base.Columns["IncomeName"];
                this.columnDescription = base.Columns["Description"];
                this.columnType = base.Columns["Type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncomeTypeId = new System.Data.DataColumn("IncomeTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeTypeId);
                this.columnIncomeName = new System.Data.DataColumn("IncomeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnType = new System.Data.DataColumn("Type", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIncomeTypeId}, true));
                this.columnIncomeTypeId.AutoIncrement = true;
                this.columnIncomeTypeId.AllowDBNull = false;
                this.columnIncomeTypeId.ReadOnly = true;
                this.columnIncomeTypeId.Unique = true;
                this.columnIncomeName.MaxLength = 50;
                this.columnDescription.MaxLength = 1000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRow NewIncomeTypeRow() {
                return ((IncomeTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IncomeTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IncomeTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IncomeTypeRowChanged != null)) {
                    this.IncomeTypeRowChanged(this, new IncomeTypeRowChangeEvent(((IncomeTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IncomeTypeRowChanging != null)) {
                    this.IncomeTypeRowChanging(this, new IncomeTypeRowChangeEvent(((IncomeTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IncomeTypeRowDeleted != null)) {
                    this.IncomeTypeRowDeleted(this, new IncomeTypeRowChangeEvent(((IncomeTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IncomeTypeRowDeleting != null)) {
                    this.IncomeTypeRowDeleting(this, new IncomeTypeRowChangeEvent(((IncomeTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIncomeTypeRow(IncomeTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IncomeTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewIncomeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIncomeMonthId;
            
            private System.Data.DataColumn columnIncomeTypeId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnIncomeName;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnLk;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnLock;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeDataTable() {
                this.TableName = "ViewIncome";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewIncomeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewIncomeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeMonthIdColumn {
                get {
                    return this.columnIncomeMonthId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeTypeIdColumn {
                get {
                    return this.columnIncomeTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeNameColumn {
                get {
                    return this.columnIncomeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LkColumn {
                get {
                    return this.columnLk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LockColumn {
                get {
                    return this.columnLock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeRow this[int index] {
                get {
                    return ((ViewIncomeRow)(this.Rows[index]));
                }
            }
            
            public event ViewIncomeRowChangeEventHandler ViewIncomeRowChanging;
            
            public event ViewIncomeRowChangeEventHandler ViewIncomeRowChanged;
            
            public event ViewIncomeRowChangeEventHandler ViewIncomeRowDeleting;
            
            public event ViewIncomeRowChangeEventHandler ViewIncomeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewIncomeRow(ViewIncomeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeRow AddViewIncomeRow(int IncomeTypeId, int UserId, string IncomeName, decimal Value, decimal Lk, bool Type, System.DateTime Date, bool Lock, string Description) {
                ViewIncomeRow rowViewIncomeRow = ((ViewIncomeRow)(this.NewRow()));
                rowViewIncomeRow.ItemArray = new object[] {
                        null,
                        IncomeTypeId,
                        UserId,
                        IncomeName,
                        Value,
                        Lk,
                        Type,
                        Date,
                        Lock,
                        Description};
                this.Rows.Add(rowViewIncomeRow);
                return rowViewIncomeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeRow FindByIncomeMonthId(long IncomeMonthId) {
                return ((ViewIncomeRow)(this.Rows.Find(new object[] {
                            IncomeMonthId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewIncomeDataTable cln = ((ViewIncomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewIncomeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIncomeMonthId = base.Columns["IncomeMonthId"];
                this.columnIncomeTypeId = base.Columns["IncomeTypeId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnIncomeName = base.Columns["IncomeName"];
                this.columnValue = base.Columns["Value"];
                this.columnLk = base.Columns["Lk"];
                this.columnType = base.Columns["Type"];
                this.columnDate = base.Columns["Date"];
                this.columnLock = base.Columns["Lock"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIncomeMonthId = new System.Data.DataColumn("IncomeMonthId", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeMonthId);
                this.columnIncomeTypeId = new System.Data.DataColumn("IncomeTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeTypeId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnIncomeName = new System.Data.DataColumn("IncomeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeName);
                this.columnValue = new System.Data.DataColumn("Value", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnLk = new System.Data.DataColumn("Lk", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLk);
                this.columnType = new System.Data.DataColumn("Type", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnLock = new System.Data.DataColumn("Lock", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLock);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnIncomeMonthId}, true));
                this.columnIncomeMonthId.AutoIncrement = true;
                this.columnIncomeMonthId.AllowDBNull = false;
                this.columnIncomeMonthId.ReadOnly = true;
                this.columnIncomeMonthId.Unique = true;
                this.columnIncomeTypeId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnIncomeName.MaxLength = 50;
                this.columnDescription.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeRow NewViewIncomeRow() {
                return ((ViewIncomeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewIncomeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewIncomeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewIncomeRowChanged != null)) {
                    this.ViewIncomeRowChanged(this, new ViewIncomeRowChangeEvent(((ViewIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewIncomeRowChanging != null)) {
                    this.ViewIncomeRowChanging(this, new ViewIncomeRowChangeEvent(((ViewIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewIncomeRowDeleted != null)) {
                    this.ViewIncomeRowDeleted(this, new ViewIncomeRowChangeEvent(((ViewIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewIncomeRowDeleting != null)) {
                    this.ViewIncomeRowDeleting(this, new ViewIncomeRowChangeEvent(((ViewIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewIncomeRow(ViewIncomeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewIncomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewEmployeeIncomesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnEmployeeCode;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnBirthday;
            
            private System.Data.DataColumn columnJoinDate;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnMarriage;
            
            private System.Data.DataColumn columnHealthInsuranceNo;
            
            private System.Data.DataColumn columnHealthInsuranceAddress;
            
            private System.Data.DataColumn columnSocialInsuranceNo;
            
            private System.Data.DataColumn columnAccountNo;
            
            private System.Data.DataColumn columnAccountName;
            
            private System.Data.DataColumn columnCardNo;
            
            private System.Data.DataColumn columnBankName;
            
            private System.Data.DataColumn columnPaymentDate;
            
            private System.Data.DataColumn columnContractTypeId;
            
            private System.Data.DataColumn columnStandardLeave;
            
            private System.Data.DataColumn columnDepartmentId;
            
            private System.Data.DataColumn columnPositionId;
            
            private System.Data.DataColumn columnDepartmentName;
            
            private System.Data.DataColumn columnPositionName;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnTotal_Inc;
            
            private System.Data.DataColumn columnTotal_Cntr;
            
            private System.Data.DataColumn columnTotal_Inc_LK;
            
            private System.Data.DataColumn columnTotal_Cntr_LK;
            
            private System.Data.DataColumn columnContractTypeCode;
            
            private System.Data.DataColumn columnContractTypeName;
            
            private System.Data.DataColumn columnRealIncome;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesDataTable() {
                this.TableName = "ViewEmployeeIncomes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewEmployeeIncomesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewEmployeeIncomesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BirthdayColumn {
                get {
                    return this.columnBirthday;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JoinDateColumn {
                get {
                    return this.columnJoinDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MarriageColumn {
                get {
                    return this.columnMarriage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HealthInsuranceNoColumn {
                get {
                    return this.columnHealthInsuranceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HealthInsuranceAddressColumn {
                get {
                    return this.columnHealthInsuranceAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SocialInsuranceNoColumn {
                get {
                    return this.columnSocialInsuranceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNoColumn {
                get {
                    return this.columnAccountNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CardNoColumn {
                get {
                    return this.columnCardNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeIdColumn {
                get {
                    return this.columnContractTypeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StandardLeaveColumn {
                get {
                    return this.columnStandardLeave;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIdColumn {
                get {
                    return this.columnDepartmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionIdColumn {
                get {
                    return this.columnPositionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionNameColumn {
                get {
                    return this.columnPositionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_IncColumn {
                get {
                    return this.columnTotal_Inc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_CntrColumn {
                get {
                    return this.columnTotal_Cntr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_Inc_LKColumn {
                get {
                    return this.columnTotal_Inc_LK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Total_Cntr_LKColumn {
                get {
                    return this.columnTotal_Cntr_LK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeCodeColumn {
                get {
                    return this.columnContractTypeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContractTypeNameColumn {
                get {
                    return this.columnContractTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RealIncomeColumn {
                get {
                    return this.columnRealIncome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesRow this[int index] {
                get {
                    return ((ViewEmployeeIncomesRow)(this.Rows[index]));
                }
            }
            
            public event ViewEmployeeIncomesRowChangeEventHandler ViewEmployeeIncomesRowChanging;
            
            public event ViewEmployeeIncomesRowChangeEventHandler ViewEmployeeIncomesRowChanged;
            
            public event ViewEmployeeIncomesRowChangeEventHandler ViewEmployeeIncomesRowDeleting;
            
            public event ViewEmployeeIncomesRowChangeEventHandler ViewEmployeeIncomesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewEmployeeIncomesRow(ViewEmployeeIncomesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesRow AddViewEmployeeIncomesRow(
                        string UserName, 
                        string EmployeeCode, 
                        string Password, 
                        string FullName, 
                        System.DateTime Birthday, 
                        System.DateTime JoinDate, 
                        int Status, 
                        bool Marriage, 
                        string HealthInsuranceNo, 
                        string HealthInsuranceAddress, 
                        string SocialInsuranceNo, 
                        string AccountNo, 
                        string AccountName, 
                        string CardNo, 
                        string BankName, 
                        System.DateTime PaymentDate, 
                        int ContractTypeId, 
                        int StandardLeave, 
                        int DepartmentId, 
                        int PositionId, 
                        string DepartmentName, 
                        string PositionName, 
                        System.DateTime Date, 
                        decimal Total_Inc, 
                        decimal Total_Cntr, 
                        decimal Total_Inc_LK, 
                        decimal Total_Cntr_LK, 
                        string ContractTypeCode, 
                        string ContractTypeName, 
                        decimal RealIncome) {
                ViewEmployeeIncomesRow rowViewEmployeeIncomesRow = ((ViewEmployeeIncomesRow)(this.NewRow()));
                rowViewEmployeeIncomesRow.ItemArray = new object[] {
                        null,
                        UserName,
                        EmployeeCode,
                        Password,
                        FullName,
                        Birthday,
                        JoinDate,
                        Status,
                        Marriage,
                        HealthInsuranceNo,
                        HealthInsuranceAddress,
                        SocialInsuranceNo,
                        AccountNo,
                        AccountName,
                        CardNo,
                        BankName,
                        PaymentDate,
                        ContractTypeId,
                        StandardLeave,
                        DepartmentId,
                        PositionId,
                        DepartmentName,
                        PositionName,
                        Date,
                        Total_Inc,
                        Total_Cntr,
                        Total_Inc_LK,
                        Total_Cntr_LK,
                        ContractTypeCode,
                        ContractTypeName,
                        RealIncome};
                this.Rows.Add(rowViewEmployeeIncomesRow);
                return rowViewEmployeeIncomesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesRow FindByUserId(int UserId) {
                return ((ViewEmployeeIncomesRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewEmployeeIncomesDataTable cln = ((ViewEmployeeIncomesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewEmployeeIncomesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnPassword = base.Columns["Password"];
                this.columnFullName = base.Columns["FullName"];
                this.columnBirthday = base.Columns["Birthday"];
                this.columnJoinDate = base.Columns["JoinDate"];
                this.columnStatus = base.Columns["Status"];
                this.columnMarriage = base.Columns["Marriage"];
                this.columnHealthInsuranceNo = base.Columns["HealthInsuranceNo"];
                this.columnHealthInsuranceAddress = base.Columns["HealthInsuranceAddress"];
                this.columnSocialInsuranceNo = base.Columns["SocialInsuranceNo"];
                this.columnAccountNo = base.Columns["AccountNo"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnCardNo = base.Columns["CardNo"];
                this.columnBankName = base.Columns["BankName"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnContractTypeId = base.Columns["ContractTypeId"];
                this.columnStandardLeave = base.Columns["StandardLeave"];
                this.columnDepartmentId = base.Columns["DepartmentId"];
                this.columnPositionId = base.Columns["PositionId"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnPositionName = base.Columns["PositionName"];
                this.columnDate = base.Columns["Date"];
                this.columnTotal_Inc = base.Columns["Total_Inc"];
                this.columnTotal_Cntr = base.Columns["Total_Cntr"];
                this.columnTotal_Inc_LK = base.Columns["Total_Inc_LK"];
                this.columnTotal_Cntr_LK = base.Columns["Total_Cntr_LK"];
                this.columnContractTypeCode = base.Columns["ContractTypeCode"];
                this.columnContractTypeName = base.Columns["ContractTypeName"];
                this.columnRealIncome = base.Columns["RealIncome"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEmployeeCode = new System.Data.DataColumn("EmployeeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnBirthday = new System.Data.DataColumn("Birthday", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthday);
                this.columnJoinDate = new System.Data.DataColumn("JoinDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDate);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnMarriage = new System.Data.DataColumn("Marriage", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarriage);
                this.columnHealthInsuranceNo = new System.Data.DataColumn("HealthInsuranceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthInsuranceNo);
                this.columnHealthInsuranceAddress = new System.Data.DataColumn("HealthInsuranceAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthInsuranceAddress);
                this.columnSocialInsuranceNo = new System.Data.DataColumn("SocialInsuranceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSocialInsuranceNo);
                this.columnAccountNo = new System.Data.DataColumn("AccountNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNo);
                this.columnAccountName = new System.Data.DataColumn("AccountName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnCardNo = new System.Data.DataColumn("CardNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCardNo);
                this.columnBankName = new System.Data.DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnPaymentDate = new System.Data.DataColumn("PaymentDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnContractTypeId = new System.Data.DataColumn("ContractTypeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeId);
                this.columnStandardLeave = new System.Data.DataColumn("StandardLeave", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardLeave);
                this.columnDepartmentId = new System.Data.DataColumn("DepartmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentId);
                this.columnPositionId = new System.Data.DataColumn("PositionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionId);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnPositionName = new System.Data.DataColumn("PositionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionName);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTotal_Inc = new System.Data.DataColumn("Total_Inc", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Inc);
                this.columnTotal_Cntr = new System.Data.DataColumn("Total_Cntr", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Cntr);
                this.columnTotal_Inc_LK = new System.Data.DataColumn("Total_Inc_LK", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Inc_LK);
                this.columnTotal_Cntr_LK = new System.Data.DataColumn("Total_Cntr_LK", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Cntr_LK);
                this.columnContractTypeCode = new System.Data.DataColumn("ContractTypeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeCode);
                this.columnContractTypeName = new System.Data.DataColumn("ContractTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTypeName);
                this.columnRealIncome = new System.Data.DataColumn("RealIncome", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealIncome);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserId.Unique = true;
                this.columnUserName.MaxLength = 50;
                this.columnEmployeeCode.MaxLength = 50;
                this.columnPassword.MaxLength = 50;
                this.columnFullName.MaxLength = 100;
                this.columnHealthInsuranceNo.MaxLength = 50;
                this.columnHealthInsuranceAddress.MaxLength = 100;
                this.columnSocialInsuranceNo.MaxLength = 50;
                this.columnAccountNo.MaxLength = 50;
                this.columnAccountName.MaxLength = 50;
                this.columnCardNo.MaxLength = 50;
                this.columnBankName.MaxLength = 50;
                this.columnDepartmentName.MaxLength = 50;
                this.columnPositionName.MaxLength = 50;
                this.columnContractTypeCode.MaxLength = 50;
                this.columnContractTypeName.MaxLength = 50;
                this.columnRealIncome.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesRow NewViewEmployeeIncomesRow() {
                return ((ViewEmployeeIncomesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewEmployeeIncomesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewEmployeeIncomesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewEmployeeIncomesRowChanged != null)) {
                    this.ViewEmployeeIncomesRowChanged(this, new ViewEmployeeIncomesRowChangeEvent(((ViewEmployeeIncomesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewEmployeeIncomesRowChanging != null)) {
                    this.ViewEmployeeIncomesRowChanging(this, new ViewEmployeeIncomesRowChangeEvent(((ViewEmployeeIncomesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewEmployeeIncomesRowDeleted != null)) {
                    this.ViewEmployeeIncomesRowDeleted(this, new ViewEmployeeIncomesRowChangeEvent(((ViewEmployeeIncomesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewEmployeeIncomesRowDeleting != null)) {
                    this.ViewEmployeeIncomesRowDeleting(this, new ViewEmployeeIncomesRowChangeEvent(((ViewEmployeeIncomesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewEmployeeIncomesRow(ViewEmployeeIncomesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewEmployeeIncomesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewRealIncomeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnAccountNo;
            
            private System.Data.DataColumn columnCardNo;
            
            private System.Data.DataColumn columnRealIncome;
            
            private System.Data.DataColumn columnDepartmentName;
            
            private System.Data.DataColumn columnDepartmentId;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnPositionName;
            
            private System.Data.DataColumn columnEmployeeCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeDataTable() {
                this.TableName = "ViewRealIncome";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewRealIncomeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewRealIncomeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountNoColumn {
                get {
                    return this.columnAccountNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CardNoColumn {
                get {
                    return this.columnCardNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RealIncomeColumn {
                get {
                    return this.columnRealIncome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepartmentIdColumn {
                get {
                    return this.columnDepartmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionNameColumn {
                get {
                    return this.columnPositionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeRow this[int index] {
                get {
                    return ((ViewRealIncomeRow)(this.Rows[index]));
                }
            }
            
            public event ViewRealIncomeRowChangeEventHandler ViewRealIncomeRowChanging;
            
            public event ViewRealIncomeRowChangeEventHandler ViewRealIncomeRowChanged;
            
            public event ViewRealIncomeRowChangeEventHandler ViewRealIncomeRowDeleting;
            
            public event ViewRealIncomeRowChangeEventHandler ViewRealIncomeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewRealIncomeRow(ViewRealIncomeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeRow AddViewRealIncomeRow(string FullName, string AccountNo, string CardNo, decimal RealIncome, string DepartmentName, int DepartmentId, System.DateTime Date, string PositionName, string EmployeeCode) {
                ViewRealIncomeRow rowViewRealIncomeRow = ((ViewRealIncomeRow)(this.NewRow()));
                rowViewRealIncomeRow.ItemArray = new object[] {
                        null,
                        FullName,
                        AccountNo,
                        CardNo,
                        RealIncome,
                        DepartmentName,
                        DepartmentId,
                        Date,
                        PositionName,
                        EmployeeCode};
                this.Rows.Add(rowViewRealIncomeRow);
                return rowViewRealIncomeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeRow FindByUserId(int UserId) {
                return ((ViewRealIncomeRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewRealIncomeDataTable cln = ((ViewRealIncomeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewRealIncomeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnFullName = base.Columns["FullName"];
                this.columnAccountNo = base.Columns["AccountNo"];
                this.columnCardNo = base.Columns["CardNo"];
                this.columnRealIncome = base.Columns["RealIncome"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
                this.columnDepartmentId = base.Columns["DepartmentId"];
                this.columnDate = base.Columns["Date"];
                this.columnPositionName = base.Columns["PositionName"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnAccountNo = new System.Data.DataColumn("AccountNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNo);
                this.columnCardNo = new System.Data.DataColumn("CardNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCardNo);
                this.columnRealIncome = new System.Data.DataColumn("RealIncome", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealIncome);
                this.columnDepartmentName = new System.Data.DataColumn("DepartmentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.columnDepartmentId = new System.Data.DataColumn("DepartmentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentId);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPositionName = new System.Data.DataColumn("PositionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionName);
                this.columnEmployeeCode = new System.Data.DataColumn("EmployeeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserId.Unique = true;
                this.columnFullName.MaxLength = 100;
                this.columnAccountNo.MaxLength = 50;
                this.columnCardNo.MaxLength = 50;
                this.columnRealIncome.ReadOnly = true;
                this.columnDepartmentName.MaxLength = 50;
                this.columnPositionName.MaxLength = 50;
                this.columnEmployeeCode.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeRow NewViewRealIncomeRow() {
                return ((ViewRealIncomeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewRealIncomeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewRealIncomeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewRealIncomeRowChanged != null)) {
                    this.ViewRealIncomeRowChanged(this, new ViewRealIncomeRowChangeEvent(((ViewRealIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewRealIncomeRowChanging != null)) {
                    this.ViewRealIncomeRowChanging(this, new ViewRealIncomeRowChangeEvent(((ViewRealIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewRealIncomeRowDeleted != null)) {
                    this.ViewRealIncomeRowDeleted(this, new ViewRealIncomeRowChangeEvent(((ViewRealIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewRealIncomeRowDeleting != null)) {
                    this.ViewRealIncomeRowDeleting(this, new ViewRealIncomeRowChangeEvent(((ViewRealIncomeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewRealIncomeRow(ViewRealIncomeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                HRM ds = new HRM();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewRealIncomeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeesRow : System.Data.DataRow {
            
            private EmployeesDataTable tableEmployees;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployees = ((EmployeesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableEmployees.UserIdColumn]));
                }
                set {
                    this[this.tableEmployees.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.UserNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserName\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.EmployeeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.EmployeeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Birthday {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmployees.BirthdayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Birthday\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.BirthdayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JoinDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmployees.JoinDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'JoinDate\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.JoinDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableEmployees.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Marriage {
                get {
                    try {
                        return ((bool)(this[this.tableEmployees.MarriageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Marriage\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.MarriageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HealthInsuranceNo {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.HealthInsuranceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HealthInsuranceNo\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.HealthInsuranceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HealthInsuranceAddress {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.HealthInsuranceAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HealthInsuranceAddress\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.HealthInsuranceAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SocialInsuranceNo {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.SocialInsuranceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SocialInsuranceNo\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.SocialInsuranceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNo {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.AccountNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountNo\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.AccountNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.AccountNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountName\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.AccountNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CardNo {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.CardNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CardNo\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.CardNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.BankNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankName\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.BankNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentDate {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.PaymentDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.PaymentDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContractTypeId {
                get {
                    return ((int)(this[this.tableEmployees.ContractTypeIdColumn]));
                }
                set {
                    this[this.tableEmployees.ContractTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StandardLeave {
                get {
                    try {
                        return ((int)(this[this.tableEmployees.StandardLeaveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StandardLeave\' in table \'Employees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployees.StandardLeaveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRow ContractTypesRow {
                get {
                    return ((ContractTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Employees_ContractTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Employees_ContractTypes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableEmployees.UserNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableEmployees.UserNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableEmployees.EmployeeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableEmployees.EmployeeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableEmployees.PasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableEmployees.PasswordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthdayNull() {
                return this.IsNull(this.tableEmployees.BirthdayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthdayNull() {
                this[this.tableEmployees.BirthdayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableEmployees.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableEmployees.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinDateNull() {
                return this.IsNull(this.tableEmployees.JoinDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinDateNull() {
                this[this.tableEmployees.JoinDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableEmployees.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableEmployees.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarriageNull() {
                return this.IsNull(this.tableEmployees.MarriageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarriageNull() {
                this[this.tableEmployees.MarriageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthInsuranceNoNull() {
                return this.IsNull(this.tableEmployees.HealthInsuranceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthInsuranceNoNull() {
                this[this.tableEmployees.HealthInsuranceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthInsuranceAddressNull() {
                return this.IsNull(this.tableEmployees.HealthInsuranceAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthInsuranceAddressNull() {
                this[this.tableEmployees.HealthInsuranceAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSocialInsuranceNoNull() {
                return this.IsNull(this.tableEmployees.SocialInsuranceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSocialInsuranceNoNull() {
                this[this.tableEmployees.SocialInsuranceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNoNull() {
                return this.IsNull(this.tableEmployees.AccountNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNoNull() {
                this[this.tableEmployees.AccountNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableEmployees.AccountNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableEmployees.AccountNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCardNoNull() {
                return this.IsNull(this.tableEmployees.CardNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCardNoNull() {
                this[this.tableEmployees.CardNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableEmployees.BankNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableEmployees.BankNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableEmployees.PaymentDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableEmployees.PaymentDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardLeaveNull() {
                return this.IsNull(this.tableEmployees.StandardLeaveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardLeaveNull() {
                this[this.tableEmployees.StandardLeaveColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow[] GetEmployeeDeptPositionRows() {
                return ((EmployeeDeptPositionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EmployeeDeptPosition_Employees"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow[] GetCoefficientRows() {
                return ((CoefficientRow[])(base.GetChildRows(this.Table.ChildRelations["Employees_Coefficient"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow[] GetTimeKeepingRows() {
                return ((TimeKeepingRow[])(base.GetChildRows(this.Table.ChildRelations["Employees_TimeKeeping"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow[] GetIncomeMonthRows() {
                return ((IncomeMonthRow[])(base.GetChildRows(this.Table.ChildRelations["Employees_IncomeMonth"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DepartmentsRow : System.Data.DataRow {
            
            private DepartmentsDataTable tableDepartments;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDepartments = ((DepartmentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentId {
                get {
                    return ((int)(this[this.tableDepartments.DepartmentIdColumn]));
                }
                set {
                    this[this.tableDepartments.DepartmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    try {
                        return ((string)(this[this.tableDepartments.DepartmentNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentName\' in table \'Departments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartments.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableDepartments.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Departments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartments.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNameNull() {
                return this.IsNull(this.tableDepartments.DepartmentNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNameNull() {
                this[this.tableDepartments.DepartmentNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableDepartments.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableDepartments.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow[] GetEmployeeDeptPositionRows() {
                return ((EmployeeDeptPositionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EmployeeDeptPosition_Departments"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow[] GetDeptPositionRows() {
                return ((DeptPositionRow[])(base.GetChildRows(this.Table.ChildRelations["Departments_DeptPosition"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContractTypesRow : System.Data.DataRow {
            
            private ContractTypesDataTable tableContractTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContractTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContractTypes = ((ContractTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContractTypeId {
                get {
                    return ((int)(this[this.tableContractTypes.ContractTypeIdColumn]));
                }
                set {
                    this[this.tableContractTypes.ContractTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractTypeName {
                get {
                    try {
                        return ((string)(this[this.tableContractTypes.ContractTypeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractTypeName\' in table \'ContractTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContractTypes.ContractTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableContractTypes.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ContractTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContractTypes.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractTypeNameNull() {
                return this.IsNull(this.tableContractTypes.ContractTypeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractTypeNameNull() {
                this[this.tableContractTypes.ContractTypeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableContractTypes.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableContractTypes.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow[] GetEmployeesRows() {
                return ((EmployeesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Employees_ContractTypes"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PositionsRow : System.Data.DataRow {
            
            private PositionsDataTable tablePositions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PositionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePositions = ((PositionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionId {
                get {
                    return ((int)(this[this.tablePositions.PositionIdColumn]));
                }
                set {
                    this[this.tablePositions.PositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionName {
                get {
                    try {
                        return ((string)(this[this.tablePositions.PositionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionName\' in table \'Positions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePositions.PositionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePositions.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Positions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePositions.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNameNull() {
                return this.IsNull(this.tablePositions.PositionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNameNull() {
                this[this.tablePositions.PositionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePositions.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablePositions.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow[] GetEmployeeDeptPositionRows() {
                return ((EmployeeDeptPositionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EmployeeDeptPosition_Positions"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow[] GetDeptPositionRows() {
                return ((DeptPositionRow[])(base.GetChildRows(this.Table.ChildRelations["Positions_DeptPosition"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeDeptPositionRow : System.Data.DataRow {
            
            private EmployeeDeptPositionDataTable tableEmployeeDeptPosition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDeptPositionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeDeptPosition = ((EmployeeDeptPositionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeDeptPositionId {
                get {
                    return ((int)(this[this.tableEmployeeDeptPosition.EmployeeDeptPositionIdColumn]));
                }
                set {
                    this[this.tableEmployeeDeptPosition.EmployeeDeptPositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeDeptPosition.UserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserId\' in table \'EmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDeptPosition.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentId {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeDeptPosition.DepartmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentId\' in table \'EmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDeptPosition.DepartmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionId {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeDeptPosition.PositionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionId\' in table \'EmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDeptPosition.PositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow DepartmentsRow {
                get {
                    return ((DepartmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_EmployeeDeptPosition_Departments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EmployeeDeptPosition_Departments"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow EmployeesRow {
                get {
                    return ((EmployeesRow)(this.GetParentRow(this.Table.ParentRelations["FK_EmployeeDeptPosition_Employees"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EmployeeDeptPosition_Employees"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow PositionsRow {
                get {
                    return ((PositionsRow)(this.GetParentRow(this.Table.ParentRelations["FK_EmployeeDeptPosition_Positions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EmployeeDeptPosition_Positions"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableEmployeeDeptPosition.UserIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableEmployeeDeptPosition.UserIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentIdNull() {
                return this.IsNull(this.tableEmployeeDeptPosition.DepartmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentIdNull() {
                this[this.tableEmployeeDeptPosition.DepartmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionIdNull() {
                return this.IsNull(this.tableEmployeeDeptPosition.PositionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionIdNull() {
                this[this.tableEmployeeDeptPosition.PositionIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TimeKeepingRow : System.Data.DataRow {
            
            private TimeKeepingDataTable tableTimeKeeping;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimeKeepingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeKeeping = ((TimeKeepingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TimeKeepingId {
                get {
                    return ((long)(this[this.tableTimeKeeping.TimeKeepingIdColumn]));
                }
                set {
                    this[this.tableTimeKeeping.TimeKeepingIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeKeepingTypeId {
                get {
                    return ((int)(this[this.tableTimeKeeping.TimeKeepingTypeIdColumn]));
                }
                set {
                    this[this.tableTimeKeeping.TimeKeepingTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableTimeKeeping.UserIdColumn]));
                }
                set {
                    this[this.tableTimeKeeping.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableTimeKeeping.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'TimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeKeeping.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeKeepingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTimeKeeping.TimeKeepingDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeKeepingDate\' in table \'TimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeKeeping.TimeKeepingDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Lock {
                get {
                    try {
                        return ((bool)(this[this.tableTimeKeeping.LockColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lock\' in table \'TimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeKeeping.LockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow EmployeesRow {
                get {
                    return ((EmployeesRow)(this.GetParentRow(this.Table.ParentRelations["Employees_TimeKeeping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Employees_TimeKeeping"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRow TimeKeepingTypeRow {
                get {
                    return ((TimeKeepingTypeRow)(this.GetParentRow(this.Table.ParentRelations["TimeKeepingType_TimeKeeping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeKeepingType_TimeKeeping"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableTimeKeeping.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableTimeKeeping.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeKeepingDateNull() {
                return this.IsNull(this.tableTimeKeeping.TimeKeepingDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeKeepingDateNull() {
                this[this.tableTimeKeeping.TimeKeepingDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockNull() {
                return this.IsNull(this.tableTimeKeeping.LockColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockNull() {
                this[this.tableTimeKeeping.LockColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Sel_DepartmentTimeKeepingRow : System.Data.DataRow {
            
            private Sel_DepartmentTimeKeepingDataTable tableSel_DepartmentTimeKeeping;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Sel_DepartmentTimeKeepingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSel_DepartmentTimeKeeping = ((Sel_DepartmentTimeKeepingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableSel_DepartmentTimeKeeping.UserIdColumn]));
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableSel_DepartmentTimeKeeping.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionName {
                get {
                    try {
                        return ((string)(this[this.tableSel_DepartmentTimeKeeping.PositionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionName\' in table \'Sel_DepartmentTimeKeeping\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.PositionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.XColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'X\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.XColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int O {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.OColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'O\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.OColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TS {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.TSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TS\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.TSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TNLD {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.TNLDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TNLD\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.TNLDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int F {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.FColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'F\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.FColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FDB {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.FDBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FDB\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.FDBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HO {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.HOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HO\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.HOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int K {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.KColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'K\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.KColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TBN {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.TBNColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TBN\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.TBNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TBD {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.TBDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TBD\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.TBDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LD {
                get {
                    try {
                        return ((int)(this[this.tableSel_DepartmentTimeKeeping.LDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LD\' in table \'Sel_DepartmentTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_DepartmentTimeKeeping.LDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableSel_DepartmentTimeKeeping.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNameNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.PositionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNameNull() {
                this[this.tableSel_DepartmentTimeKeeping.PositionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.XColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXNull() {
                this[this.tableSel_DepartmentTimeKeeping.XColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsONull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.OColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetONull() {
                this[this.tableSel_DepartmentTimeKeeping.OColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTSNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.TSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTSNull() {
                this[this.tableSel_DepartmentTimeKeeping.TSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTNLDNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.TNLDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTNLDNull() {
                this[this.tableSel_DepartmentTimeKeeping.TNLDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.FColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNull() {
                this[this.tableSel_DepartmentTimeKeeping.FColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFDBNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.FDBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFDBNull() {
                this[this.tableSel_DepartmentTimeKeeping.FDBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHONull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.HOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHONull() {
                this[this.tableSel_DepartmentTimeKeeping.HOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.KColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNull() {
                this[this.tableSel_DepartmentTimeKeeping.KColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTBNNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.TBNColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTBNNull() {
                this[this.tableSel_DepartmentTimeKeeping.TBNColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTBDNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.TBDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTBDNull() {
                this[this.tableSel_DepartmentTimeKeeping.TBDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLDNull() {
                return this.IsNull(this.tableSel_DepartmentTimeKeeping.LDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLDNull() {
                this[this.tableSel_DepartmentTimeKeeping.LDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeptPositionRow : System.Data.DataRow {
            
            private DeptPositionDataTable tableDeptPosition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeptPositionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeptPosition = ((DeptPositionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeptPositionId {
                get {
                    return ((int)(this[this.tableDeptPosition.DeptPositionIdColumn]));
                }
                set {
                    this[this.tableDeptPosition.DeptPositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentId {
                get {
                    return ((int)(this[this.tableDeptPosition.DepartmentIdColumn]));
                }
                set {
                    this[this.tableDeptPosition.DepartmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionId {
                get {
                    return ((int)(this[this.tableDeptPosition.PositionIdColumn]));
                }
                set {
                    this[this.tableDeptPosition.PositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow DepartmentsRow {
                get {
                    return ((DepartmentsRow)(this.GetParentRow(this.Table.ParentRelations["Departments_DeptPosition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Departments_DeptPosition"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow PositionsRow {
                get {
                    return ((PositionsRow)(this.GetParentRow(this.Table.ParentRelations["Positions_DeptPosition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Positions_DeptPosition"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Sel_PersonalTimeKeepingRow : System.Data.DataRow {
            
            private Sel_PersonalTimeKeepingDataTable tableSel_PersonalTimeKeeping;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Sel_PersonalTimeKeepingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSel_PersonalTimeKeeping = ((Sel_PersonalTimeKeepingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeKeepingId {
                get {
                    try {
                        return ((int)(this[this.tableSel_PersonalTimeKeeping.TimeKeepingIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeKeepingId\' in table \'Sel_PersonalTimeKeeping\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.TimeKeepingIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkdayTypeId {
                get {
                    try {
                        return ((int)(this[this.tableSel_PersonalTimeKeeping.WorkdayTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkdayTypeId\' in table \'Sel_PersonalTimeKeeping\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.WorkdayTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableSel_PersonalTimeKeeping.UserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserId\' in table \'Sel_PersonalTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableSel_PersonalTimeKeeping.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'Sel_PersonalTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeKeepingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSel_PersonalTimeKeeping.TimeKeepingDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeKeepingDate\' in table \'Sel_PersonalTimeKeeping\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.TimeKeepingDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Lock {
                get {
                    try {
                        return ((bool)(this[this.tableSel_PersonalTimeKeeping.LockColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lock\' in table \'Sel_PersonalTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.LockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkdayCode {
                get {
                    try {
                        return ((string)(this[this.tableSel_PersonalTimeKeeping.WorkdayCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WorkdayCode\' in table \'Sel_PersonalTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.WorkdayCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSel_PersonalTimeKeeping.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Sel_PersonalTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableSel_PersonalTimeKeeping.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'Sel_PersonalTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSel_PersonalTimeKeeping.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeKeepingIdNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.TimeKeepingIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeKeepingIdNull() {
                this[this.tableSel_PersonalTimeKeeping.TimeKeepingIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkdayTypeIdNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.WorkdayTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkdayTypeIdNull() {
                this[this.tableSel_PersonalTimeKeeping.WorkdayTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.UserIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableSel_PersonalTimeKeeping.UserIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableSel_PersonalTimeKeeping.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeKeepingDateNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.TimeKeepingDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeKeepingDateNull() {
                this[this.tableSel_PersonalTimeKeeping.TimeKeepingDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.LockColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockNull() {
                this[this.tableSel_PersonalTimeKeeping.LockColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkdayCodeNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.WorkdayCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkdayCodeNull() {
                this[this.tableSel_PersonalTimeKeeping.WorkdayCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSel_PersonalTimeKeeping.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableSel_PersonalTimeKeeping.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableSel_PersonalTimeKeeping.FullNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoefficientTypeRow : System.Data.DataRow {
            
            private CoefficientTypeDataTable tableCoefficientType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoefficientTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoefficientType = ((CoefficientTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoefficientType {
                get {
                    return ((int)(this[this.tableCoefficientType.CoefficientTypeColumn]));
                }
                set {
                    this[this.tableCoefficientType.CoefficientTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoefficientName {
                get {
                    try {
                        return ((string)(this[this.tableCoefficientType.CoefficientNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CoefficientName\' in table \'CoefficientType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoefficientType.CoefficientNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCoefficientType.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'CoefficientType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoefficientType.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoefficientNameNull() {
                return this.IsNull(this.tableCoefficientType.CoefficientNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoefficientNameNull() {
                this[this.tableCoefficientType.CoefficientNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCoefficientType.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCoefficientType.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow[] GetCoefficientRows() {
                return ((CoefficientRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Coefficient_CoefficientType"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoefficientRow : System.Data.DataRow {
            
            private CoefficientDataTable tableCoefficient;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoefficientRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoefficient = ((CoefficientDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CoefficientId {
                get {
                    return ((long)(this[this.tableCoefficient.CoefficientIdColumn]));
                }
                set {
                    this[this.tableCoefficient.CoefficientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableCoefficient.UserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserId\' in table \'Coefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoefficient.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoefficientType {
                get {
                    try {
                        return ((int)(this[this.tableCoefficient.CoefficientTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CoefficientType\' in table \'Coefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoefficient.CoefficientTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Value {
                get {
                    try {
                        return ((double)(this[this.tableCoefficient.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'Coefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoefficient.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCoefficient.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'Coefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoefficient.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRow CoefficientTypeRow {
                get {
                    return ((CoefficientTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Coefficient_CoefficientType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Coefficient_CoefficientType"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow EmployeesRow {
                get {
                    return ((EmployeesRow)(this.GetParentRow(this.Table.ParentRelations["Employees_Coefficient"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Employees_Coefficient"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableCoefficient.UserIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableCoefficient.UserIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoefficientTypeNull() {
                return this.IsNull(this.tableCoefficient.CoefficientTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoefficientTypeNull() {
                this[this.tableCoefficient.CoefficientTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableCoefficient.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableCoefficient.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableCoefficient.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableCoefficient.DateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewTimeKeepingRow : System.Data.DataRow {
            
            private ViewTimeKeepingDataTable tableViewTimeKeeping;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewTimeKeepingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewTimeKeeping = ((ViewTimeKeepingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeKeepingTypeId {
                get {
                    return ((int)(this[this.tableViewTimeKeeping.TimeKeepingTypeIdColumn]));
                }
                set {
                    this[this.tableViewTimeKeeping.TimeKeepingTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableViewTimeKeeping.UserIdColumn]));
                }
                set {
                    this[this.tableViewTimeKeeping.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Value {
                get {
                    try {
                        return ((int)(this[this.tableViewTimeKeeping.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ViewTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTimeKeeping.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableViewTimeKeeping.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ViewTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTimeKeeping.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeKeepingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewTimeKeeping.TimeKeepingDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeKeepingDate\' in table \'ViewTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTimeKeeping.TimeKeepingDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Lock {
                get {
                    try {
                        return ((bool)(this[this.tableViewTimeKeeping.LockColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lock\' in table \'ViewTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTimeKeeping.LockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Type {
                get {
                    try {
                        return ((bool)(this[this.tableViewTimeKeeping.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'ViewTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTimeKeeping.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TimeKeepingId {
                get {
                    return ((long)(this[this.tableViewTimeKeeping.TimeKeepingIdColumn]));
                }
                set {
                    this[this.tableViewTimeKeeping.TimeKeepingIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeKeepingCode {
                get {
                    try {
                        return ((string)(this[this.tableViewTimeKeeping.TimeKeepingCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeKeepingCode\' in table \'ViewTimeKeeping\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTimeKeeping.TimeKeepingCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableViewTimeKeeping.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableViewTimeKeeping.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableViewTimeKeeping.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableViewTimeKeeping.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeKeepingDateNull() {
                return this.IsNull(this.tableViewTimeKeeping.TimeKeepingDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeKeepingDateNull() {
                this[this.tableViewTimeKeeping.TimeKeepingDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockNull() {
                return this.IsNull(this.tableViewTimeKeeping.LockColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockNull() {
                this[this.tableViewTimeKeeping.LockColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableViewTimeKeeping.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableViewTimeKeeping.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeKeepingCodeNull() {
                return this.IsNull(this.tableViewTimeKeeping.TimeKeepingCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeKeepingCodeNull() {
                this[this.tableViewTimeKeeping.TimeKeepingCodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewCoefficientRow : System.Data.DataRow {
            
            private ViewCoefficientDataTable tableViewCoefficient;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewCoefficientRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewCoefficient = ((ViewCoefficientDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoefficientId {
                get {
                    return ((int)(this[this.tableViewCoefficient.CoefficientIdColumn]));
                }
                set {
                    this[this.tableViewCoefficient.CoefficientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoefficientType {
                get {
                    try {
                        return ((int)(this[this.tableViewCoefficient.CoefficientTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CoefficientType\' in table \'ViewCoefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewCoefficient.CoefficientTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableViewCoefficient.UserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserId\' in table \'ViewCoefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewCoefficient.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoefficientName {
                get {
                    try {
                        return ((string)(this[this.tableViewCoefficient.CoefficientNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CoefficientName\' in table \'ViewCoefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewCoefficient.CoefficientNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Value {
                get {
                    try {
                        return ((double)(this[this.tableViewCoefficient.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ViewCoefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewCoefficient.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableViewCoefficient.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ViewCoefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewCoefficient.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewCoefficient.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'ViewCoefficient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewCoefficient.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoefficientTypeNull() {
                return this.IsNull(this.tableViewCoefficient.CoefficientTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoefficientTypeNull() {
                this[this.tableViewCoefficient.CoefficientTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableViewCoefficient.UserIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableViewCoefficient.UserIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoefficientNameNull() {
                return this.IsNull(this.tableViewCoefficient.CoefficientNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoefficientNameNull() {
                this[this.tableViewCoefficient.CoefficientNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableViewCoefficient.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableViewCoefficient.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableViewCoefficient.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableViewCoefficient.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableViewCoefficient.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableViewCoefficient.DateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeIncomeRow : System.Data.DataRow {
            
            private EmployeeIncomeDataTable tableEmployeeIncome;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeIncomeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeIncome = ((EmployeeIncomeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeIncomeId {
                get {
                    return ((int)(this[this.tableEmployeeIncome.EmployeeIncomeIdColumn]));
                }
                set {
                    this[this.tableEmployeeIncome.EmployeeIncomeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeIncome.UserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserId\' in table \'EmployeeIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeIncome.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmployeeIncome.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'EmployeeIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeIncome.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Inc {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeIncome.Total_IncColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Inc\' in table \'EmployeeIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeIncome.Total_IncColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Cntr {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeIncome.Total_CntrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Cntr\' in table \'EmployeeIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeIncome.Total_CntrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Inc_LK {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeIncome.Total_Inc_LKColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Inc_LK\' in table \'EmployeeIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeIncome.Total_Inc_LKColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Cntr_LK {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeIncome.Total_Cntr_LKColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Cntr_LK\' in table \'EmployeeIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeIncome.Total_Cntr_LKColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIdNull() {
                return this.IsNull(this.tableEmployeeIncome.UserIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIdNull() {
                this[this.tableEmployeeIncome.UserIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableEmployeeIncome.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableEmployeeIncome.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_IncNull() {
                return this.IsNull(this.tableEmployeeIncome.Total_IncColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_IncNull() {
                this[this.tableEmployeeIncome.Total_IncColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_CntrNull() {
                return this.IsNull(this.tableEmployeeIncome.Total_CntrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_CntrNull() {
                this[this.tableEmployeeIncome.Total_CntrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Inc_LKNull() {
                return this.IsNull(this.tableEmployeeIncome.Total_Inc_LKColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Inc_LKNull() {
                this[this.tableEmployeeIncome.Total_Inc_LKColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Cntr_LKNull() {
                return this.IsNull(this.tableEmployeeIncome.Total_Cntr_LKColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Cntr_LKNull() {
                this[this.tableEmployeeIncome.Total_Cntr_LKColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IncomeMonthRow : System.Data.DataRow {
            
            private IncomeMonthDataTable tableIncomeMonth;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncomeMonthRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIncomeMonth = ((IncomeMonthDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long IncomeMonthId {
                get {
                    return ((long)(this[this.tableIncomeMonth.IncomeMonthIdColumn]));
                }
                set {
                    this[this.tableIncomeMonth.IncomeMonthIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncomeTypeId {
                get {
                    return ((int)(this[this.tableIncomeMonth.IncomeTypeIdColumn]));
                }
                set {
                    this[this.tableIncomeMonth.IncomeTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableIncomeMonth.UserIdColumn]));
                }
                set {
                    this[this.tableIncomeMonth.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tableIncomeMonth.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'IncomeMonth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeMonth.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Lk {
                get {
                    try {
                        return ((decimal)(this[this.tableIncomeMonth.LkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lk\' in table \'IncomeMonth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeMonth.LkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableIncomeMonth.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'IncomeMonth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeMonth.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Lock {
                get {
                    try {
                        return ((bool)(this[this.tableIncomeMonth.LockColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lock\' in table \'IncomeMonth\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeMonth.LockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow EmployeesRow {
                get {
                    return ((EmployeesRow)(this.GetParentRow(this.Table.ParentRelations["Employees_IncomeMonth"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Employees_IncomeMonth"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRow IncomeTypeRow {
                get {
                    return ((IncomeTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_IncomeMonth_IncomeType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IncomeMonth_IncomeType"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableIncomeMonth.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableIncomeMonth.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLkNull() {
                return this.IsNull(this.tableIncomeMonth.LkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLkNull() {
                this[this.tableIncomeMonth.LkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableIncomeMonth.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableIncomeMonth.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockNull() {
                return this.IsNull(this.tableIncomeMonth.LockColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockNull() {
                this[this.tableIncomeMonth.LockColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TimeKeepingTypeRow : System.Data.DataRow {
            
            private TimeKeepingTypeDataTable tableTimeKeepingType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimeKeepingTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeKeepingType = ((TimeKeepingTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimeKeepingTypeId {
                get {
                    return ((int)(this[this.tableTimeKeepingType.TimeKeepingTypeIdColumn]));
                }
                set {
                    this[this.tableTimeKeepingType.TimeKeepingTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeKeepingCode {
                get {
                    try {
                        return ((string)(this[this.tableTimeKeepingType.TimeKeepingCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimeKeepingCode\' in table \'TimeKeepingType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeKeepingType.TimeKeepingCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Type {
                get {
                    try {
                        return ((bool)(this[this.tableTimeKeepingType.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'TimeKeepingType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeKeepingType.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTimeKeepingType.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'TimeKeepingType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeKeepingType.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeKeepingCodeNull() {
                return this.IsNull(this.tableTimeKeepingType.TimeKeepingCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeKeepingCodeNull() {
                this[this.tableTimeKeepingType.TimeKeepingCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableTimeKeepingType.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableTimeKeepingType.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTimeKeepingType.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableTimeKeepingType.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow[] GetTimeKeepingRows() {
                return ((TimeKeepingRow[])(base.GetChildRows(this.Table.ChildRelations["TimeKeepingType_TimeKeeping"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewEmployeeDeptPositionRow : System.Data.DataRow {
            
            private ViewEmployeeDeptPositionDataTable tableViewEmployeeDeptPosition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewEmployeeDeptPositionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewEmployeeDeptPosition = ((ViewEmployeeDeptPositionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableViewEmployeeDeptPosition.UserIdColumn]));
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.UserNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserName\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.EmployeeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'ViewEmployeeDeptPosition\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.EmployeeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.PositionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionName\' in table \'ViewEmployeeDeptPosition\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.PositionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.DepartmentNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentName\' in table \'ViewEmployeeDeptPosition\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Birthday {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeDeptPosition.BirthdayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Birthday\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.BirthdayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JoinDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeDeptPosition.JoinDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'JoinDate\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.JoinDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeDeptPosition.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Marriage {
                get {
                    try {
                        return ((bool)(this[this.tableViewEmployeeDeptPosition.MarriageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Marriage\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.MarriageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HealthInsuranceNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.HealthInsuranceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HealthInsuranceNo\' in table \'ViewEmployeeDeptPosition\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.HealthInsuranceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HealthInsuranceAddress {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.HealthInsuranceAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HealthInsuranceAddress\' in table \'ViewEmployeeDeptPosition\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.HealthInsuranceAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SocialInsuranceNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.SocialInsuranceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SocialInsuranceNo\' in table \'ViewEmployeeDeptPosition\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.SocialInsuranceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.AccountNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountNo\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.AccountNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.AccountNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountName\' in table \'ViewEmployeeDeptPosition\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.AccountNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CardNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.CardNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CardNo\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.CardNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.BankNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankName\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.BankNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PaymentDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeDeptPosition.PaymentDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'ViewEmployeeDeptPosition\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.PaymentDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StandardLeave {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeDeptPosition.StandardLeaveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StandardLeave\' in table \'ViewEmployeeDeptPosition\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.StandardLeaveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentId {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeDeptPosition.DepartmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentId\' in table \'ViewEmployeeDeptPosition\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.DepartmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionId {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeDeptPosition.PositionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionId\' in table \'ViewEmployeeDeptPosition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.PositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.ContractTypeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractTypeCode\' in table \'ViewEmployeeDeptPosition\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.ContractTypeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractTypeName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeDeptPosition.ContractTypeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractTypeName\' in table \'ViewEmployeeDeptPosition\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeDeptPosition.ContractTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableViewEmployeeDeptPosition.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.UserNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableViewEmployeeDeptPosition.UserNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.EmployeeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableViewEmployeeDeptPosition.EmployeeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.PasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableViewEmployeeDeptPosition.PasswordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.PositionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNameNull() {
                this[this.tableViewEmployeeDeptPosition.PositionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.DepartmentNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNameNull() {
                this[this.tableViewEmployeeDeptPosition.DepartmentNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthdayNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.BirthdayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthdayNull() {
                this[this.tableViewEmployeeDeptPosition.BirthdayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinDateNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.JoinDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinDateNull() {
                this[this.tableViewEmployeeDeptPosition.JoinDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableViewEmployeeDeptPosition.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarriageNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.MarriageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarriageNull() {
                this[this.tableViewEmployeeDeptPosition.MarriageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthInsuranceNoNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.HealthInsuranceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthInsuranceNoNull() {
                this[this.tableViewEmployeeDeptPosition.HealthInsuranceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthInsuranceAddressNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.HealthInsuranceAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthInsuranceAddressNull() {
                this[this.tableViewEmployeeDeptPosition.HealthInsuranceAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSocialInsuranceNoNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.SocialInsuranceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSocialInsuranceNoNull() {
                this[this.tableViewEmployeeDeptPosition.SocialInsuranceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNoNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.AccountNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNoNull() {
                this[this.tableViewEmployeeDeptPosition.AccountNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.AccountNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableViewEmployeeDeptPosition.AccountNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCardNoNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.CardNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCardNoNull() {
                this[this.tableViewEmployeeDeptPosition.CardNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.BankNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableViewEmployeeDeptPosition.BankNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.PaymentDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableViewEmployeeDeptPosition.PaymentDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardLeaveNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.StandardLeaveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardLeaveNull() {
                this[this.tableViewEmployeeDeptPosition.StandardLeaveColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentIdNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.DepartmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentIdNull() {
                this[this.tableViewEmployeeDeptPosition.DepartmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionIdNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.PositionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionIdNull() {
                this[this.tableViewEmployeeDeptPosition.PositionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractTypeCodeNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.ContractTypeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractTypeCodeNull() {
                this[this.tableViewEmployeeDeptPosition.ContractTypeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractTypeNameNull() {
                return this.IsNull(this.tableViewEmployeeDeptPosition.ContractTypeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractTypeNameNull() {
                this[this.tableViewEmployeeDeptPosition.ContractTypeNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewUserRolesRow : System.Data.DataRow {
            
            private ViewUserRolesDataTable tableViewUserRoles;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewUserRolesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewUserRoles = ((ViewUserRolesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableViewUserRoles.UserIdColumn]));
                }
                set {
                    this[this.tableViewUserRoles.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableViewUserRoles.UserNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserName\' in table \'ViewUserRoles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewUserRoles.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableViewUserRoles.EmployeeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'ViewUserRoles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewUserRoles.EmployeeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableViewUserRoles.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ViewUserRoles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewUserRoles.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RoleId {
                get {
                    return ((int)(this[this.tableViewUserRoles.RoleIdColumn]));
                }
                set {
                    this[this.tableViewUserRoles.RoleIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoleName {
                get {
                    try {
                        return ((string)(this[this.tableViewUserRoles.RoleNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RoleName\' in table \'ViewUserRoles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewUserRoles.RoleNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RoleLevel {
                get {
                    try {
                        return ((int)(this[this.tableViewUserRoles.RoleLevelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RoleLevel\' in table \'ViewUserRoles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewUserRoles.RoleLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableViewUserRoles.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ViewUserRoles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewUserRoles.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableViewUserRoles.UserNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableViewUserRoles.UserNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableViewUserRoles.EmployeeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableViewUserRoles.EmployeeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableViewUserRoles.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableViewUserRoles.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoleNameNull() {
                return this.IsNull(this.tableViewUserRoles.RoleNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoleNameNull() {
                this[this.tableViewUserRoles.RoleNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoleLevelNull() {
                return this.IsNull(this.tableViewUserRoles.RoleLevelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoleLevelNull() {
                this[this.tableViewUserRoles.RoleLevelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableViewUserRoles.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableViewUserRoles.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IncomeTypeRow : System.Data.DataRow {
            
            private IncomeTypeDataTable tableIncomeType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IncomeTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIncomeType = ((IncomeTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncomeTypeId {
                get {
                    return ((int)(this[this.tableIncomeType.IncomeTypeIdColumn]));
                }
                set {
                    this[this.tableIncomeType.IncomeTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomeName {
                get {
                    try {
                        return ((string)(this[this.tableIncomeType.IncomeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IncomeName\' in table \'IncomeType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeType.IncomeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableIncomeType.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'IncomeType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeType.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Type {
                get {
                    try {
                        return ((bool)(this[this.tableIncomeType.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'IncomeType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableIncomeType.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeNameNull() {
                return this.IsNull(this.tableIncomeType.IncomeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeNameNull() {
                this[this.tableIncomeType.IncomeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableIncomeType.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableIncomeType.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableIncomeType.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableIncomeType.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow[] GetIncomeMonthRows() {
                return ((IncomeMonthRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IncomeMonth_IncomeType"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewIncomeRow : System.Data.DataRow {
            
            private ViewIncomeDataTable tableViewIncome;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewIncomeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewIncome = ((ViewIncomeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long IncomeMonthId {
                get {
                    return ((long)(this[this.tableViewIncome.IncomeMonthIdColumn]));
                }
                set {
                    this[this.tableViewIncome.IncomeMonthIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncomeTypeId {
                get {
                    return ((int)(this[this.tableViewIncome.IncomeTypeIdColumn]));
                }
                set {
                    this[this.tableViewIncome.IncomeTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableViewIncome.UserIdColumn]));
                }
                set {
                    this[this.tableViewIncome.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomeName {
                get {
                    try {
                        return ((string)(this[this.tableViewIncome.IncomeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IncomeName\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.IncomeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tableViewIncome.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Lk {
                get {
                    try {
                        return ((decimal)(this[this.tableViewIncome.LkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lk\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.LkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Type {
                get {
                    try {
                        return ((bool)(this[this.tableViewIncome.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewIncome.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Lock {
                get {
                    try {
                        return ((bool)(this[this.tableViewIncome.LockColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lock\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.LockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableViewIncome.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ViewIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewIncome.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeNameNull() {
                return this.IsNull(this.tableViewIncome.IncomeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeNameNull() {
                this[this.tableViewIncome.IncomeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableViewIncome.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableViewIncome.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLkNull() {
                return this.IsNull(this.tableViewIncome.LkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLkNull() {
                this[this.tableViewIncome.LkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableViewIncome.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableViewIncome.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableViewIncome.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableViewIncome.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockNull() {
                return this.IsNull(this.tableViewIncome.LockColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockNull() {
                this[this.tableViewIncome.LockColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableViewIncome.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableViewIncome.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewEmployeeIncomesRow : System.Data.DataRow {
            
            private ViewEmployeeIncomesDataTable tableViewEmployeeIncomes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewEmployeeIncomesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewEmployeeIncomes = ((ViewEmployeeIncomesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableViewEmployeeIncomes.UserIdColumn]));
                }
                set {
                    this[this.tableViewEmployeeIncomes.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.UserNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserName\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.EmployeeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.EmployeeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Birthday {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeIncomes.BirthdayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Birthday\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.BirthdayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JoinDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeIncomes.JoinDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'JoinDate\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.JoinDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeIncomes.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Marriage {
                get {
                    try {
                        return ((bool)(this[this.tableViewEmployeeIncomes.MarriageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Marriage\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.MarriageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HealthInsuranceNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.HealthInsuranceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HealthInsuranceNo\' in table \'ViewEmployeeIncomes\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.HealthInsuranceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HealthInsuranceAddress {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.HealthInsuranceAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HealthInsuranceAddress\' in table \'ViewEmployeeIncomes\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.HealthInsuranceAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SocialInsuranceNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.SocialInsuranceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SocialInsuranceNo\' in table \'ViewEmployeeIncomes\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.SocialInsuranceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.AccountNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountNo\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.AccountNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.AccountNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountName\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.AccountNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CardNo {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.CardNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CardNo\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.CardNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.BankNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankName\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.BankNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PaymentDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeIncomes.PaymentDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.PaymentDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContractTypeId {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeIncomes.ContractTypeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractTypeId\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.ContractTypeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StandardLeave {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeIncomes.StandardLeaveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StandardLeave\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.StandardLeaveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentId {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeIncomes.DepartmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentId\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.DepartmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionId {
                get {
                    try {
                        return ((int)(this[this.tableViewEmployeeIncomes.PositionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionId\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.PositionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.DepartmentNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentName\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.PositionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionName\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.PositionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewEmployeeIncomes.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Inc {
                get {
                    try {
                        return ((decimal)(this[this.tableViewEmployeeIncomes.Total_IncColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Inc\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.Total_IncColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Cntr {
                get {
                    try {
                        return ((decimal)(this[this.tableViewEmployeeIncomes.Total_CntrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Cntr\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.Total_CntrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Inc_LK {
                get {
                    try {
                        return ((decimal)(this[this.tableViewEmployeeIncomes.Total_Inc_LKColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Inc_LK\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.Total_Inc_LKColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Cntr_LK {
                get {
                    try {
                        return ((decimal)(this[this.tableViewEmployeeIncomes.Total_Cntr_LKColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total_Cntr_LK\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.Total_Cntr_LKColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.ContractTypeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractTypeCode\' in table \'ViewEmployeeIncomes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.ContractTypeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractTypeName {
                get {
                    try {
                        return ((string)(this[this.tableViewEmployeeIncomes.ContractTypeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContractTypeName\' in table \'ViewEmployeeIncomes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.ContractTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RealIncome {
                get {
                    try {
                        return ((decimal)(this[this.tableViewEmployeeIncomes.RealIncomeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RealIncome\' in table \'ViewEmployeeIncomes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewEmployeeIncomes.RealIncomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.UserNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableViewEmployeeIncomes.UserNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.EmployeeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableViewEmployeeIncomes.EmployeeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.PasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableViewEmployeeIncomes.PasswordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableViewEmployeeIncomes.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthdayNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.BirthdayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthdayNull() {
                this[this.tableViewEmployeeIncomes.BirthdayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinDateNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.JoinDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinDateNull() {
                this[this.tableViewEmployeeIncomes.JoinDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableViewEmployeeIncomes.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarriageNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.MarriageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarriageNull() {
                this[this.tableViewEmployeeIncomes.MarriageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthInsuranceNoNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.HealthInsuranceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthInsuranceNoNull() {
                this[this.tableViewEmployeeIncomes.HealthInsuranceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthInsuranceAddressNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.HealthInsuranceAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthInsuranceAddressNull() {
                this[this.tableViewEmployeeIncomes.HealthInsuranceAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSocialInsuranceNoNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.SocialInsuranceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSocialInsuranceNoNull() {
                this[this.tableViewEmployeeIncomes.SocialInsuranceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNoNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.AccountNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNoNull() {
                this[this.tableViewEmployeeIncomes.AccountNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.AccountNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableViewEmployeeIncomes.AccountNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCardNoNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.CardNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCardNoNull() {
                this[this.tableViewEmployeeIncomes.CardNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.BankNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableViewEmployeeIncomes.BankNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.PaymentDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableViewEmployeeIncomes.PaymentDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractTypeIdNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.ContractTypeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractTypeIdNull() {
                this[this.tableViewEmployeeIncomes.ContractTypeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardLeaveNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.StandardLeaveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardLeaveNull() {
                this[this.tableViewEmployeeIncomes.StandardLeaveColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentIdNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.DepartmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentIdNull() {
                this[this.tableViewEmployeeIncomes.DepartmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionIdNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.PositionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionIdNull() {
                this[this.tableViewEmployeeIncomes.PositionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.DepartmentNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNameNull() {
                this[this.tableViewEmployeeIncomes.DepartmentNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.PositionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNameNull() {
                this[this.tableViewEmployeeIncomes.PositionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableViewEmployeeIncomes.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_IncNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.Total_IncColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_IncNull() {
                this[this.tableViewEmployeeIncomes.Total_IncColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_CntrNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.Total_CntrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_CntrNull() {
                this[this.tableViewEmployeeIncomes.Total_CntrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Inc_LKNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.Total_Inc_LKColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Inc_LKNull() {
                this[this.tableViewEmployeeIncomes.Total_Inc_LKColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_Cntr_LKNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.Total_Cntr_LKColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_Cntr_LKNull() {
                this[this.tableViewEmployeeIncomes.Total_Cntr_LKColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractTypeCodeNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.ContractTypeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractTypeCodeNull() {
                this[this.tableViewEmployeeIncomes.ContractTypeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractTypeNameNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.ContractTypeNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractTypeNameNull() {
                this[this.tableViewEmployeeIncomes.ContractTypeNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealIncomeNull() {
                return this.IsNull(this.tableViewEmployeeIncomes.RealIncomeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealIncomeNull() {
                this[this.tableViewEmployeeIncomes.RealIncomeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewRealIncomeRow : System.Data.DataRow {
            
            private ViewRealIncomeDataTable tableViewRealIncome;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewRealIncomeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewRealIncome = ((ViewRealIncomeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableViewRealIncome.UserIdColumn]));
                }
                set {
                    this[this.tableViewRealIncome.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableViewRealIncome.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountNo {
                get {
                    try {
                        return ((string)(this[this.tableViewRealIncome.AccountNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AccountNo\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.AccountNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CardNo {
                get {
                    try {
                        return ((string)(this[this.tableViewRealIncome.CardNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CardNo\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.CardNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RealIncome {
                get {
                    try {
                        return ((decimal)(this[this.tableViewRealIncome.RealIncomeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RealIncome\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.RealIncomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    try {
                        return ((string)(this[this.tableViewRealIncome.DepartmentNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentName\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.DepartmentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentId {
                get {
                    try {
                        return ((int)(this[this.tableViewRealIncome.DepartmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DepartmentId\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.DepartmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableViewRealIncome.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionName {
                get {
                    try {
                        return ((string)(this[this.tableViewRealIncome.PositionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PositionName\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.PositionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableViewRealIncome.EmployeeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'ViewRealIncome\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewRealIncome.EmployeeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableViewRealIncome.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableViewRealIncome.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNoNull() {
                return this.IsNull(this.tableViewRealIncome.AccountNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNoNull() {
                this[this.tableViewRealIncome.AccountNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCardNoNull() {
                return this.IsNull(this.tableViewRealIncome.CardNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCardNoNull() {
                this[this.tableViewRealIncome.CardNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealIncomeNull() {
                return this.IsNull(this.tableViewRealIncome.RealIncomeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealIncomeNull() {
                this[this.tableViewRealIncome.RealIncomeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNameNull() {
                return this.IsNull(this.tableViewRealIncome.DepartmentNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNameNull() {
                this[this.tableViewRealIncome.DepartmentNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentIdNull() {
                return this.IsNull(this.tableViewRealIncome.DepartmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentIdNull() {
                this[this.tableViewRealIncome.DepartmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableViewRealIncome.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableViewRealIncome.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNameNull() {
                return this.IsNull(this.tableViewRealIncome.PositionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNameNull() {
                this[this.tableViewRealIncome.PositionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableViewRealIncome.EmployeeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableViewRealIncome.EmployeeCodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeesRowChangeEvent : System.EventArgs {
            
            private EmployeesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRowChangeEvent(EmployeesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DepartmentsRowChangeEvent : System.EventArgs {
            
            private DepartmentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRowChangeEvent(DepartmentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContractTypesRowChangeEvent : System.EventArgs {
            
            private ContractTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRowChangeEvent(ContractTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContractTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PositionsRowChangeEvent : System.EventArgs {
            
            private PositionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRowChangeEvent(PositionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeDeptPositionRowChangeEvent : System.EventArgs {
            
            private EmployeeDeptPositionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRowChangeEvent(EmployeeDeptPositionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDeptPositionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TimeKeepingRowChangeEvent : System.EventArgs {
            
            private TimeKeepingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRowChangeEvent(TimeKeepingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Sel_DepartmentTimeKeepingRowChangeEvent : System.EventArgs {
            
            private Sel_DepartmentTimeKeepingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingRowChangeEvent(Sel_DepartmentTimeKeepingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_DepartmentTimeKeepingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeptPositionRowChangeEvent : System.EventArgs {
            
            private DeptPositionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRowChangeEvent(DeptPositionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeptPositionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Sel_PersonalTimeKeepingRowChangeEvent : System.EventArgs {
            
            private Sel_PersonalTimeKeepingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_PersonalTimeKeepingRowChangeEvent(Sel_PersonalTimeKeepingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Sel_PersonalTimeKeepingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoefficientTypeRowChangeEvent : System.EventArgs {
            
            private CoefficientTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRowChangeEvent(CoefficientTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoefficientRowChangeEvent : System.EventArgs {
            
            private CoefficientRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRowChangeEvent(CoefficientRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoefficientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewTimeKeepingRowChangeEvent : System.EventArgs {
            
            private ViewTimeKeepingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTimeKeepingRowChangeEvent(ViewTimeKeepingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTimeKeepingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewCoefficientRowChangeEvent : System.EventArgs {
            
            private ViewCoefficientRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientRowChangeEvent(ViewCoefficientRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewCoefficientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeIncomeRowChangeEvent : System.EventArgs {
            
            private EmployeeIncomeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeRowChangeEvent(EmployeeIncomeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeIncomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IncomeMonthRowChangeEvent : System.EventArgs {
            
            private IncomeMonthRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRowChangeEvent(IncomeMonthRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeMonthRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TimeKeepingTypeRowChangeEvent : System.EventArgs {
            
            private TimeKeepingTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRowChangeEvent(TimeKeepingTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeKeepingTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewEmployeeDeptPositionRowChangeEvent : System.EventArgs {
            
            private ViewEmployeeDeptPositionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionRowChangeEvent(ViewEmployeeDeptPositionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeDeptPositionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewUserRolesRowChangeEvent : System.EventArgs {
            
            private ViewUserRolesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewUserRolesRowChangeEvent(ViewUserRolesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewUserRolesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IncomeTypeRowChangeEvent : System.EventArgs {
            
            private IncomeTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRowChangeEvent(IncomeTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IncomeTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewIncomeRowChangeEvent : System.EventArgs {
            
            private ViewIncomeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeRowChangeEvent(ViewIncomeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewIncomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewEmployeeIncomesRowChangeEvent : System.EventArgs {
            
            private ViewEmployeeIncomesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesRowChangeEvent(ViewEmployeeIncomesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewEmployeeIncomesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewRealIncomeRowChangeEvent : System.EventArgs {
            
            private ViewRealIncomeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeRowChangeEvent(ViewRealIncomeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRealIncomeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace HRMDAL.HRMTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmployeesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Employees";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("EmployeeCode", "EmployeeCode");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("Birthday", "Birthday");
            tableMapping.ColumnMappings.Add("JoinDate", "JoinDate");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Marriage", "Marriage");
            tableMapping.ColumnMappings.Add("HealthInsuranceNo", "HealthInsuranceNo");
            tableMapping.ColumnMappings.Add("HealthInsuranceAddress", "HealthInsuranceAddress");
            tableMapping.ColumnMappings.Add("SocialInsuranceNo", "SocialInsuranceNo");
            tableMapping.ColumnMappings.Add("AccountNo", "AccountNo");
            tableMapping.ColumnMappings.Add("AccountName", "AccountName");
            tableMapping.ColumnMappings.Add("CardNo", "CardNo");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("ContractTypeId", "ContractTypeId");
            tableMapping.ColumnMappings.Add("StandardLeave", "StandardLeave");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Employees] WHERE (([UserId] = @Original_UserId) AND ((@IsNull_UserNa" +
                "me = 1 AND [UserName] IS NULL) OR ([UserName] = @Original_UserName)) AND ((@IsNu" +
                "ll_EmployeeCode = 1 AND [EmployeeCode] IS NULL) OR ([EmployeeCode] = @Original_E" +
                "mployeeCode)) AND ((@IsNull_Password = 1 AND [Password] IS NULL) OR ([Password] " +
                "= @Original_Password)) AND ((@IsNull_Birthday = 1 AND [Birthday] IS NULL) OR ([B" +
                "irthday] = @Original_Birthday)) AND ((@IsNull_JoinDate = 1 AND [JoinDate] IS NUL" +
                "L) OR ([JoinDate] = @Original_JoinDate)) AND ((@IsNull_Status = 1 AND [Status] I" +
                "S NULL) OR ([Status] = @Original_Status)) AND ((@IsNull_Marriage = 1 AND [Marria" +
                "ge] IS NULL) OR ([Marriage] = @Original_Marriage)) AND ((@IsNull_HealthInsurance" +
                "No = 1 AND [HealthInsuranceNo] IS NULL) OR ([HealthInsuranceNo] = @Original_Heal" +
                "thInsuranceNo)) AND ((@IsNull_HealthInsuranceAddress = 1 AND [HealthInsuranceAdd" +
                "ress] IS NULL) OR ([HealthInsuranceAddress] = @Original_HealthInsuranceAddress))" +
                " AND ((@IsNull_SocialInsuranceNo = 1 AND [SocialInsuranceNo] IS NULL) OR ([Socia" +
                "lInsuranceNo] = @Original_SocialInsuranceNo)) AND ((@IsNull_AccountNo = 1 AND [A" +
                "ccountNo] IS NULL) OR ([AccountNo] = @Original_AccountNo)) AND ((@IsNull_Account" +
                "Name = 1 AND [AccountName] IS NULL) OR ([AccountName] = @Original_AccountName)) " +
                "AND ((@IsNull_CardNo = 1 AND [CardNo] IS NULL) OR ([CardNo] = @Original_CardNo))" +
                " AND ((@IsNull_BankName = 1 AND [BankName] IS NULL) OR ([BankName] = @Original_B" +
                "ankName)) AND ([ContractTypeId] = @Original_ContractTypeId) AND ((@IsNull_Standa" +
                "rdLeave = 1 AND [StandardLeave] IS NULL) OR ([StandardLeave] = @Original_Standar" +
                "dLeave)) AND ((@IsNull_FullName = 1 AND [FullName] IS NULL) OR ([FullName] = @Or" +
                "iginal_FullName)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EmployeeCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeCode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Password", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Birthday", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Birthday", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Birthday", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Birthday", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_JoinDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JoinDate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JoinDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "JoinDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Status", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Marriage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Marriage", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Marriage", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Marriage", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_HealthInsuranceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceNo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HealthInsuranceNo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceNo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_HealthInsuranceAddress", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceAddress", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HealthInsuranceAddress", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceAddress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SocialInsuranceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SocialInsuranceNo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SocialInsuranceNo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SocialInsuranceNo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AccountNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AccountNo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AccountNo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AccountNo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AccountName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AccountName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AccountName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AccountName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CardNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CardNo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CardNo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CardNo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BankName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BankName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContractTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_StandardLeave", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "StandardLeave", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_StandardLeave", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "StandardLeave", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FullName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FullName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FullName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FullName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO Employees
                      (UserName, EmployeeCode, Password, Birthday, JoinDate, Status, Marriage, HealthInsuranceNo, HealthInsuranceAddress, SocialInsuranceNo, 
                      AccountNo, AccountName, CardNo, BankName, PaymentDate, ContractTypeId, StandardLeave, FullName)
VALUES     (@UserName,@EmployeeCode,@Password,@Birthday,@JoinDate,@Status,@Marriage,@HealthInsuranceNo,@HealthInsuranceAddress,@SocialInsuranceNo,@AccountNo,@AccountName,@CardNo,@BankName,@PaymentDate,@ContractTypeId,@StandardLeave,@FullName); 
SELECT UserId, UserName, EmployeeCode, Password, Birthday, JoinDate, Status, Marriage, HealthInsuranceNo, HealthInsuranceAddress, SocialInsuranceNo, AccountNo, AccountName, CardNo, BankName, PaymentDate, ContractTypeId, StandardLeave, FullName FROM Employees WHERE (UserId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "EmployeeCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Birthday", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "Birthday", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JoinDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "JoinDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Marriage", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Marriage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceAddress", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SocialInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "SocialInsuranceNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AccountNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AccountName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CardNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "CardNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PaymentDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StandardLeave", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "StandardLeave", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "FullName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE    Employees
SET              UserName = @UserName, EmployeeCode = @EmployeeCode, Password = @Password, Birthday = @Birthday, JoinDate = @JoinDate, 
                      Status = @Status, Marriage = @Marriage, HealthInsuranceNo = @HealthInsuranceNo, HealthInsuranceAddress = @HealthInsuranceAddress, 
                      SocialInsuranceNo = @SocialInsuranceNo, AccountNo = @AccountNo, AccountName = @AccountName, CardNo = @CardNo, BankName = @BankName, 
                      PaymentDate = @PaymentDate, ContractTypeId = @ContractTypeId, StandardLeave = @StandardLeave, FullName = @FullName;   
SELECT UserId, UserName, EmployeeCode, Password, Birthday, JoinDate, Status, Marriage, HealthInsuranceNo, HealthInsuranceAddress, SocialInsuranceNo, AccountNo, AccountName, CardNo, BankName, PaymentDate, ContractTypeId, StandardLeave, FullName FROM Employees WHERE (UserId = @UserId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "EmployeeCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Birthday", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "Birthday", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JoinDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "JoinDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Marriage", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Marriage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceAddress", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "HealthInsuranceAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SocialInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "SocialInsuranceNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AccountNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AccountName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CardNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "CardNo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PaymentDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "PaymentDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StandardLeave", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "StandardLeave", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "FullName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[11];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, UserName, EmployeeCode, Password, Birthday, JoinDate, Status, Marr" +
                "iage, HealthInsuranceNo, HealthInsuranceAddress, SocialInsuranceNo, AccountNo, A" +
                "ccountName, CardNo, BankName, ContractTypeId, StandardLeave, FullName FROM Emplo" +
                "yees";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_Employee";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Birthday", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@JoinDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Marriage", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceAddress", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SocialInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CardNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PaymentDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StandardLeave", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ChangePassword";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@NewPassword", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@oldPassword", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.Del_Employee";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.Del_Employee";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.Sel_DepartmentStaffs";
            this._commandCollection[5].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.Sel_EmployeeById";
            this._commandCollection[6].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.Login";
            this._commandCollection[7].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "dbo.SetDefaultUserName";
            this._commandCollection[8].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "dbo.Upd_AccountNoToEmployee";
            this._commandCollection[9].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CardNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "dbo.Upd_Employee";
            this._commandCollection[10].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Birthday", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@JoinDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Marriage", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@HealthInsuranceAddress", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SocialInsuranceNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AccountName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CardNo", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PaymentDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StandardLeave", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.EmployeesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.EmployeesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.EmployeesDataTable dataTable = new HRM.EmployeesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetDepartmentStaffs(HRM.EmployeesDataTable dataTable, System.Nullable<int> DepartmentId, string FullName) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(FullName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.EmployeesDataTable GetDepartmentStaffs(System.Nullable<int> DepartmentId, string FullName) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(FullName));
            }
            HRM.EmployeesDataTable dataTable = new HRM.EmployeesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetEmployeeById(HRM.EmployeesDataTable dataTable, System.Nullable<int> UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.EmployeesDataTable GetEmployeeById(System.Nullable<int> UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            HRM.EmployeesDataTable dataTable = new HRM.EmployeesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByLogin(HRM.EmployeesDataTable dataTable, string UserName, string Password) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((UserName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.EmployeesDataTable Login(string UserName, string Password) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((UserName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(Password));
            }
            HRM.EmployeesDataTable dataTable = new HRM.EmployeesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.EmployeesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "Employees");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_UserId, 
                    string Original_UserName, 
                    string Original_EmployeeCode, 
                    string Original_Password, 
                    System.Nullable<System.DateTime> Original_Birthday, 
                    System.Nullable<System.DateTime> Original_JoinDate, 
                    System.Nullable<int> Original_Status, 
                    System.Nullable<bool> Original_Marriage, 
                    string Original_HealthInsuranceNo, 
                    string Original_HealthInsuranceAddress, 
                    string Original_SocialInsuranceNo, 
                    string Original_AccountNo, 
                    string Original_AccountName, 
                    string Original_CardNo, 
                    string Original_BankName, 
                    int Original_ContractTypeId, 
                    System.Nullable<int> Original_StandardLeave, 
                    string Original_FullName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_UserId));
            if ((Original_UserName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_UserName));
            }
            if ((Original_EmployeeCode == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_EmployeeCode));
            }
            if ((Original_Password == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Password));
            }
            if ((Original_Birthday.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_Birthday.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_JoinDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_JoinDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_Status.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_Status.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_Marriage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((bool)(Original_Marriage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_HealthInsuranceNo == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_HealthInsuranceNo));
            }
            if ((Original_HealthInsuranceAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_HealthInsuranceAddress));
            }
            if ((Original_SocialInsuranceNo == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_SocialInsuranceNo));
            }
            if ((Original_AccountNo == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_AccountNo));
            }
            if ((Original_AccountName == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_AccountName));
            }
            if ((Original_CardNo == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_CardNo));
            }
            if ((Original_BankName == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_BankName));
            }
            this.Adapter.DeleteCommand.Parameters[29].Value = ((int)(Original_ContractTypeId));
            if ((Original_StandardLeave.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((int)(Original_StandardLeave.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = System.DBNull.Value;
            }
            if ((Original_FullName == null)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_FullName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string UserName, 
                    string EmployeeCode, 
                    string Password, 
                    System.Nullable<System.DateTime> Birthday, 
                    System.Nullable<System.DateTime> JoinDate, 
                    System.Nullable<int> Status, 
                    System.Nullable<bool> Marriage, 
                    string HealthInsuranceNo, 
                    string HealthInsuranceAddress, 
                    string SocialInsuranceNo, 
                    string AccountNo, 
                    string AccountName, 
                    string CardNo, 
                    string BankName, 
                    System.Nullable<System.DateTime> PaymentDate, 
                    int ContractTypeId, 
                    System.Nullable<int> StandardLeave, 
                    string FullName) {
            if ((UserName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserName));
            }
            if ((EmployeeCode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(EmployeeCode));
            }
            if ((Password == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((Birthday.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Birthday.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((JoinDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(JoinDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Status.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Marriage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Marriage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((HealthInsuranceNo == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(HealthInsuranceNo));
            }
            if ((HealthInsuranceAddress == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(HealthInsuranceAddress));
            }
            if ((SocialInsuranceNo == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SocialInsuranceNo));
            }
            if ((AccountNo == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(AccountNo));
            }
            if ((AccountName == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(AccountName));
            }
            if ((CardNo == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(CardNo));
            }
            if ((BankName == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(BankName));
            }
            if ((PaymentDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(PaymentDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((int)(ContractTypeId));
            if ((StandardLeave.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(StandardLeave.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(FullName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UserName, 
                    string EmployeeCode, 
                    string Password, 
                    System.Nullable<System.DateTime> Birthday, 
                    System.Nullable<System.DateTime> JoinDate, 
                    System.Nullable<int> Status, 
                    System.Nullable<bool> Marriage, 
                    string HealthInsuranceNo, 
                    string HealthInsuranceAddress, 
                    string SocialInsuranceNo, 
                    string AccountNo, 
                    string AccountName, 
                    string CardNo, 
                    string BankName, 
                    System.Nullable<System.DateTime> PaymentDate, 
                    int ContractTypeId, 
                    System.Nullable<int> StandardLeave, 
                    string FullName, 
                    int UserId) {
            if ((UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserName));
            }
            if ((EmployeeCode == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(EmployeeCode));
            }
            if ((Password == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Password));
            }
            if ((Birthday.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Birthday.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((JoinDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(JoinDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Status.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Marriage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Marriage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((HealthInsuranceNo == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(HealthInsuranceNo));
            }
            if ((HealthInsuranceAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(HealthInsuranceAddress));
            }
            if ((SocialInsuranceNo == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(SocialInsuranceNo));
            }
            if ((AccountNo == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(AccountNo));
            }
            if ((AccountName == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AccountName));
            }
            if ((CardNo == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(CardNo));
            }
            if ((BankName == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(BankName));
            }
            if ((PaymentDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(PaymentDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ContractTypeId));
            if ((StandardLeave.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(StandardLeave.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(FullName));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(UserId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_Employee(
                    string UserName, 
                    string EmployeeCode, 
                    string Password, 
                    System.Nullable<System.DateTime> Birthday, 
                    System.Nullable<System.DateTime> JoinDate, 
                    System.Nullable<int> Status, 
                    System.Nullable<bool> Marriage, 
                    string HealthInsuranceNo, 
                    string HealthInsuranceAddress, 
                    string SocialInsuranceNo, 
                    string AccountNo, 
                    string AccountName, 
                    string CardNo, 
                    string BankName, 
                    System.Nullable<System.DateTime> PaymentDate, 
                    System.Nullable<int> ContractTypeId, 
                    System.Nullable<int> StandardLeave, 
                    string FullName, 
                    System.Nullable<int> DepartmentId, 
                    System.Nullable<int> PositionId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((UserName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserName));
            }
            if ((EmployeeCode == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(EmployeeCode));
            }
            if ((Password == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Password));
            }
            if ((Birthday.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(Birthday.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((JoinDate.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(JoinDate.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                command.Parameters[6].Value = ((int)(Status.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Marriage.HasValue == true)) {
                command.Parameters[7].Value = ((bool)(Marriage.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((HealthInsuranceNo == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(HealthInsuranceNo));
            }
            if ((HealthInsuranceAddress == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(HealthInsuranceAddress));
            }
            if ((SocialInsuranceNo == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(SocialInsuranceNo));
            }
            if ((AccountNo == null)) {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(AccountNo));
            }
            if ((AccountName == null)) {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(AccountName));
            }
            if ((CardNo == null)) {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(CardNo));
            }
            if ((BankName == null)) {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(BankName));
            }
            if ((PaymentDate.HasValue == true)) {
                command.Parameters[15].Value = ((System.DateTime)(PaymentDate.Value));
            }
            else {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            if ((ContractTypeId.HasValue == true)) {
                command.Parameters[16].Value = ((int)(ContractTypeId.Value));
            }
            else {
                command.Parameters[16].Value = System.DBNull.Value;
            }
            if ((StandardLeave.HasValue == true)) {
                command.Parameters[17].Value = ((int)(StandardLeave.Value));
            }
            else {
                command.Parameters[17].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                command.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[18].Value = ((string)(FullName));
            }
            if ((DepartmentId.HasValue == true)) {
                command.Parameters[19].Value = ((int)(DepartmentId.Value));
            }
            else {
                command.Parameters[19].Value = System.DBNull.Value;
            }
            if ((PositionId.HasValue == true)) {
                command.Parameters[20].Value = ((int)(PositionId.Value));
            }
            else {
                command.Parameters[20].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int ChangePassword(string NewPassword, string oldPassword, string UserName) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((NewPassword == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(NewPassword));
            }
            if ((oldPassword == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(oldPassword));
            }
            if ((UserName == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(UserName));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int Delete_Employee(System.Nullable<int> UserId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((UserId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int Delete_EmployeeById(System.Nullable<int> UserId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((UserId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int SetDefaultUserName(string UserName, string EmployeeCode) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            if ((UserName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserName));
            }
            if ((EmployeeCode == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(EmployeeCode));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update_AccountNoToEmployee(string AccountNo, string CardNo, string BankName, string FullName) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[9];
            if ((AccountNo == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(AccountNo));
            }
            if ((CardNo == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(CardNo));
            }
            if ((BankName == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(BankName));
            }
            if ((FullName == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(FullName));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update_Employee(
                    string UserName, 
                    string EmployeeCode, 
                    string Password, 
                    System.Nullable<System.DateTime> Birthday, 
                    System.Nullable<System.DateTime> JoinDate, 
                    System.Nullable<int> Status, 
                    System.Nullable<bool> Marriage, 
                    string HealthInsuranceNo, 
                    string HealthInsuranceAddress, 
                    string SocialInsuranceNo, 
                    string AccountNo, 
                    string AccountName, 
                    string CardNo, 
                    string BankName, 
                    System.Nullable<System.DateTime> PaymentDate, 
                    System.Nullable<int> ContractTypeId, 
                    System.Nullable<int> StandardLeave, 
                    string FullName, 
                    System.Nullable<int> UserId, 
                    System.Nullable<int> DepartmentId, 
                    System.Nullable<int> PositionId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[10];
            if ((UserName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserName));
            }
            if ((EmployeeCode == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(EmployeeCode));
            }
            if ((Password == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Password));
            }
            if ((Birthday.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(Birthday.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((JoinDate.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(JoinDate.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                command.Parameters[6].Value = ((int)(Status.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Marriage.HasValue == true)) {
                command.Parameters[7].Value = ((bool)(Marriage.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((HealthInsuranceNo == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(HealthInsuranceNo));
            }
            if ((HealthInsuranceAddress == null)) {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(HealthInsuranceAddress));
            }
            if ((SocialInsuranceNo == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(SocialInsuranceNo));
            }
            if ((AccountNo == null)) {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(AccountNo));
            }
            if ((AccountName == null)) {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(AccountName));
            }
            if ((CardNo == null)) {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(CardNo));
            }
            if ((BankName == null)) {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(BankName));
            }
            if ((PaymentDate.HasValue == true)) {
                command.Parameters[15].Value = ((System.DateTime)(PaymentDate.Value));
            }
            else {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            if ((ContractTypeId.HasValue == true)) {
                command.Parameters[16].Value = ((int)(ContractTypeId.Value));
            }
            else {
                command.Parameters[16].Value = System.DBNull.Value;
            }
            if ((StandardLeave.HasValue == true)) {
                command.Parameters[17].Value = ((int)(StandardLeave.Value));
            }
            else {
                command.Parameters[17].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                command.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[18].Value = ((string)(FullName));
            }
            if ((UserId.HasValue == true)) {
                command.Parameters[19].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[19].Value = System.DBNull.Value;
            }
            if ((DepartmentId.HasValue == true)) {
                command.Parameters[20].Value = ((int)(DepartmentId.Value));
            }
            else {
                command.Parameters[20].Value = System.DBNull.Value;
            }
            if ((PositionId.HasValue == true)) {
                command.Parameters[21].Value = ((int)(PositionId.Value));
            }
            else {
                command.Parameters[21].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DepartmentsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DepartmentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Departments";
            tableMapping.ColumnMappings.Add("DepartmentId", "DepartmentId");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Departments] WHERE (([DepartmentId] = @Original_DepartmentId) AND ((@IsNull_DepartmentName = 1 AND [DepartmentName] IS NULL) OR ([DepartmentName] = @Original_DepartmentName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DepartmentName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Departments] ([DepartmentName], [Description]) VALUES (@Depart" +
                "mentName, @Description);\r\nSELECT DepartmentId, DepartmentName, Description FROM " +
                "Departments WHERE (DepartmentId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Departments] SET [DepartmentName] = @DepartmentName, [Description] = @Description WHERE (([DepartmentId] = @Original_DepartmentId) AND ((@IsNull_DepartmentName = 1 AND [DepartmentName] IS NULL) OR ([DepartmentName] = @Original_DepartmentName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT DepartmentId, DepartmentName, Description FROM Departments WHERE (DepartmentId = @DepartmentId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DepartmentName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DepartmentId, DepartmentName, Description FROM dbo.Departments";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_Department";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Sel_Departments";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.Sca_MaxDepartmentId";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.Upd_Department";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.DepartmentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.DepartmentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.DepartmentsDataTable dataTable = new HRM.DepartmentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetAllDepartments(HRM.DepartmentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.DepartmentsDataTable GetAllDepartments() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            HRM.DepartmentsDataTable dataTable = new HRM.DepartmentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.DepartmentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "Departments");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DepartmentId, string Original_DepartmentName, string Original_Description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DepartmentId));
            if ((Original_DepartmentName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DepartmentName));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string DepartmentName, string Description) {
            if ((DepartmentName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DepartmentName));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DepartmentName, string Description, int Original_DepartmentId, string Original_DepartmentName, string Original_Description, int DepartmentId) {
            if ((DepartmentName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(DepartmentName));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_DepartmentId));
            if ((Original_DepartmentName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_DepartmentName));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Description));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(DepartmentId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNewDepartment(string DepartmentName, string Description) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((DepartmentName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(DepartmentName));
            }
            if ((Description == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual System.Nullable<int> Get_MaxDepartmentId() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return new System.Nullable<int>();
            }
            else {
                return new System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateDepartment() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ContractTypesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ContractTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ContractTypes";
            tableMapping.ColumnMappings.Add("ContractTypeId", "ContractTypeId");
            tableMapping.ColumnMappings.Add("ContractTypeName", "ContractTypeName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ContractTypes] WHERE (([ContractTypeId] = @Original_ContractTypeId) AND ((@IsNull_ContractTypeName = 1 AND [ContractTypeName] IS NULL) OR ([ContractTypeName] = @Original_ContractTypeName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContractTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ContractTypeName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContractTypeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ContractTypes] ([ContractTypeName], [Description]) VALUES (@Co" +
                "ntractTypeName, @Description);\r\nSELECT ContractTypeId, ContractTypeName, Descrip" +
                "tion FROM ContractTypes WHERE (ContractTypeId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ContractTypes] SET [ContractTypeName] = @ContractTypeName, [Description] = @Description WHERE (([ContractTypeId] = @Original_ContractTypeId) AND ((@IsNull_ContractTypeName = 1 AND [ContractTypeName] IS NULL) OR ([ContractTypeName] = @Original_ContractTypeName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT ContractTypeId, ContractTypeName, Description FROM ContractTypes WHERE (ContractTypeId = @ContractTypeId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContractTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ContractTypeName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ContractTypeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ContractTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ContractTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ContractTypeId, ContractTypeName, Description FROM dbo.ContractTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_ContractTypes";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ContractTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ContractTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ContractTypesDataTable dataTable = new HRM.ContractTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetAllContractType(HRM.ContractTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ContractTypesDataTable GetAllContractType() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            HRM.ContractTypesDataTable dataTable = new HRM.ContractTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.ContractTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "ContractTypes");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ContractTypeId, string Original_ContractTypeName, string Original_Description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ContractTypeId));
            if ((Original_ContractTypeName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ContractTypeName));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ContractTypeName, string Description) {
            if ((ContractTypeName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ContractTypeName));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ContractTypeName, string Description, int Original_ContractTypeId, string Original_ContractTypeName, string Original_Description, int ContractTypeId) {
            if ((ContractTypeName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ContractTypeName));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ContractTypeId));
            if ((Original_ContractTypeName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ContractTypeName));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Description));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ContractTypeId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PositionsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PositionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Positions";
            tableMapping.ColumnMappings.Add("PositionId", "PositionId");
            tableMapping.ColumnMappings.Add("PositionName", "PositionName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Positions] WHERE (([PositionId] = @Original_PositionId) AND ((@IsNull_PositionName = 1 AND [PositionName] IS NULL) OR ([PositionName] = @Original_PositionName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PositionName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Positions] ([PositionName], [Description]) VALUES (@PositionNa" +
                "me, @Description);\r\nSELECT PositionId, PositionName, Description FROM Positions " +
                "WHERE (PositionId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Positions] SET [PositionName] = @PositionName, [Description] = @Description WHERE (([PositionId] = @Original_PositionId) AND ((@IsNull_PositionName = 1 AND [PositionName] IS NULL) OR ([PositionName] = @Original_PositionName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT PositionId, PositionName, Description FROM Positions WHERE (PositionId = @PositionId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PositionName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PositionId, PositionName, Description FROM dbo.Positions";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_Positions";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Sca_MaxPositionId";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.Ins_Position";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.PositionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.PositionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.PositionsDataTable dataTable = new HRM.PositionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetAllPositions(HRM.PositionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.PositionsDataTable GetAllPositions() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            HRM.PositionsDataTable dataTable = new HRM.PositionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.PositionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "Positions");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_PositionId, string Original_PositionName, string Original_Description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PositionId));
            if ((Original_PositionName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PositionName));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PositionName, string Description) {
            if ((PositionName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PositionName));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PositionName, string Description, int Original_PositionId, string Original_PositionName, string Original_Description, int PositionId) {
            if ((PositionName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PositionName));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_PositionId));
            if ((Original_PositionName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_PositionName));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Description));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(PositionId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual System.Nullable<int> Get_MaxPositionId() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return new System.Nullable<int>();
            }
            else {
                return new System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int Insert_Position(string PositionName, string Description) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((PositionName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(PositionName));
            }
            if ((Description == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmployeeDeptPositionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeDeptPositionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmployeeDeptPosition";
            tableMapping.ColumnMappings.Add("EmployeeDeptPositionId", "EmployeeDeptPositionId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("DepartmentId", "DepartmentId");
            tableMapping.ColumnMappings.Add("PositionId", "PositionId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EmployeeDeptPosition] WHERE (([EmployeeDeptPositionId] = @Original_EmployeeDeptPositionId) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_DepartmentId = 1 AND [DepartmentId] IS NULL) OR ([DepartmentId] = @Original_DepartmentId)) AND ((@IsNull_PositionId = 1 AND [PositionId] IS NULL) OR ([PositionId] = @Original_PositionId)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeDeptPositionId", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeDeptPositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EmployeeDeptPosition] ([EmployeeDeptPositionId], [UserId], [DepartmentId], [PositionId]) VALUES (@EmployeeDeptPositionId, @UserId, @DepartmentId, @PositionId);
SELECT EmployeeDeptPositionId, UserId, DepartmentId, PositionId FROM EmployeeDeptPosition WHERE (EmployeeDeptPositionId = @EmployeeDeptPositionId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeDeptPositionId", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeDeptPositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EmployeeDeptPosition] SET [EmployeeDeptPositionId] = @EmployeeDeptPositionId, [UserId] = @UserId, [DepartmentId] = @DepartmentId, [PositionId] = @PositionId WHERE (([EmployeeDeptPositionId] = @Original_EmployeeDeptPositionId) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_DepartmentId = 1 AND [DepartmentId] IS NULL) OR ([DepartmentId] = @Original_DepartmentId)) AND ((@IsNull_PositionId = 1 AND [PositionId] IS NULL) OR ([PositionId] = @Original_PositionId)));
SELECT EmployeeDeptPositionId, UserId, DepartmentId, PositionId FROM EmployeeDeptPosition WHERE (EmployeeDeptPositionId = @EmployeeDeptPositionId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeDeptPositionId", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeDeptPositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeDeptPositionId", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeDeptPositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmployeeDeptPositionId, UserId, DepartmentId, PositionId FROM dbo.Employee" +
                "DeptPosition";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_EmployeeDeptPosition";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Del_EmployeeDeptPositionByUserId";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.Sel_DepartmentStaffs";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.Upd_EmployeeDeptPositionByUserId";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.EmployeeDeptPositionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.EmployeeDeptPositionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.EmployeeDeptPositionDataTable dataTable = new HRM.EmployeeDeptPositionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetDepartmentStaffs(HRM.EmployeeDeptPositionDataTable dataTable, System.Nullable<int> DepartmentId) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.EmployeeDeptPositionDataTable GetDepartmentStaffs(System.Nullable<int> DepartmentId) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            HRM.EmployeeDeptPositionDataTable dataTable = new HRM.EmployeeDeptPositionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.EmployeeDeptPositionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "EmployeeDeptPosition");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_EmployeeDeptPositionId, System.Nullable<int> Original_UserId, System.Nullable<int> Original_DepartmentId, System.Nullable<int> Original_PositionId) {
            if ((Original_EmployeeDeptPositionId == null)) {
                throw new System.ArgumentNullException("Original_EmployeeDeptPositionId");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_EmployeeDeptPositionId));
            }
            if ((Original_UserId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_UserId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_DepartmentId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DepartmentId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_PositionId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_PositionId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string EmployeeDeptPositionId, System.Nullable<int> UserId, System.Nullable<int> DepartmentId, System.Nullable<int> PositionId) {
            if ((EmployeeDeptPositionId == null)) {
                throw new System.ArgumentNullException("EmployeeDeptPositionId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EmployeeDeptPositionId));
            }
            if ((UserId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((PositionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(PositionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string EmployeeDeptPositionId, System.Nullable<int> UserId, System.Nullable<int> DepartmentId, System.Nullable<int> PositionId, string Original_EmployeeDeptPositionId, System.Nullable<int> Original_UserId, System.Nullable<int> Original_DepartmentId, System.Nullable<int> Original_PositionId) {
            if ((EmployeeDeptPositionId == null)) {
                throw new System.ArgumentNullException("EmployeeDeptPositionId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EmployeeDeptPositionId));
            }
            if ((UserId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((PositionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(PositionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_EmployeeDeptPositionId == null)) {
                throw new System.ArgumentNullException("Original_EmployeeDeptPositionId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_EmployeeDeptPositionId));
            }
            if ((Original_UserId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_UserId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_DepartmentId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_DepartmentId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_PositionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_PositionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_EmployeeDeptPosition(string UserCode, string FullName, string DepartmentName, string PositionName) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((UserCode == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(UserCode));
            }
            if ((FullName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(FullName));
            }
            if ((DepartmentName == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(DepartmentName));
            }
            if ((PositionName == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(PositionName));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int Delete_EmployeeDeptPositionByUserId(System.Nullable<int> UserId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update_EmployeeDeptPositionByUserId(System.Nullable<int> DepartmentId, System.Nullable<int> PositionId, System.Nullable<int> UserId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((DepartmentId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((PositionId.HasValue == true)) {
                command.Parameters[2].Value = ((int)(PositionId.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((UserId.HasValue == true)) {
                command.Parameters[3].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TimeKeepingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TimeKeepingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TimeKeeping";
            tableMapping.ColumnMappings.Add("TimeKeepingId", "TimeKeepingId");
            tableMapping.ColumnMappings.Add("WorkdayTypeId", "TimeKeepingTypeId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("TimeKeepingDate", "TimeKeepingDate");
            tableMapping.ColumnMappings.Add("Lock", "Lock");
            tableMapping.ColumnMappings.Add("TimeKeepingTypeId", "TimeKeepingTypeId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [TimeKeeping] WHERE (([TimeKeepingId] = @Original_TimeKeepingId) AND ([TimeKeepingTypeId] = @Original_TimeKeepingTypeId) AND ([UserId] = @Original_UserId) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_TimeKeepingDate = 1 AND [TimeKeepingDate] IS NULL) OR ([TimeKeepingDate] = @Original_TimeKeepingDate)) AND ((@IsNull_Lock = 1 AND [Lock] IS NULL) OR ([Lock] = @Original_Lock)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingId", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TimeKeepingDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingDate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Lock", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TimeKeeping] ([TimeKeepingTypeId], [UserId], [Value], [TimeKeepingDate], [Lock]) VALUES (@TimeKeepingTypeId, @UserId, @Value, @TimeKeepingDate, @Lock);
SELECT TimeKeepingId, TimeKeepingTypeId, UserId, Value, TimeKeepingDate, Lock FROM TimeKeeping WHERE (TimeKeepingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [TimeKeeping] SET [TimeKeepingTypeId] = @TimeKeepingTypeId, [UserId] = @UserId, [Value] = @Value, [TimeKeepingDate] = @TimeKeepingDate, [Lock] = @Lock WHERE (([TimeKeepingId] = @Original_TimeKeepingId) AND ([TimeKeepingTypeId] = @Original_TimeKeepingTypeId) AND ([UserId] = @Original_UserId) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_TimeKeepingDate = 1 AND [TimeKeepingDate] IS NULL) OR ([TimeKeepingDate] = @Original_TimeKeepingDate)) AND ((@IsNull_Lock = 1 AND [Lock] IS NULL) OR ([Lock] = @Original_Lock)));
SELECT TimeKeepingId, TimeKeepingTypeId, UserId, Value, TimeKeepingDate, Lock FROM TimeKeeping WHERE (TimeKeepingId = @TimeKeepingId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingId", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TimeKeepingDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingDate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Lock", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingId", System.Data.SqlDbType.BigInt, 8, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TimeKeepingId, TimeKeepingTypeId, UserId, Value, TimeKeepingDate, Lock" +
                "\r\nFROM         TimeKeeping";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_TimeKeeping";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingCode", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Sel_PersonalTimeKeeping";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.Upd_PersonalTimeKeeping";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@WorkdayCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.Upd_TimeKeeping";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@WorkdayTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.TimeKeepingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.TimeKeepingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.TimeKeepingDataTable dataTable = new HRM.TimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetPersonalTimeKeeping(HRM.TimeKeepingDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.TimeKeepingDataTable GetPersonalTimeKeeping(System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.TimeKeepingDataTable dataTable = new HRM.TimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.TimeKeepingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "TimeKeeping");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_TimeKeepingId, int Original_TimeKeepingTypeId, int Original_UserId, System.Nullable<int> Original_Value, System.Nullable<System.DateTime> Original_TimeKeepingDate, System.Nullable<bool> Original_Lock) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_TimeKeepingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TimeKeepingTypeId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_UserId));
            if ((Original_Value.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Value.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_TimeKeepingDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_TimeKeepingDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_Lock.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_Lock.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TimeKeepingTypeId, int UserId, System.Nullable<int> Value, System.Nullable<System.DateTime> TimeKeepingDate, System.Nullable<bool> Lock) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TimeKeepingTypeId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserId));
            if ((Value.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Value.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Lock.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Lock.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int TimeKeepingTypeId, int UserId, System.Nullable<int> Value, System.Nullable<System.DateTime> TimeKeepingDate, System.Nullable<bool> Lock, long Original_TimeKeepingId, int Original_TimeKeepingTypeId, int Original_UserId, System.Nullable<int> Original_Value, System.Nullable<System.DateTime> Original_TimeKeepingDate, System.Nullable<bool> Original_Lock, int TimeKeepingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TimeKeepingTypeId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(UserId));
            if ((Value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Lock.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Lock.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_TimeKeepingId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_TimeKeepingTypeId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_UserId));
            if ((Original_Value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_Value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_TimeKeepingDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_TimeKeepingDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_Lock.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_Lock.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(TimeKeepingId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_TimeKeeping(string TimeKeepingCode, string UserCode, System.Nullable<decimal> Value, System.Nullable<System.DateTime> TimeKeepingDate) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((TimeKeepingCode == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(TimeKeepingCode));
            }
            if ((UserCode == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(UserCode));
            }
            if ((Value.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(Value.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object UpdatePersonalTimeKeeping(string WorkdayCode, System.Nullable<int> UserId, System.Nullable<int> Value, System.Nullable<System.DateTime> TimeKeepingDate) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((WorkdayCode == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(WorkdayCode));
            }
            if ((UserId.HasValue == true)) {
                command.Parameters[2].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Value.HasValue == true)) {
                command.Parameters[3].Value = ((int)(Value.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object UpdateTimeKeeping(System.Nullable<int> TimeKeepingId, System.Nullable<int> WorkdayTypeId, System.Nullable<int> UserId, System.Nullable<int> Value, System.Nullable<System.DateTime> TimeKeepingDate) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((TimeKeepingId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(TimeKeepingId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((WorkdayTypeId.HasValue == true)) {
                command.Parameters[2].Value = ((int)(WorkdayTypeId.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((UserId.HasValue == true)) {
                command.Parameters[3].Value = ((int)(UserId.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Value.HasValue == true)) {
                command.Parameters[4].Value = ((int)(Value.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Sel_DepartmentTimeKeepingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sel_DepartmentTimeKeepingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Sel_DepartmentTimeKeeping";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("PositionName", "PositionName");
            tableMapping.ColumnMappings.Add("X", "X");
            tableMapping.ColumnMappings.Add("O", "O");
            tableMapping.ColumnMappings.Add("TS", "TS");
            tableMapping.ColumnMappings.Add("TNLD", "TNLD");
            tableMapping.ColumnMappings.Add("F", "F");
            tableMapping.ColumnMappings.Add("FDB", "FDB");
            tableMapping.ColumnMappings.Add("HO", "HO");
            tableMapping.ColumnMappings.Add("K", "K");
            tableMapping.ColumnMappings.Add("TBN", "TBN");
            tableMapping.ColumnMappings.Add("TBD", "TBD");
            tableMapping.ColumnMappings.Add("LD", "LD");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Sel_DepartmentTimeKeeping";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE TimeKeeping\r\nSET @X = @X, @O = @O, @TS = @TS, @TNLD = @TNLD, @F = @F, @FDB" +
                " = @FDB, @HO = @HO, @K = @K, @TBN = @TBN, @TBD = @TBD, @LD = @LD \r\nWHERE 1 = 2";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillGetDepartmentTimeKeeping(HRM.Sel_DepartmentTimeKeepingDataTable dataTable, System.Nullable<int> DepartmentId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.Sel_DepartmentTimeKeepingDataTable GetDepartmentTimeKeeping(System.Nullable<int> DepartmentId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.Sel_DepartmentTimeKeepingDataTable dataTable = new HRM.Sel_DepartmentTimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateNothing() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DeptPositionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeptPositionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DeptPosition";
            tableMapping.ColumnMappings.Add("DeptPositionId", "DeptPositionId");
            tableMapping.ColumnMappings.Add("DepartmentId", "DepartmentId");
            tableMapping.ColumnMappings.Add("PositionId", "PositionId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DeptPosition] WHERE (([DeptPositionId] = @Original_DeptPositio" +
                "nId) AND ([DepartmentId] = @Original_DepartmentId) AND ([PositionId] = @Original" +
                "_PositionId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeptPositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptPositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DeptPosition] ([DepartmentId], [PositionId]) VALUES (@Departme" +
                "ntId, @PositionId);\r\nSELECT DeptPositionId, DepartmentId, PositionId FROM DeptPo" +
                "sition WHERE (DeptPositionId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DeptPosition] SET [DepartmentId] = @DepartmentId, [PositionId] = @PositionId WHERE (([DeptPositionId] = @Original_DeptPositionId) AND ([DepartmentId] = @Original_DepartmentId) AND ([PositionId] = @Original_PositionId));
SELECT DeptPositionId, DepartmentId, PositionId FROM DeptPosition WHERE (DeptPositionId = @DeptPositionId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DeptPositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DeptPositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DepartmentId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DepartmentId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PositionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PositionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DeptPositionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DeptPositionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DeptPositionId, DepartmentId, PositionId FROM dbo.DeptPosition";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_DeptPosition";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentDescription", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PositionDescription", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.DeptPositionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.DeptPositionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.DeptPositionDataTable dataTable = new HRM.DeptPositionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.DeptPositionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "DeptPosition");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DeptPositionId, int Original_DepartmentId, int Original_PositionId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DeptPositionId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_DepartmentId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_PositionId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DepartmentId, int PositionId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DepartmentId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(PositionId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int DepartmentId, int PositionId, int Original_DeptPositionId, int Original_DepartmentId, int Original_PositionId, int DeptPositionId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DepartmentId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(PositionId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_DeptPositionId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_DepartmentId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_PositionId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(DeptPositionId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_DeptPosition(string DepartmentName, string DepartmentDescription, string PositionName, string PositionDescription) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((DepartmentName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(DepartmentName));
            }
            if ((DepartmentDescription == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(DepartmentDescription));
            }
            if ((PositionName == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(PositionName));
            }
            if ((PositionDescription == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(PositionDescription));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Sel_PersonalTimeKeepingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Sel_PersonalTimeKeepingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Sel_PersonalTimeKeeping";
            tableMapping.ColumnMappings.Add("TimeKeepingId", "TimeKeepingId");
            tableMapping.ColumnMappings.Add("WorkdayTypeId", "WorkdayTypeId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("TimeKeepingDate", "TimeKeepingDate");
            tableMapping.ColumnMappings.Add("Lock", "Lock");
            tableMapping.ColumnMappings.Add("WorkdayCode", "WorkdayCode");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Sel_PersonalTimeKeeping";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillGetPersonalTimeKeeping(HRM.Sel_PersonalTimeKeepingDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.Sel_PersonalTimeKeepingDataTable GetPersonalTimeKeeping(System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.Sel_PersonalTimeKeepingDataTable dataTable = new HRM.Sel_PersonalTimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CoefficientTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CoefficientTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CoefficientType";
            tableMapping.ColumnMappings.Add("CoefficientType", "CoefficientType");
            tableMapping.ColumnMappings.Add("CoefficientName", "CoefficientName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CoefficientType] WHERE (([CoefficientType] = @Original_CoefficientType) AND ((@IsNull_CoefficientName = 1 AND [CoefficientName] IS NULL) OR ([CoefficientName] = @Original_CoefficientName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CoefficientName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CoefficientType] ([CoefficientName], [Description]) VALUES (@C" +
                "oefficientName, @Description);\r\nSELECT CoefficientType, CoefficientName, Descrip" +
                "tion FROM CoefficientType WHERE (CoefficientType = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CoefficientType] SET [CoefficientName] = @CoefficientName, [Description] = @Description WHERE (([CoefficientType] = @Original_CoefficientType) AND ((@IsNull_CoefficientName = 1 AND [CoefficientName] IS NULL) OR ([CoefficientName] = @Original_CoefficientName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT CoefficientType, CoefficientName, Description FROM CoefficientType WHERE (CoefficientType = @CoefficientType)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CoefficientName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientType", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CoefficientType, CoefficientName, Description FROM dbo.CoefficientType";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_CoefficientType";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.CoefficientTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.CoefficientTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.CoefficientTypeDataTable dataTable = new HRM.CoefficientTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.CoefficientTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "CoefficientType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CoefficientType, string Original_CoefficientName, string Original_Description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CoefficientType));
            if ((Original_CoefficientName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CoefficientName));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CoefficientName, string Description) {
            if ((CoefficientName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CoefficientName));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CoefficientName, string Description, int Original_CoefficientType, string Original_CoefficientName, string Original_Description, int CoefficientType) {
            if ((CoefficientName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CoefficientName));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_CoefficientType));
            if ((Original_CoefficientName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_CoefficientName));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Description));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(CoefficientType));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_CoefficientType(string CoefficientName, string Description) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((CoefficientName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(CoefficientName));
            }
            if ((Description == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CoefficientTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CoefficientTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Coefficient";
            tableMapping.ColumnMappings.Add("CoefficientId", "CoefficientId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("CoefficientType", "CoefficientType");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Date", "Date");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Coefficient] WHERE (([CoefficientId] = @Original_CoefficientId) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_CoefficientType = 1 AND [CoefficientType] IS NULL) OR ([CoefficientType] = @Original_CoefficientType)) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Date", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Coefficient] ([UserId], [CoefficientType], [Value], [Date]) VA" +
                "LUES (@UserId, @CoefficientType, @Value, @Date);\r\nSELECT CoefficientId, UserId, " +
                "CoefficientType, Value, Date FROM Coefficient WHERE (CoefficientId = SCOPE_IDENT" +
                "ITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Coefficient] SET [UserId] = @UserId, [CoefficientType] = @CoefficientType, [Value] = @Value, [Date] = @Date WHERE (([CoefficientId] = @Original_CoefficientId) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_CoefficientType = 1 AND [CoefficientType] IS NULL) OR ([CoefficientType] = @Original_CoefficientType)) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)));
SELECT CoefficientId, UserId, CoefficientType, Value, Date FROM Coefficient WHERE (CoefficientId = @CoefficientId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CoefficientType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CoefficientType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Date", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "CoefficientId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CoefficientId, UserId, CoefficientType, Value, Date FROM dbo.Coefficient";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_Coefficient";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Float, 8, System.Data.ParameterDirection.Input, 53, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CoefficientName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.CoefficientDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.CoefficientDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.CoefficientDataTable dataTable = new HRM.CoefficientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.CoefficientDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "Coefficient");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CoefficientId, System.Nullable<int> Original_UserId, System.Nullable<int> Original_CoefficientType, System.Nullable<double> Original_Value, System.Nullable<System.DateTime> Original_Date) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CoefficientId));
            if ((Original_UserId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_UserId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_CoefficientType.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_CoefficientType.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_Value.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_Value.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> UserId, System.Nullable<int> CoefficientType, System.Nullable<double> Value, System.Nullable<System.DateTime> Date) {
            if ((UserId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((CoefficientType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(CoefficientType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Value.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(Value.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> UserId, System.Nullable<int> CoefficientType, System.Nullable<double> Value, System.Nullable<System.DateTime> Date, int Original_CoefficientId, System.Nullable<int> Original_UserId, System.Nullable<int> Original_CoefficientType, System.Nullable<double> Original_Value, System.Nullable<System.DateTime> Original_Date, int CoefficientId) {
            if ((UserId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((CoefficientType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(CoefficientType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(Value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_CoefficientId));
            if ((Original_UserId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_UserId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_CoefficientType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_CoefficientType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_Value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_Value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(CoefficientId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_Coefficient(System.Nullable<double> Value, System.Nullable<System.DateTime> Date, string UserCode, string CoefficientName) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Value.HasValue == true)) {
                command.Parameters[1].Value = ((double)(Value.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((UserCode == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(UserCode));
            }
            if ((CoefficientName == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(CoefficientName));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewTimeKeepingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewTimeKeepingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewTimeKeeping";
            tableMapping.ColumnMappings.Add("WorkdayTypeId", "TimeKeepingTypeId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("TimeKeepingDate", "TimeKeepingDate");
            tableMapping.ColumnMappings.Add("Lock", "Lock");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("TimeKeepingId", "TimeKeepingId");
            tableMapping.ColumnMappings.Add("TimeKeepingTypeId", "TimeKeepingTypeId");
            tableMapping.ColumnMappings.Add("TimeKeepingCode", "TimeKeepingCode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TimeKeepingId, UserId, TimeKeepingTypeId, TimeKeepingCode, Value, Type" +
                ", TimeKeepingDate, Lock, Description\r\nFROM         ViewTimeKeeping";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "Sel_PersonalTimeKeepingMonthly";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Sel_PersonalWorkHourMonthly";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewTimeKeepingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewTimeKeepingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewTimeKeepingDataTable dataTable = new HRM.ViewTimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetPersonalTimeKeepingMonthly(HRM.ViewTimeKeepingDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewTimeKeepingDataTable GetPersonalTimeKeepingMonthly(System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewTimeKeepingDataTable dataTable = new HRM.ViewTimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetPersonalWorkHourMonthly(HRM.ViewTimeKeepingDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewTimeKeepingDataTable GetPersonalWorkHourMonthly(System.Nullable<int> UserId, System.Nullable<System.DateTime> TimeKeepingDate) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TimeKeepingDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(TimeKeepingDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewTimeKeepingDataTable dataTable = new HRM.ViewTimeKeepingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewCoefficientTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewCoefficientTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewCoefficient";
            tableMapping.ColumnMappings.Add("CoefficientId", "CoefficientId");
            tableMapping.ColumnMappings.Add("CoefficientType", "CoefficientType");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("CoefficientName", "CoefficientName");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Date", "Date");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CoefficientId, CoefficientType, UserId, CoefficientName, Value, Descriptio" +
                "n, Date FROM dbo.ViewCoefficient";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_PersonalCoefficientMonthly";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewCoefficientDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewCoefficientDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewCoefficientDataTable dataTable = new HRM.ViewCoefficientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetPersonalCoefficientMonthly(HRM.ViewCoefficientDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewCoefficientDataTable GetPersonalCoefficientMonthly(System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewCoefficientDataTable dataTable = new HRM.ViewCoefficientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EmployeeIncomeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeIncomeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EmployeeIncome";
            tableMapping.ColumnMappings.Add("EmployeeIncomeId", "EmployeeIncomeId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Total_Inc", "Total_Inc");
            tableMapping.ColumnMappings.Add("Total_Cntr", "Total_Cntr");
            tableMapping.ColumnMappings.Add("Total_Inc_LK", "Total_Inc_LK");
            tableMapping.ColumnMappings.Add("Total_Cntr_LK", "Total_Cntr_LK");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EmployeeIncome] WHERE (([EmployeeIncomeId] = @Original_EmployeeIncomeId) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Total_Inc = 1 AND [Total_Inc] IS NULL) OR ([Total_Inc] = @Original_Total_Inc)) AND ((@IsNull_Total_Cntr = 1 AND [Total_Cntr] IS NULL) OR ([Total_Cntr] = @Original_Total_Cntr)) AND ((@IsNull_Total_Inc_LK = 1 AND [Total_Inc_LK] IS NULL) OR ([Total_Inc_LK] = @Original_Total_Inc_LK)) AND ((@IsNull_Total_Cntr_LK = 1 AND [Total_Cntr_LK] IS NULL) OR ([Total_Cntr_LK] = @Original_Total_Cntr_LK)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeIncomeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeIncomeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Date", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Inc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Inc", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Cntr", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Cntr", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Inc_LK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc_LK", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Inc_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc_LK", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Cntr_LK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr_LK", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Cntr_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr_LK", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EmployeeIncome] ([UserId], [Date], [Total_Inc], [Total_Cntr], [Total_Inc_LK], [Total_Cntr_LK]) VALUES (@UserId, @Date, @Total_Inc, @Total_Cntr, @Total_Inc_LK, @Total_Cntr_LK);
SELECT EmployeeIncomeId, UserId, Date, Total_Inc, Total_Cntr, Total_Inc_LK, Total_Cntr_LK FROM EmployeeIncome WHERE (EmployeeIncomeId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Inc", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Cntr", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Inc_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc_LK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Cntr_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr_LK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EmployeeIncome] SET [UserId] = @UserId, [Date] = @Date, [Total_Inc] = @Total_Inc, [Total_Cntr] = @Total_Cntr, [Total_Inc_LK] = @Total_Inc_LK, [Total_Cntr_LK] = @Total_Cntr_LK WHERE (([EmployeeIncomeId] = @Original_EmployeeIncomeId) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Total_Inc = 1 AND [Total_Inc] IS NULL) OR ([Total_Inc] = @Original_Total_Inc)) AND ((@IsNull_Total_Cntr = 1 AND [Total_Cntr] IS NULL) OR ([Total_Cntr] = @Original_Total_Cntr)) AND ((@IsNull_Total_Inc_LK = 1 AND [Total_Inc_LK] IS NULL) OR ([Total_Inc_LK] = @Original_Total_Inc_LK)) AND ((@IsNull_Total_Cntr_LK = 1 AND [Total_Cntr_LK] IS NULL) OR ([Total_Cntr_LK] = @Original_Total_Cntr_LK)));
SELECT EmployeeIncomeId, UserId, Date, Total_Inc, Total_Cntr, Total_Inc_LK, Total_Cntr_LK FROM EmployeeIncome WHERE (EmployeeIncomeId = @EmployeeIncomeId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Inc", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Cntr", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Inc_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc_LK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Cntr_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr_LK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EmployeeIncomeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EmployeeIncomeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Date", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Inc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Inc", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Cntr", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Cntr", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Inc_LK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc_LK", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Inc_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Inc_LK", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Total_Cntr_LK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr_LK", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Total_Cntr_LK", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Total_Cntr_LK", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EmployeeIncomeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "EmployeeIncomeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EmployeeIncomeId, UserId, Date, Total_Inc, Total_Cntr, Total_Inc_LK, Total" +
                "_Cntr_LK FROM dbo.EmployeeIncome";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_EmployeeIncome";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Inc", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Cntr", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Inc_LK", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Total_Cntr_LK", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Sel_EmployeeIncome";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.EmployeeIncomeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.EmployeeIncomeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.EmployeeIncomeDataTable dataTable = new HRM.EmployeeIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetTotalEmployeeIncome(HRM.EmployeeIncomeDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.EmployeeIncomeDataTable GetTotalEmployeeIncome(System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.EmployeeIncomeDataTable dataTable = new HRM.EmployeeIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.EmployeeIncomeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "EmployeeIncome");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EmployeeIncomeId, System.Nullable<int> Original_UserId, System.Nullable<System.DateTime> Original_Date, System.Nullable<decimal> Original_Total_Inc, System.Nullable<decimal> Original_Total_Cntr, System.Nullable<decimal> Original_Total_Inc_LK, System.Nullable<decimal> Original_Total_Cntr_LK) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EmployeeIncomeId));
            if ((Original_UserId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_UserId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_Total_Inc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Total_Inc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_Total_Cntr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_Total_Cntr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_Total_Inc_LK.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_Total_Inc_LK.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_Total_Cntr_LK.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_Total_Cntr_LK.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> UserId, System.Nullable<System.DateTime> Date, System.Nullable<decimal> Total_Inc, System.Nullable<decimal> Total_Cntr, System.Nullable<decimal> Total_Inc_LK, System.Nullable<decimal> Total_Cntr_LK) {
            if ((UserId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Total_Inc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Total_Inc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Total_Cntr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Total_Cntr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Total_Inc_LK.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Total_Inc_LK.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Total_Cntr_LK.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Total_Cntr_LK.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> UserId, System.Nullable<System.DateTime> Date, System.Nullable<decimal> Total_Inc, System.Nullable<decimal> Total_Cntr, System.Nullable<decimal> Total_Inc_LK, System.Nullable<decimal> Total_Cntr_LK, int Original_EmployeeIncomeId, System.Nullable<int> Original_UserId, System.Nullable<System.DateTime> Original_Date, System.Nullable<decimal> Original_Total_Inc, System.Nullable<decimal> Original_Total_Cntr, System.Nullable<decimal> Original_Total_Inc_LK, System.Nullable<decimal> Original_Total_Cntr_LK, int EmployeeIncomeId) {
            if ((UserId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Total_Inc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Total_Inc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Total_Cntr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Total_Cntr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Total_Inc_LK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Total_Inc_LK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Total_Cntr_LK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Total_Cntr_LK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_EmployeeIncomeId));
            if ((Original_UserId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_UserId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_Total_Inc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_Total_Inc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_Total_Cntr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Total_Cntr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_Total_Inc_LK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_Total_Inc_LK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_Total_Cntr_LK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_Total_Cntr_LK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(EmployeeIncomeId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_EmployeeIncome(System.Nullable<System.DateTime> Date, System.Nullable<decimal> Total_Inc, System.Nullable<decimal> Total_Cntr, System.Nullable<decimal> Total_Inc_LK, System.Nullable<decimal> Total_Cntr_LK, string UserCode) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Date.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Total_Inc.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(Total_Inc.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Total_Cntr.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(Total_Cntr.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Total_Inc_LK.HasValue == true)) {
                command.Parameters[4].Value = ((decimal)(Total_Inc_LK.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Total_Cntr_LK.HasValue == true)) {
                command.Parameters[5].Value = ((decimal)(Total_Cntr_LK.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((UserCode == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(UserCode));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IncomeMonthTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IncomeMonthTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IncomeMonth";
            tableMapping.ColumnMappings.Add("IncomeMonthId", "IncomeMonthId");
            tableMapping.ColumnMappings.Add("IncomeTypeId", "IncomeTypeId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Lk", "Lk");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Lock", "Lock");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IncomeMonth] WHERE (([IncomeMonthId] = @Original_IncomeMonthId) AND ((@IsNull_IncomeTypeId = 1 AND [IncomeTypeId] IS NULL) OR ([IncomeTypeId] = @Original_IncomeTypeId)) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_Lk = 1 AND [Lk] IS NULL) OR ([Lk] = @Original_Lk)) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Lock = 1 AND [Lock] IS NULL) OR ([Lock] = @Original_Lock)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeMonthId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeMonthId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Lk", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Lk", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Lk", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Lk", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Date", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Lock", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IncomeMonth] ([IncomeTypeId], [UserId], [Value], [Lk], [Date], [Lock]) VALUES (@IncomeTypeId, @UserId, @Value, @Lk, @Date, @Lock);
SELECT IncomeMonthId, IncomeTypeId, UserId, Value, Lk, Date, Lock FROM IncomeMonth WHERE (IncomeMonthId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Lk", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Lk", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IncomeMonth] SET [IncomeTypeId] = @IncomeTypeId, [UserId] = @UserId, [Value] = @Value, [Lk] = @Lk, [Date] = @Date, [Lock] = @Lock WHERE (([IncomeMonthId] = @Original_IncomeMonthId) AND ((@IsNull_IncomeTypeId = 1 AND [IncomeTypeId] IS NULL) OR ([IncomeTypeId] = @Original_IncomeTypeId)) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ((@IsNull_Value = 1 AND [Value] IS NULL) OR ([Value] = @Original_Value)) AND ((@IsNull_Lk = 1 AND [Lk] IS NULL) OR ([Lk] = @Original_Lk)) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Lock = 1 AND [Lock] IS NULL) OR ([Lock] = @Original_Lock)));
SELECT IncomeMonthId, IncomeTypeId, UserId, Value, Lk, Date, Lock FROM IncomeMonth WHERE (IncomeMonthId = @IncomeMonthId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Lk", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Lk", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeMonthId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeMonthId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Value", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Lk", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Lk", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Lk", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Lk", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Date", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Lock", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Lock", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Lock", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeMonthId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IncomeMonthId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IncomeMonthId, IncomeTypeId, UserId, Value, Lk, Date, Lock FROM dbo.Income" +
                "Month";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_IncomeMonth";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.IncomeMonthDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.IncomeMonthDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.IncomeMonthDataTable dataTable = new HRM.IncomeMonthDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.IncomeMonthDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "IncomeMonth");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IncomeMonthId, int Original_IncomeTypeId, int Original_UserId, System.Nullable<decimal> Original_Value, System.Nullable<decimal> Original_Lk, System.Nullable<System.DateTime> Original_Date, System.Nullable<bool> Original_Lock) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IncomeMonthId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IncomeTypeId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_UserId));
            if ((Original_Value.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Value.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_Lk.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_Lk.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_Lock.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_Lock.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int IncomeTypeId, int UserId, System.Nullable<decimal> Value, System.Nullable<decimal> Lk, System.Nullable<System.DateTime> Date, System.Nullable<bool> Lock) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IncomeTypeId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserId));
            if ((Value.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Value.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Lk.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Lk.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Lock.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(Lock.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int IncomeTypeId, int UserId, System.Nullable<decimal> Value, System.Nullable<decimal> Lk, System.Nullable<System.DateTime> Date, System.Nullable<bool> Lock, int Original_IncomeMonthId, int Original_IncomeTypeId, int Original_UserId, System.Nullable<decimal> Original_Value, System.Nullable<decimal> Original_Lk, System.Nullable<System.DateTime> Original_Date, System.Nullable<bool> Original_Lock, int IncomeMonthId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IncomeTypeId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(UserId));
            if ((Value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Lk.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Lk.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Lock.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Lock.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IncomeMonthId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_IncomeTypeId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_UserId));
            if ((Original_Value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_Value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_Lk.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Lk.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_Lock.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(Original_Lock.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(IncomeMonthId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int AddNew_IncomeMonth(string IncomeName, System.Nullable<bool> Type, string UserCode, System.Nullable<decimal> Value, System.Nullable<System.DateTime> Date) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((IncomeName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(IncomeName));
            }
            if ((Type.HasValue == true)) {
                command.Parameters[2].Value = ((bool)(Type.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((UserCode == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(UserCode));
            }
            if ((Value.HasValue == true)) {
                command.Parameters[4].Value = ((decimal)(Value.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(Date.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TimeKeepingTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TimeKeepingTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TimeKeepingType";
            tableMapping.ColumnMappings.Add("TimeKeepingTypeId", "TimeKeepingTypeId");
            tableMapping.ColumnMappings.Add("TimeKeepingCode", "TimeKeepingCode");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TimeKeepingType] WHERE (([TimeKeepingTypeId] = @Original_TimeKeepingTypeId) AND ((@IsNull_TimeKeepingCode = 1 AND [TimeKeepingCode] IS NULL) OR ([TimeKeepingCode] = @Original_TimeKeepingCode)) AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TimeKeepingCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TimeKeepingType] ([TimeKeepingCode], [Type], [Description]) VA" +
                "LUES (@TimeKeepingCode, @Type, @Description);\r\nSELECT TimeKeepingTypeId, TimeKee" +
                "pingCode, Type, Description FROM TimeKeepingType WHERE (TimeKeepingTypeId = SCOP" +
                "E_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TimeKeepingType] SET [TimeKeepingCode] = @TimeKeepingCode, [Type] = @Type, [Description] = @Description WHERE (([TimeKeepingTypeId] = @Original_TimeKeepingTypeId) AND ((@IsNull_TimeKeepingCode = 1 AND [TimeKeepingCode] IS NULL) OR ([TimeKeepingCode] = @Original_TimeKeepingCode)) AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT TimeKeepingTypeId, TimeKeepingCode, Type, Description FROM TimeKeepingType WHERE (TimeKeepingTypeId = @TimeKeepingTypeId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingCode", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_TimeKeepingCode", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingCode", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeKeepingCode", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingCode", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "TimeKeepingTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TimeKeepingTypeId, TimeKeepingCode, Type, Description FROM dbo.TimeKeeping" +
                "Type";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_TimeKeepingType";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeKeepingCode", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.TimeKeepingTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.TimeKeepingTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.TimeKeepingTypeDataTable dataTable = new HRM.TimeKeepingTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.TimeKeepingTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "TimeKeepingType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TimeKeepingTypeId, string Original_TimeKeepingCode, System.Nullable<bool> Original_Type, string Original_Description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TimeKeepingTypeId));
            if ((Original_TimeKeepingCode == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TimeKeepingCode));
            }
            if ((Original_Type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TimeKeepingCode, System.Nullable<bool> Type, string Description) {
            if ((TimeKeepingCode == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TimeKeepingCode));
            }
            if ((Type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(Type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TimeKeepingCode, System.Nullable<bool> Type, string Description, int Original_TimeKeepingTypeId, string Original_TimeKeepingCode, System.Nullable<bool> Original_Type, string Original_Description, int TimeKeepingTypeId) {
            if ((TimeKeepingCode == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TimeKeepingCode));
            }
            if ((Type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(Type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_TimeKeepingTypeId));
            if ((Original_TimeKeepingCode == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_TimeKeepingCode));
            }
            if ((Original_Type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Original_Type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Description));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(TimeKeepingTypeId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddNew_TimeKeepingType(string TimeKeepingCode, System.Nullable<bool> Type, string Description) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((TimeKeepingCode == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(TimeKeepingCode));
            }
            if ((Type.HasValue == true)) {
                command.Parameters[2].Value = ((bool)(Type.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Description == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewEmployeeDeptPositionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewEmployeeDeptPositionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewEmployeeDeptPosition";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("EmployeeCode", "EmployeeCode");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("PositionName", "PositionName");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            tableMapping.ColumnMappings.Add("Birthday", "Birthday");
            tableMapping.ColumnMappings.Add("JoinDate", "JoinDate");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Marriage", "Marriage");
            tableMapping.ColumnMappings.Add("HealthInsuranceNo", "HealthInsuranceNo");
            tableMapping.ColumnMappings.Add("HealthInsuranceAddress", "HealthInsuranceAddress");
            tableMapping.ColumnMappings.Add("SocialInsuranceNo", "SocialInsuranceNo");
            tableMapping.ColumnMappings.Add("AccountNo", "AccountNo");
            tableMapping.ColumnMappings.Add("AccountName", "AccountName");
            tableMapping.ColumnMappings.Add("CardNo", "CardNo");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("PaymentDate", "PaymentDate");
            tableMapping.ColumnMappings.Add("StandardLeave", "StandardLeave");
            tableMapping.ColumnMappings.Add("DepartmentId", "DepartmentId");
            tableMapping.ColumnMappings.Add("PositionId", "PositionId");
            tableMapping.ColumnMappings.Add("ContractTypeCode", "ContractTypeCode");
            tableMapping.ColumnMappings.Add("ContractTypeName", "ContractTypeName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT UserId, FullName, UserName, EmployeeCode, Password, PositionName, DepartmentName, Birthday, JoinDate, Status, Marriage, HealthInsuranceNo, HealthInsuranceAddress, SocialInsuranceNo, AccountNo, AccountName, CardNo, BankName, PaymentDate, StandardLeave, DepartmentId, PositionId, ContractTypeCode, ContractTypeName FROM dbo.ViewEmployeeDeptPosition";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_EmployeeDeptPositionByUserId";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewEmployeeDeptPositionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewEmployeeDeptPositionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewEmployeeDeptPositionDataTable dataTable = new HRM.ViewEmployeeDeptPositionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetEmployeeDeptPositionByUserId(HRM.ViewEmployeeDeptPositionDataTable dataTable, System.Nullable<int> UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewEmployeeDeptPositionDataTable GetEmployeeDeptPositionByUserId(System.Nullable<int> UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            HRM.ViewEmployeeDeptPositionDataTable dataTable = new HRM.ViewEmployeeDeptPositionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewUserRolesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewUserRolesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewUserRoles";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("EmployeeCode", "EmployeeCode");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("RoleId", "RoleId");
            tableMapping.ColumnMappings.Add("RoleName", "RoleName");
            tableMapping.ColumnMappings.Add("RoleLevel", "RoleLevel");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, UserName, EmployeeCode, FullName, RoleId, RoleName, RoleLevel, Des" +
                "cription FROM dbo.ViewUserRoles";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_UserRolesByUserId";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewUserRolesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewUserRolesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewUserRolesDataTable dataTable = new HRM.ViewUserRolesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetUserIdById(HRM.ViewUserRolesDataTable dataTable, System.Nullable<int> UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewUserRolesDataTable GetUserIdById(System.Nullable<int> UserId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            HRM.ViewUserRolesDataTable dataTable = new HRM.ViewUserRolesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IncomeTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IncomeTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IncomeType";
            tableMapping.ColumnMappings.Add("IncomeTypeId", "IncomeTypeId");
            tableMapping.ColumnMappings.Add("IncomeName", "IncomeName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Type", "Type");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IncomeType] WHERE (([IncomeTypeId] = @Original_IncomeTypeId) AND ((@IsNull_IncomeName = 1 AND [IncomeName] IS NULL) OR ([IncomeName] = @Original_IncomeName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)) AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IncomeName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IncomeType] ([IncomeName], [Description], [Type]) VALUES (@Inc" +
                "omeName, @Description, @Type);\r\nSELECT IncomeTypeId, IncomeName, Description, Ty" +
                "pe FROM IncomeType WHERE (IncomeTypeId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IncomeType] SET [IncomeName] = @IncomeName, [Description] = @Description, [Type] = @Type WHERE (([IncomeTypeId] = @Original_IncomeTypeId) AND ((@IsNull_IncomeName = 1 AND [IncomeName] IS NULL) OR ([IncomeName] = @Original_IncomeName)) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)) AND ((@IsNull_Type = 1 AND [Type] IS NULL) OR ([Type] = @Original_Type)));
SELECT IncomeTypeId, IncomeName, Description, Type FROM IncomeType WHERE (IncomeTypeId = @IncomeTypeId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeTypeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IncomeName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IncomeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IncomeName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Type", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeTypeId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IncomeTypeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IncomeTypeId, IncomeName, Description, Type FROM dbo.IncomeType";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Ins_IncomeType";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IncomeName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Type", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.IncomeTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.IncomeTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.IncomeTypeDataTable dataTable = new HRM.IncomeTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM.IncomeTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(HRM dataSet) {
            return this.Adapter.Update(dataSet, "IncomeType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IncomeTypeId, string Original_IncomeName, string Original_Description, System.Nullable<bool> Original_Type) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IncomeTypeId));
            if ((Original_IncomeName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_IncomeName));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Description));
            }
            if ((Original_Type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string IncomeName, string Description, System.Nullable<bool> Type) {
            if ((IncomeName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(IncomeName));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Description));
            }
            if ((Type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string IncomeName, string Description, System.Nullable<bool> Type, int Original_IncomeTypeId, string Original_IncomeName, string Original_Description, System.Nullable<bool> Original_Type, int IncomeTypeId) {
            if ((IncomeName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(IncomeName));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Description));
            }
            if ((Type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_IncomeTypeId));
            if ((Original_IncomeName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_IncomeName));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Description));
            }
            if ((Original_Type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_Type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(IncomeTypeId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int AddNew_IncomeType(string IncomeName, string Description, System.Nullable<bool> Type) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((IncomeName == null)) {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(IncomeName));
            }
            if ((Description == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(Description));
            }
            if ((Type.HasValue == true)) {
                command.Parameters[3].Value = ((bool)(Type.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewIncomeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewIncomeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewIncome";
            tableMapping.ColumnMappings.Add("IncomeMonthId", "IncomeMonthId");
            tableMapping.ColumnMappings.Add("IncomeTypeId", "IncomeTypeId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("IncomeName", "IncomeName");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Lk", "Lk");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Lock", "Lock");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IncomeMonthId, IncomeTypeId, UserId, IncomeName, Value, Lk, Type, Date, Lo" +
                "ck, Description FROM dbo.ViewIncome";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_MonthlyContribution";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.Sel_MonthlyIncome";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserCode", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.Sel_PersonalContributionMonthly";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.Sel_PersonalIncomeMonthly";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewIncomeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewIncomeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewIncomeDataTable dataTable = new HRM.ViewIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetMonthlyContribution(HRM.ViewIncomeDataTable dataTable, string UserCode, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserCode));
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewIncomeDataTable GetMonthlyContribution(string UserCode, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((UserCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserCode));
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewIncomeDataTable dataTable = new HRM.ViewIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetMonthlyIncome(HRM.ViewIncomeDataTable dataTable, string UserCode, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserCode));
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewIncomeDataTable GetMonthlyIncome(string UserCode, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((UserCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(UserCode));
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewIncomeDataTable dataTable = new HRM.ViewIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetPersonalMonthlyContribution(HRM.ViewIncomeDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewIncomeDataTable GetPersonalMonthlyContribution(System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewIncomeDataTable dataTable = new HRM.ViewIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetPersonalMonthlyIncome(HRM.ViewIncomeDataTable dataTable, System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewIncomeDataTable GetPersonalMonthlyIncome(System.Nullable<int> UserId, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((UserId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(UserId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            HRM.ViewIncomeDataTable dataTable = new HRM.ViewIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewEmployeeIncomesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewEmployeeIncomesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewEmployeeIncomes";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("EmployeeCode", "EmployeeCode");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("Birthday", "Birthday");
            tableMapping.ColumnMappings.Add("JoinDate", "JoinDate");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Marriage", "Marriage");
            tableMapping.ColumnMappings.Add("HealthInsuranceNo", "HealthInsuranceNo");
            tableMapping.ColumnMappings.Add("HealthInsuranceAddress", "HealthInsuranceAddress");
            tableMapping.ColumnMappings.Add("SocialInsuranceNo", "SocialInsuranceNo");
            tableMapping.ColumnMappings.Add("AccountNo", "AccountNo");
            tableMapping.ColumnMappings.Add("AccountName", "AccountName");
            tableMapping.ColumnMappings.Add("CardNo", "CardNo");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("PaymentDate", "PaymentDate");
            tableMapping.ColumnMappings.Add("ContractTypeId", "ContractTypeId");
            tableMapping.ColumnMappings.Add("StandardLeave", "StandardLeave");
            tableMapping.ColumnMappings.Add("DepartmentId", "DepartmentId");
            tableMapping.ColumnMappings.Add("PositionId", "PositionId");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            tableMapping.ColumnMappings.Add("PositionName", "PositionName");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Total_Inc", "Total_Inc");
            tableMapping.ColumnMappings.Add("Total_Cntr", "Total_Cntr");
            tableMapping.ColumnMappings.Add("Total_Inc_LK", "Total_Inc_LK");
            tableMapping.ColumnMappings.Add("Total_Cntr_LK", "Total_Cntr_LK");
            tableMapping.ColumnMappings.Add("ContractTypeCode", "ContractTypeCode");
            tableMapping.ColumnMappings.Add("ContractTypeName", "ContractTypeName");
            tableMapping.ColumnMappings.Add("RealIncome", "RealIncome");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT UserId, UserName, EmployeeCode, Password, FullName, Birthday, JoinDate, Status, Marriage, HealthInsuranceNo, HealthInsuranceAddress, SocialInsuranceNo, AccountNo, AccountName, CardNo, BankName, PaymentDate, ContractTypeId, StandardLeave, DepartmentId, PositionId, DepartmentName, PositionName, Date, Total_Inc, Total_Cntr, Total_Inc_LK, Total_Cntr_LK, ContractTypeCode, ContractTypeName, RealIncome FROM dbo.ViewEmployeeIncomes";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_EmployeeAllIncomes";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DepartmentId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FullName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewEmployeeIncomesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewEmployeeIncomesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewEmployeeIncomesDataTable dataTable = new HRM.ViewEmployeeIncomesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByEmployeeAllIncomes(HRM.ViewEmployeeIncomesDataTable dataTable, System.Nullable<int> DepartmentId, System.Nullable<System.DateTime> Date, string FullName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(FullName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewEmployeeIncomesDataTable GetEmployeeAllIncomes(System.Nullable<int> DepartmentId, System.Nullable<System.DateTime> Date, string FullName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((FullName == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(FullName));
            }
            HRM.ViewEmployeeIncomesDataTable dataTable = new HRM.ViewEmployeeIncomesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewRealIncomeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewRealIncomeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewRealIncome";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("AccountNo", "AccountNo");
            tableMapping.ColumnMappings.Add("CardNo", "CardNo");
            tableMapping.ColumnMappings.Add("RealIncome", "RealIncome");
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName");
            tableMapping.ColumnMappings.Add("DepartmentId", "DepartmentId");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("PositionName", "PositionName");
            tableMapping.ColumnMappings.Add("EmployeeCode", "EmployeeCode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::HRMDAL.Properties.Settings.Default.s;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, FullName, AccountNo, CardNo, RealIncome, DepartmentName, Departmen" +
                "tId, Date, PositionName, EmployeeCode FROM dbo.ViewRealIncome";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.Sel_AllRealIncomeByDate";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(HRM.ViewRealIncomeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual HRM.ViewRealIncomeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            HRM.ViewRealIncomeDataTable dataTable = new HRM.ViewRealIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByGetAllRealIncomeByDate(HRM.ViewRealIncomeDataTable dataTable, System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual HRM.ViewRealIncomeDataTable GetAllRealIncomeByDate(System.Nullable<System.DateTime> Date) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            HRM.ViewRealIncomeDataTable dataTable = new HRM.ViewRealIncomeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591